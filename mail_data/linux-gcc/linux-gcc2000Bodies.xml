<?xml version="1.0" encoding="utf-8"?>
<emails><email><emailId>20000105072258</emailId><senderName>Fenglou Mao</senderName><senderEmail>mao@linux2.ipc.pku.edu.cn</senderEmail><timestampReceived>2000-01-05 07:22:58-0400</timestampReceived><subject>stl question</subject><body>

Hi,all,
   Can anyone tell me where I can find an online document about
g++ stl?

Sincerely Yours,

FengLou Mao
*******************************
ADD:Mr. FengLou Mao
    Institute of Physical Chemistry
    Peking University
    BeiJing
    P.R.China
Tel:86-10-62756833
Fax:86-10-62751725

</body></email><email><emailId>20000202100922</emailId><senderName>South Wind</senderName><senderEmail>b3485113@dec4000.cc.ncku.edu.tw</senderEmail><timestampReceived>2000-02-02 10:09:22-0400</timestampReceived><subject>G++ &amp; Fortran</subject><body>

Hello..

   As we know, C functions adding '_' behind
   can be called by a fortran program.

   But it is useless to a C++ function.


   The error will look like this
     fortran_pro.o(.text+0x18): undefined reference to 'xxx_'

   Could someone give a hints...

    Thanks....

</body></email><email><emailId>20000301133043</emailId><senderName>João Borsoi Soares</senderName><senderEmail>joao.soares@bigfoot.com</senderEmail><timestampReceived>2000-03-01 13:30:43-0400</timestampReceived><subject>Creating libraries...</subject><body>

Hello list. I´m a begginer developer for Linux, and I would like to know
if someone could give me a hand creating libraries. I want to create a
shared library. When programming for Windows I used the _export keyword
before the classes or functions. How should I do when programming for
Linux? And what parameters should I pass to compiler?

Thanks for the help.
Joao.

</body></email><email><emailId>20000410232637</emailId><senderName></senderName><senderEmail>linas</senderEmail><timestampReceived>2000-04-10 23:26:37-0400</timestampReceived><subject>Re: Help with GCC ASM inline code</subject><body>

It's been rumoured that jschlst said:
&gt; 
&gt; Hello. I know that this is a tad off topic but I am hoping someone can
&gt; enlighten me on how to do this. I need to create a system call on a x86
&gt; one call requires 7 args, the other 8, and one 9.
&gt; 
&gt; I realize my problem could be avoided by using a data structure but in
&gt; order to be compatible with the API I am implementing it must use the
&gt; exact same number of args.

Why?

excuse me, but any api that takes that many args for s subr call is,
well, um, uh, ok, i'll just out and say it: badly designed.

&gt; I have no problem implementing syscalls w/ Linux, but I have no idea how
&gt; to implment more a syscall with more than 5 args.
&gt; 
&gt; For example the 5 arg syscall is like such:
&gt; #define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
&gt;           type5,arg5) \
&gt; type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5) \
&gt; { \
&gt; long __res; \
&gt; __asm__ volatile ("int $0x80" \
&gt;         : "=a" (__res) \
&gt;         : "0" (__NR_##name),"b" ((long)(arg1)),"c" ((long)(arg2)), \
&gt;           "d" ((long)(arg3)),"S" ((long)(arg4)),"D" ((long)(arg5))); \
&gt; __syscall_return(type,__res); \
&gt; }
&gt; 
&gt; How would I do this for 7, 8, and 9 arguments.

I assume that the reason that you asking this is because the Intel
architecture is short on registers?  The obvious answer is to pass the
parameters on stack (and use copyin/copyout to validate the address
space).  

--linas

</body></email><email><emailId>20000501060241</emailId><senderName>"Murat Parlakisik"</senderName><senderEmail>parlak@mutek.org.tr</senderEmail><timestampReceived>2000-05-01 06:02:41-0400</timestampReceived><subject>Process state</subject><body>

HI

I need to dump process memory state (stack,text,.etc(. How can i do ?

</body></email><email><emailId>20000608080446</emailId><senderName>Junaid Iqbal</senderName><senderEmail>domdev@sat.net.pk</senderEmail><timestampReceived>2000-06-08 08:04:46-0400</timestampReceived><subject>how system calls implemented in glibc?</subject><body>

hi all.
I m unable to undersatnd how system calls implemented in glibc (ver
2.1.3).
for example __libc_system  function (defined in system.c) have these
lines


#include &lt;errno.h&gt;
#include &lt;stdlib.h&gt;


/* Execute LINE as a shell command.  */
int
__libc_system (line)
     const char *line;
{
  if (line == NULL)
    return 0;   /* This indicates no command processor.  */

  __sys_errno (ENOSYS);
  return -1;
}
weak_alias (__libc_system, system)


stub_warning (system)
#include &lt;stub-tag.h&gt;



can some one give me hand in understanding this?
thanks in advance.

</body></email><email><emailId>20000701080213</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-07-01 08:02:13-0400</timestampReceived><subject>glibc 2.1.91 (first test release for 2.2)</subject><body>

I've just uploaded to

	ftp://sourceware.cygnus.com/pub/glibc/releases

the files

	glibc-2.1.91.tar.bz2	(also glibc-2.1.91.tar.gz)
and
	glibc-linuxthreads-2.1.91.tar.gz

which contain the first test release for glibc 2.2.  A *lot* has
changed and therefore no diff again 2.1.3 is available.  If the
sourceware machine is not accessible due to overload please visit one
of the mirrors.  There is *no* crypt add-on anymore.  Due to the
change in the export restrictions we can now provide the crappy code in
the glibc sources.  Do not use an old add-on.


This is a first test release and not much testing in complete systems
and for compatibility has been done so far (this is why we are doing
public release).  This release is mainly meant to show the new
technologies and get early testers.  Don't install this version on any
production machine, best install it in a chroot environment or perform
tests without actually installing it.

This version is very near to feature-completeness for the 2.2 release.
There are only a few things which will change:

* the RPM code is completely f*cked up.  We are completely in limbo
  between the old code, a version with IPv6 support, and Sun's code.
  None of the developers actually has much experience with this code
  and so not much was done.

  I actually intended to remove the IPv6 changes before the release
  (since they are binary incompatible with the 2.1 release) but left
  it in since I don't want anybody to install this libc anyway and in
  the hope that somebody has mercy with the RPC code and volunteers to
  work on it.  If there is such a kind soul out there, please get in
  contact with me.

* the Linux/IA-64 code is not yet complete

* I do not know about the status of the two Linux ports which are not
  yet in glibc: HP/PA and S390.  Maybe they get in, maybe not.


Now a word about the changes:

* the db and db2 code is gone.  Since yet another interface change would
  have been necessary (the upstream maintainer did it, not me) I decided
  to drop it from glibc.  The only reason the code was there in the fist
  place was the NSS code and we now worked around the problem of not
  having the code in glibc.  The nss_db module us still built.

* the utmpd daemon is also gone.  It was only necessary for the transition
  from glibc 2.0 to 2.1

* new Linux ports: SPARC64, SH, IA-64.  The MIPS port now also works.

* completely rewritten locale code.  This is one of the biggest
  improvements but includes also the greatest risk of breakage.  The
  changes include:

  + full multibyte character set support.  This includes Asian character
    sets but (especially) also UTF-8

  + wide character stream functions.  All functions from ISO C99 are
    now implemented

  + next generation locale specification support, including new categories,
    and working without repertoire maps

  + much more standard compliant through testing and more careful studying
    of standards

  + better message translation support with handling of plural forms and
    automatic transformation of message to the current character set

* dozens (hundreds?) of new functions, mostly from new POSIX standards you
  probably have not even heard of.  This includes:

  + POSIX spawn functions

  + POSIX spinlocks

  + POSIX barriers

  + POSIX timer &amp; clocks

  + POSIX shared memory

  + POSIX timed wait functions for various synchronization objects

  + extended socket API functions

* the resolver of the NSS DNS module is now allows access from multiple
  threads at the same time.

* major improvements in the thread library

  + fewer bugs

  + better performance (esp on x86)

  + new functions which help programs heavily using synchronization
    objects


Beside this we have the usual bug fixes (mainly for better compliance
with standards and compatibility with other systems) and cleanups.


What has not yet happened, we will start with this soon, is profiling
and memory leak testing.


HOW CAN YOU HELP?

The most important question (for me).

* simply compile and run the test suite.  But be aware, it's not a small
  package:
    sources:          88MB
    compile objects: 320MB (on IA-32, with static, shared, profile)

  Add to this the size for the installed files.  Compilation takes on
  a high-end dual CPU IA-32 machine about 40 min.  Don't try this on
  your i386 or Atari ST, kids.  You might not be able to use the
  machine for a week or so.


* volunteer to help on some of the open issues.  Take a look at

    http://www.cygnus.com/~drepper/TODO.html

  I'm updating the list when something is done or something new comes
  up.  So please revisit the page.


* Test:

  + write own programs, recompile old programs.  I'm especially interested
    in programs using the new locale stuff.  Use it and write tons of
    UTF-8 enabled programs.  Also programs patched for Asian users should
    be tested.  No hacked-up glibc version is necessary anymore.

  + write new tests.  Tests are appreciated for all parts of the code, but
    especially again for the locale code.  Since a lot of the libc is
    influenced by the locale setting a lot has to be tested.

    You don't even have to be able to write C programs.  One part of the
    locale test suite consists of programs which are driven by tables.
    Simply adding new entries to the tables adds more tests.

  + compatibility testing.  Run programs compiled with old versions using
    the new libc.  Note that you cannot simply use only the new libc.so,
    you at least have to use the new ld.so as well.



How soon we can make the final 2.2 release depends on the help and
feedback we get.  If nobody gives any feedback this is as bad as if
nobody would do any tests at all.  Even if everything works
(especially then) also let us know.  All feedback related to this
release should be sent to

	libc-alpha@sourceware.cygnus.com

This mailing list is open for everybody.


-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------

</body></email><email><emailId>20000805165130</emailId><senderName>Graham Murray</senderName><senderEmail>graham@barnowl.demon.co.uk</senderEmail><timestampReceived>2000-08-05 16:51:30-0400</timestampReceived><subject>glibc 2.1.92 - gcc 2.95.2 will not build</subject><body>

Following the 'hints' in the glibc documentation, I tried rebuilding
gcc after installing glibc 2.1.92. This failed during the compilation
of indstream.cc.

This contains methods which return a value of streampos.  This is
typedef'd to either _IO_fpos64_t or _IO_fpos_t (depending on 64 bit
file offsets). This is further defined to map to _G_fpos64_t or
_G_fpos_t. Under glibc 2.1.3, these were defined (via other #defines
and typdefs) as integer types.  With glibc 2.1.92, the _G_fpos type is
defined as a structure - which causes the compilation to fail.

Is gcc 2.95.2 supposed to be able to compiled with glibc 2.1.92, or
is a gcc 2.96 snapshot necessary?

</body></email><email><emailId>20000805171007</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-08-05 17:10:07-0400</timestampReceived><subject>Re: glibc 2.1.92 - gcc 2.95.2 will not build</subject><body>

Graham Murray &lt;graham@barnowl.demon.co.uk&gt; writes:

&gt; This contains methods which return a value of streampos.  This is
&gt; typedef'd to either _IO_fpos64_t or _IO_fpos_t (depending on 64 bit
&gt; file offsets). This is further defined to map to _G_fpos64_t or
&gt; _G_fpos_t. Under glibc 2.1.3, these were defined (via other #defines
&gt; and typdefs) as integer types.  With glibc 2.1.92, the _G_fpos type is
&gt; defined as a structure - which causes the compilation to fail.

That's a bug in gcc.  Don't report it here.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------

</body></email><email><emailId>20000701110904</emailId><senderName>Mark Kettenis</senderName><senderEmail>kettenis@wins.uva.nl</senderEmail><timestampReceived>2000-07-01 11:09:04-0400</timestampReceived><subject>Re: glibc 2.1.91 (first test release for 2.2)</subject><body>

   From: Ulrich Drepper &lt;drepper@redhat.com&gt;
   Date: 01 Jul 2000 01:02:13 -0700

   * the utmpd daemon is also gone.  It was only necessary for the transition
     from glibc 2.0 to 2.1

A minor correction:  The utmpd daemon was supposed to ease the
transition from libc5 to libc6.  It probably never served that
purpose.

Mark

</body></email><email><emailId>20000608091327</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@suse.de</senderEmail><timestampReceived>2000-06-08 09:13:27-0400</timestampReceived><subject>Re: how system calls implemented in glibc?</subject><body>

&gt;&gt;&gt;&gt;&gt; Junaid Iqbal writes:

 &gt; hi all.
 &gt; I m unable to undersatnd how system calls implemented in glibc (ver
 &gt; 2.1.3).
 &gt; for example __libc_system  function (defined in system.c) have these
 &gt; lines
That's the fall back in sysdeps/generic/system.c, the function used on
Linux is in sysdeps/posix/system.c.  Read the documentation about the
sysdeps directory and have also a look at syscalls.list.

 &gt; #include &lt;errno.h&gt;
 &gt; #include &lt;stdlib.h&gt;


 &gt; /* Execute LINE as a shell command.  */
 &gt; int
 &gt; __libc_system (line)
 &gt;      const char *line;
 &gt; {
 &gt;   if (line == NULL)
 &gt;     return 0;   /* This indicates no command processor.  */

 &gt;   __sys_errno (ENOSYS);
 &gt;   return -1;
 &gt; }
 &gt; weak_alias (__libc_system, system)


 &gt; stub_warning (system)
 &gt; #include &lt;stub-tag.h&gt;



 &gt; can some one give me hand in understanding this?
 &gt; thanks in advance.




-- 
 Andreas Jaeger
  SuSE Labs aj@suse.de
   private aj@arthur.inka.de

</body></email><email><emailId>20000608112533</emailId><senderName>Junaid Iqbal</senderName><senderEmail>domdev@sat.net.pk</senderEmail><timestampReceived>2000-06-08 11:25:33-0400</timestampReceived><subject>Re: how system calls implemented in glibc?</subject><body>

Thanks for ur reply.
got it. looking in wrong path.  from where i can get docs on sysdeps dir
structure and some detail on its functions

One more problem. i m looking for File System functions like __unlink ,
__open etc.
they r defined in 2 places in the tree under sysdeps/mach/hurd/unlink.c
or in /sysdeps/generic/unlink.c
generic/unlink.c is same as generic/system.c.
sysdeps/mach/hurd/unlink.c looks like the main unlink code. but its using
some functions which i m unable to find.
like __dir_unlink.




Andreas Jaeger wrote:

&gt; &gt;&gt;&gt;&gt;&gt; Junaid Iqbal writes:
&gt;
&gt;  &gt; hi all.
&gt;  &gt; I m unable to undersatnd how system calls implemented in glibc (ver
&gt;  &gt; 2.1.3).
&gt;  &gt; for example __libc_system  function (defined in system.c) have these
&gt;  &gt; lines
&gt; That's the fall back in sysdeps/generic/system.c, the function used on
&gt; Linux is in sysdeps/posix/system.c.  Read the documentation about the
&gt; sysdeps directory and have also a look at syscalls.list.
&gt;
&gt;  &gt; #include &lt;errno.h&gt;
&gt;  &gt; #include &lt;stdlib.h&gt;
&gt;
&gt;  &gt; /* Execute LINE as a shell command.  */
&gt;  &gt; int
&gt;  &gt; __libc_system (line)
&gt;  &gt;      const char *line;
&gt;  &gt; {
&gt;  &gt;   if (line == NULL)
&gt;  &gt;     return 0;   /* This indicates no command processor.  */
&gt;
&gt;  &gt;   __sys_errno (ENOSYS);
&gt;  &gt;   return -1;
&gt;  &gt; }
&gt;  &gt; weak_alias (__libc_system, system)
&gt;
&gt;  &gt; stub_warning (system)
&gt;  &gt; #include &lt;stub-tag.h&gt;
&gt;
&gt;  &gt; can some one give me hand in understanding this?
&gt;  &gt; thanks in advance.
&gt;
&gt; --
&gt;  Andreas Jaeger
&gt;   SuSE Labs aj@suse.de
&gt;    private aj@arthur.inka.de

</body></email><email><emailId>20000901010757</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-09-01 01:07:57-0400</timestampReceived><subject>glibc 2.1.93</subject><body>

I've uploaded the files for the third test release of glibc 2.2 to

  ftp://sources.redhat.com/pub/glibc/releases/

You can find the files

  glibc-2.1.93.tar.bz2                 (also .gz)
  glibc-2.1.92-2.1.93.diff.bz2         (also .gz)
  glibc-linuxthreads-2.1.93.tar.gz
  nss_db-2.1.92.tar.gz

there.  The diff file is large but most changes are to data files.  We
have fixed quite a few bugs, plugged several more memory leaks (or at
least added missing free() calls), added the last pieces to support
IA-64 and S390, added support for the most recent Linux kernel
changes, and started optimizing for a final release.  There are no
known binary compatibility issues with glibc 2.1 programs anymore.
This release is suitable to be used on non-essential machines (I'm
careful, I would use it everywhere since it contains far fewer bugs
than 2.1.3 but don't want to get blamed).

One of the things fixed in this release is the nss_db module.  It
didn't work at all with statically linked applications in previous
test releases.  The solution is to separate the sources in its own
package and let the user compile it separately after glibc and the db
library of choice.  This is what the nss_db file mentioned above is
for.  And yes, 2.1.92 is the current version.

The biggest changes are in the locale area.  We have a better data
format and faster localedef (thanks to Bruno Haible) which will
require applications linked statically against glibc 2.1.91 or 2.1.92
to be relinked.  They wouldn't crash but instead stop using locale
information.

We have also a large number of new locales, mainly due to help from
IBM Japan.  The total number of supported locales is now 131.  Many of
the locales are not complete, though, since IBM's data did not contain
the information for the new categories.  Any help to fill the gaps is
appreciated.

Also, the collation handling needs tweaking for languages which need
ordering different from the standard one.  One example of how this is
done is the Swedish locale which I have fixed recently (look at the
sv_SE file).  If your language requires attention please write down
the rules (or refer to a document readable for the developers) and
we'll adjust the ordering.


We are close to a final release and therefore I encourage everybody
with the necessary knowledge to try this version.  There is no way we
can ensure a working libc (including backward compatibility) without a
larger amount of testers.

Send success stories and bug reports to libc-alpha@sourceware.cygnus.com.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20000908015657</emailId><senderName>Dieter =?iso-8859-1?Q?N=FCtzel?=</senderName><senderEmail>dieter.nuetzel@hamburg.de</senderEmail><timestampReceived>2000-09-08 01:56:57-0400</timestampReceived><subject>Re: glibc 2.1.93</subject><body>

Sorry, that I bother you...

My system is an AMD Athlon 550 Slot A on MSI MS-6167 Rev. 1.0B.

SunWave1&gt;gcc -v
Reading specs from /usr/lib/gcc-lib/i686-pc-linux-gnu/2.95.2/specs
gcc version 2.95.2 19991024 (release)

-O -mcpu=k6 -mpreferred-stack-boundary=2 -malign-functions=4
-fschedule-insns2 -fexpensive-optimizations

I use these flags because they deliver much better performance on the
Athlon.
Especially -fomit-frame-pointer should be avoided because it is a big
performance killer.

For example:

gcc -O -funroll-loops -DMAIN -o dgemm dgemm.c

SunWave1&gt;./dgemm-O
m:1000 n:1000 k:1000
Ail_max 24, Blj_max 12, A_row_block 85
Shimizu's DGEMM : 147.384 MFLOPS(13.570 sec)
Shimizu's DGEMM : 147.384 MFLOPS(13.570 sec)
Shimizu's DGEMM : 147.384 MFLOPS(13.570 sec)


gcc -O -mcpu=k6 -mpreferred-stack-boundary=2 -malign-functions=4
-fschedule-insns2 -fexpensive-optimizations -DMAIN -o dgemm dgemm.c

SunWave1&gt;./dgemm-k6
m:1000 n:1000 k:1000
Ail_max 24, Blj_max 12, A_row_block 85
Shimizu's DGEMM : 213.220 MFLOPS( 9.380 sec)
Shimizu's DGEMM : 213.220 MFLOPS( 9.380 sec)
Shimizu's DGEMM : 213.675 MFLOPS( 9.360 sec)

I've got this with mostly all of the newer glibc versions. With '-O2'
only I am fine.

SunWave1&gt;less /tmp/INSTALL/mail/test-double.out
testing double (without inline functions)
Failure: Test: yn (3, 0.7) == -15.819479052819633505
Result:
 is:         -1.58194790528196396195e+01
-0x1.fa392c2273c1d00000000000000000000p+3
 should be:  -1.58194790528196342905e+01
-0x1.fa392c2273c1a00000000000000000000p+3
 difference:  5.32907051820075139403e-15
0x1.800000000000000000000000000000000p-48
 ulp       :  3.0000
 max.ulp   :  2.0000

Test suite completed:
  2475 test cases plus 2267 tests for exception flags executed.
  1 errors occured.

Please do NOT only say 'it is a gcc bug so go away'.
I've tried most stuff with gcc-2.96 (-march=athlon) and it is much
slower?! :-(
I would love to hear if you think that I can compile the glibc without
-fomit-frame-pointer or not and then why?
All other tests seams to work well.

Thank you very much.

-Dieter

--
!!! Attention - New Email Address !!!

Dieter Nützel
Graduate Student, Computer Science

University of Hamburg
Department of Computer Science
Cognitive Systems Group
Vogt-Kölln-Straße 30
D-22527 Hamburg, Germany

email: nuetzel@kogs.informatik.uni-hamburg.de
@home: Dieter.Nuetzel@hamburg.de

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>200009080156570</emailId><senderName>Dieter =?iso-8859-1?Q?N=FCtzel?=</senderName><senderEmail>dieter.nuetzel@hamburg.de</senderEmail><timestampReceived>2000-09-08 01:56:57-0400</timestampReceived><subject>Re: glibc 2.1.93</subject><body>

Sorry, that I bother you...

My system is an AMD Athlon 550 Slot A on MSI MS-6167 Rev. 1.0B.

SunWave1&gt;gcc -v
Reading specs from /usr/lib/gcc-lib/i686-pc-linux-gnu/2.95.2/specs
gcc version 2.95.2 19991024 (release)

-O -mcpu=k6 -mpreferred-stack-boundary=2 -malign-functions=4
-fschedule-insns2 -fexpensive-optimizations

I use these flags because they deliver much better performance on the
Athlon.
Especially -fomit-frame-pointer should be avoided because it is a big
performance killer.

For example:

gcc -O -funroll-loops -DMAIN -o dgemm dgemm.c

SunWave1&gt;./dgemm-O
m:1000 n:1000 k:1000
Ail_max 24, Blj_max 12, A_row_block 85
Shimizu's DGEMM : 147.384 MFLOPS(13.570 sec)
Shimizu's DGEMM : 147.384 MFLOPS(13.570 sec)
Shimizu's DGEMM : 147.384 MFLOPS(13.570 sec)


gcc -O -mcpu=k6 -mpreferred-stack-boundary=2 -malign-functions=4
-fschedule-insns2 -fexpensive-optimizations -DMAIN -o dgemm dgemm.c

SunWave1&gt;./dgemm-k6
m:1000 n:1000 k:1000
Ail_max 24, Blj_max 12, A_row_block 85
Shimizu's DGEMM : 213.220 MFLOPS( 9.380 sec)
Shimizu's DGEMM : 213.220 MFLOPS( 9.380 sec)
Shimizu's DGEMM : 213.675 MFLOPS( 9.360 sec)

I've got this with mostly all of the newer glibc versions. With '-O2'
only I am fine.

SunWave1&gt;less /tmp/INSTALL/mail/test-double.out
testing double (without inline functions)
Failure: Test: yn (3, 0.7) == -15.819479052819633505
Result:
 is:         -1.58194790528196396195e+01
-0x1.fa392c2273c1d00000000000000000000p+3
 should be:  -1.58194790528196342905e+01
-0x1.fa392c2273c1a00000000000000000000p+3
 difference:  5.32907051820075139403e-15
0x1.800000000000000000000000000000000p-48
 ulp       :  3.0000
 max.ulp   :  2.0000

Test suite completed:
  2475 test cases plus 2267 tests for exception flags executed.
  1 errors occured.

Please do NOT only say 'it is a gcc bug so go away'.
I've tried most stuff with gcc-2.96 (-march=athlon) and it is much
slower?! :-(
I would love to hear if you think that I can compile the glibc without
-fomit-frame-pointer or not and then why?
All other tests seams to work well.

Thank you very much.

-Dieter

--
!!! Attention - New Email Address !!!

Dieter Nützel
Graduate Student, Computer Science

University of Hamburg
Department of Computer Science
Cognitive Systems Group
Vogt-Kölln-Straße 30
D-22527 Hamburg, Germany

email: nuetzel@kogs.informatik.uni-hamburg.de
@home: Dieter.Nuetzel@hamburg.de

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001016002028</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-10-16 00:20:28-0400</timestampReceived><subject>Re: glibc 2.1.93</subject><body>

Dieter Nützel &lt;Dieter.Nuetzel@hamburg.de&gt; writes:

&gt; Sorry, that I bother you...
&gt; 
&gt; My system is an AMD Athlon 550 Slot A on MSI MS-6167 Rev. 1.0B.

This has nothing to do with the system.  The code as written only
aligns the stack appropriately if compiled with frame pointer.  Nobody
should try compiling with the -fomit-frame-pointer option, you'll
never see that this is advised anywhere.  So just don't do it.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20000908062010</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@suse.de</senderEmail><timestampReceived>2000-09-08 06:20:10-0400</timestampReceived><subject>Re: glibc 2.1.93</subject><body>

&gt;&gt;&gt;&gt;&gt; tzel  writes:

 &gt; Sorry, that I bother you...
No need to send this to everybody - if you have glibc or compiler
questions, there're public lists available.

[...]
SunWave1&gt; less /tmp/INSTALL/mail/test-double.out
 &gt; testing double (without inline functions)
 &gt; Failure: Test: yn (3, 0.7) == -15.819479052819633505
 &gt; Result:
 &gt;  is:         -1.58194790528196396195e+01
 &gt; -0x1.fa392c2273c1d00000000000000000000p+3
 &gt;  should be:  -1.58194790528196342905e+01
 &gt; -0x1.fa392c2273c1a00000000000000000000p+3
 &gt;  difference:  5.32907051820075139403e-15
 &gt; 0x1.800000000000000000000000000000000p-48
 &gt;  ulp       :  3.0000
 &gt;  max.ulp   :  2.0000

 &gt; Test suite completed:
 &gt;   2475 test cases plus 2267 tests for exception flags executed.
 &gt;   1 errors occured.
You should understand what a ULP is - it's a difference in the last
place.  It's strange that different compiler settings give a slightly
different result but this might happen on ix86.  Just ignore it.
That's nothing serious, just one bit less precision.

 &gt; Please do NOT only say 'it is a gcc bug so go away'.
 &gt; I've tried most stuff with gcc-2.96 (-march=athlon) and it is much
 &gt; slower?! :-(
 &gt; I would love to hear if you think that I can compile the glibc without
 &gt; -fomit-frame-pointer or not and then why?
You can compile it without -fomit-frame-pointer - that's what most of
us do all the time.

Andreas
-- 
 Andreas Jaeger
  SuSE Labs aj@suse.de
   private aj@arthur.inka.de
    http://www.suse.de/~aj
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20000916233133</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-09-16 23:31:33-0400</timestampReceived><subject>binutils 2.10.0.26 is released.</subject><body>

My alpha machine is shutdown. There is no alpha binary rpm this time.

-- 
H.J. Lu (hjl@gnu.org)
--
This is the beta release of binutils 2.10.0.26 for Linux, which is
based on binutils 2000 00907 in CVS on sourecware.cygnus.com plus
various changes. It is purely for Linux, although it has been tested
on Solaris/Sparc and Solaris/x86 from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.10.0.26 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.10.0.24:

1. Update from binutils 2000 0907.

Changes from binutils 2.10.0.18:

1. Update from binutils 2000 0823. Fix DT_RPATH/DT_RUNPATH handling.
Fix the ELF/ia32 DSO not compiled with PIC.
2. Try to fix the ELF visibility bug on PPC with glibc 2.2.

Changes from binutils 2.10.0.12:

1. Update from binutils 2000 0720.
2. Fix the DT_NEEDED link bug.
3. Add the new DT_XXXX dynamic tags. Glibc 2.2 will use them at least
on libpthread.so.

Changes from binutils 2.10.0.9:

1. Update from binutils 2000 0701. Fix the parallel build in ld when PE
is enabled.

Changes from binutils 2.9.5.0.46:

1. Update from binutils 2000 0617. The demangler support for the new
g++ ABI. Minor fix for the ELF visibility. Fix linking non-ELF
relocatable object files under ELF with symbol versioning.
2. Support for linking PE relocatable object files under ia32/ELF.

Changes from binutils 2.9.5.0.42:

1. Update from binutils 2000 0604. The ELF visibility attribuite should
work correctly now.
2. The ia32 assembler has changed the way it assembles the "jmp"
instructions to the global symbols. The old assembler will optimize the
jump to the global symbol defined in the same source file so that no
relocation will be used. The new assembler will use relocation for
global jumps. It will mainly affect PIC asm code. The segment like

	.globl  __setjmp
__setjmp:
	...
	jmp __sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:

is no longer PIC safe since "jmp __sigsetjmp" jumps to a global symbol
and relocation will be used. Instead, it can be changed to

	.globl  __setjmp
__setjmp:
	...
	jmp sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:
sigsetjmp:

so that "jmp sigsetjmp" jumps to a local symbol and the new assembler
will optimize out the relocation.

Changes from binutils 2.9.5.0.41:

1. Update from binutils 2000 0512.
2. Add testsuite for ELF visibility.

Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.10.0.26.tar.gz. Source code.
2. binutils-2.10.0.24-2.10.0.26.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.10.0.26-1.i386.rpm. IA-32 binary RPM for RedHat 6.2.

There is no separate source rpm. You can do

# rpm -ta binutils-2.10.0.26.tar.gz

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
09/16/2000
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org


</body></email><email><emailId>20000920150600</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@suse.de</senderEmail><timestampReceived>2000-09-20 15:06:00-0400</timestampReceived><subject>Re: glibc 2.1.94</subject><body>

&gt;&gt;&gt;&gt;&gt; Mike Black writes:

 &gt; I compiled glibc-2.1.94 OK with pgcc-2.95.2 19991024 (release)
 &gt; I then upgraded to 2.96 20000918 (experimental) and did a clean re-extract
 &gt; re-compile of glibc-2.1.94 and got this:


 &gt; make[1]: Entering directory `/usr/src/lib/glibc-2.1.94/iconv'
 &gt; gcc -nostdlib -nostartfiles -o
 &gt; conv_prog  -Wl,-dynamic-linker=/usr/local/lib/ld-linux.so.2   ../csu/crt1.o
 &gt; ../csu/crti.o `gcc --pri
 &gt; nt-file-name=crtbegin.o`
 &gt; conv_prog.o  -Wl,-rpath-link=..:../math:../elf:../dlfcn:../nss:../nis:../rt:
 &gt; ../resolv:../crypt:../linuxthr
 &gt; eads ../libc.so.6 ../libc_nonshared.a -lgcc `gcc --print-file-name=crtend.o`
 &gt; ../csu/crtn.o
 &gt; ../csu/crt1.o(.text+0xc): undefined reference to `_fini'
 &gt; ../csu/crt1.o(.text+0x11): undefined reference to `_init'

That's the result of a broken Preprocessor, upgrade your compiler,
it's fixed now.

Andreas

-- 
 Andreas Jaeger
  SuSE Labs aj@suse.de
   private aj@arthur.inka.de
    http://www.suse.de/~aj
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20000926235015</emailId><senderName>David Ford</senderName><senderEmail>david@kalifornia.com</senderEmail><timestampReceived>2000-09-26 23:50:15-0400</timestampReceived><subject>Re: glibc 2.1.92 (second test release 2.2)</subject><body>

Ulrich Drepper wrote:

&gt; &gt; What is the recommended 'default' way to configure and build glibc
&gt; &gt; to use a 686 cpu, debuggable, and using / as it's root, i.e
&gt; &gt; /usr/include and /lib?
&gt;
&gt; configure --prefix=/usr --enable-add-ons
&gt;
&gt; and then set CFLAGS to something appropriate for the i686.

Thank you,
-d

--
      "There is a natural aristocracy among men. The grounds of this are
      virtue and talents", Thomas Jefferson [1742-1826], 3rd US President



["david.vcf" (text/x-vcard)]
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org


</body></email><email><emailId>20000927034703</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-09-27 03:47:03-0400</timestampReceived><subject>asynchronous hostname lookup API proposal</subject><body>

I've put my take on an API for asynchronous (host)name lookup up at

  http://www.cygnus.com/~drepper/asynchnl.pdf

Comments to me, please.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20000929164448</emailId><senderName>Bruno Haible</senderName><senderEmail>haible@clisp.cons.org</senderEmail><timestampReceived>2000-09-29 16:44:48-0400</timestampReceived><subject>gperf 2.7.2 is released</subject><body>


GNU gperf-2.7.2 can be downloaded from

   ftp://ftp.gnu.org/pub/gnu/gperf/gperf-2.7.2.tar.gz and mirrors

and

   ftp://gperf.sourceforge.net/pub/gperf/gperf-2.7.2.tar.gz

This release should be usable by the GCC project without
modifications.


Changes from 2.7:

* Added option "-F" for gcc.
* Keywords may now be enclosed in double quotes; this permits the use of
  '#', ',', space or NUL inside keywords.
* Bug fixes.


        Bruno
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20000802232439</emailId><senderName>Aaron M !  Ucko</senderName><senderEmail>amu@mit.edu</senderEmail><timestampReceived>2000-08-02 23:24:39-0400</timestampReceived><subject>Re: Pb with signal and read</subject><body>

Christophe Leroy &lt;christophe.leroy@c-s.fr&gt; writes:

&gt; I'm using gcc on Linux RedHat 6.2
&gt; It's said in man that signal() behaviour is SYSV one. But, when I
&gt; compile my programs, signal() has got the BSD behaviour. Why ?
&gt; How can I make it have SYSV behaviour ?

The manpage you're looking at is out of date; libc 5 gave you SYSV
semantics, but libc 6 (glibc 2) switched back to BSD semantics.  At
any rate, if you want control over signal semantics you want to use
sigaction(2).

-- 
Aaron M. Ucko, KB1CJC &lt;amu@mit.edu&gt; (finger amu@monk.mit.edu)

</body></email><email><emailId>20000803003052</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-08-03 00:30:52-0400</timestampReceived><subject>glibc 2.1.92 (second test release 2.2)</subject><body>

I've uploaded to

	ftp://sourceware.cygnus.com/pub/glibc/releases

the files

  md5

  c8a764213b532b1af093248b2306c5a9  glibc-2.1.92.tar.bz2
  e6a9a606265d412d5718d70c102b12da  glibc-2.1.92.tar.gz	  (use .bz2 instead)
  b233497bc27288dadcf3120f1e32609f  glibc-2.1.91-2.1.92.diff.gz
  fdfafee21ca794ca86709ae1d9c5b283  glibc-linuxthreads-2.1.92.tar.gz


The changes from the 2.1.91 release are numerous (as can be seem by
the size of the diff file).  We tried to handle and resolve all
reports coming in for 2.1.91 and also all outstanding reports in this
test release with the result that I know fewer problems with this
release than any previous one (this includes 2.1.3 etc).  Many people
are already using this version as the main version.  But still be
careful, there could be some bugs hidden and also incompatibilities
might still exist.


I've tested this release only on Linux/x86 and Linux/Arm (the only
machines I have).  The alpha, PPC, and SPARC versions should run or be
not far from doing so.  The same is true for the Hurd.  I don't know
about the rest.  The Linux/IA-64 version will need special tools and
kernel sources, the Linux/S390 version is incomplete.


Please test this release as much as you can.  I haven't received many
reports for 2.1.91 which can means it was alsmost bug-free or not many
people actually used it.  Report all problems to

	libc-alpha@sourceware.cygnus.com

and *not* to me directly.  Also don't send me questions, I won't
answer.  All this traffic should be directed to the libc-alpha list.


If you send a report provide a test case if possible.  If we cannot
reproduce it in an acceptible time frame we'll forget about the
report.  If we have no test case the same problem can appear in future
releases.


Beside possible changes from the kernel side I consider the ABI fixed
now.  There will be more changes coming but beside bug fixes they'll
only perform optimizations transparent to the user.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------

</body></email><email><emailId>20000805171617</emailId><senderName>Kaoru Fukui</senderName><senderEmail>k_fukui@highway.ne.jp</senderEmail><timestampReceived>2000-08-05 17:16:17-0400</timestampReceived><subject>Re: glibc 2.1.92 - gcc 2.95.2 will not build</subject><body>

From: Graham Murray &lt;graham@barnowl.demon.co.uk&gt;
To: libc-alpha@sourceware.cygnus.com
Subject: glibc 2.1.92 - gcc 2.95.2 will not build
Date: 05 Aug 2000 16:51:30 +0000
Cc: linux-gcc@vger.rutgers.edu

&gt; Following the 'hints' in the glibc documentation, I tried rebuilding
&gt; gcc after installing glibc 2.1.92. This failed during the compilation
&gt; of indstream.cc.
&gt; 
&gt; This contains methods which return a value of streampos.  This is
&gt; typedef'd to either _IO_fpos64_t or _IO_fpos_t (depending on 64 bit
&gt; file offsets). This is further defined to map to _G_fpos64_t or
&gt; _G_fpos_t. Under glibc 2.1.3, these were defined (via other #defines
&gt; and typdefs) as integer types.  With glibc 2.1.92, the _G_fpos type is
&gt; defined as a structure - which causes the compilation to fail.
&gt; 
&gt; Is gcc 2.95.2 supposed to be able to compiled with glibc 2.1.92, or
&gt; is a gcc 2.96 snapshot necessary?
&gt; 

If you want to use gcc-2.95.2,You put gcc-2.96's libio into gcc-2.95.2.

I had successed the way I use both gccs on glibc-2.19.2.

Kaoru
fukui@ppc.linux.or.jp

</body></email><email><emailId>20000805172305</emailId><senderName>dreamwvr</senderName><senderEmail>dreamwvr@dreamwvr.com</senderEmail><timestampReceived>2000-08-05 17:23:05-0400</timestampReceived><subject>Re: Camera Application software run on Linux PC</subject><body>

hi ,,
 goto 
www.freshmeat.net 
and do a search there.. plenty around those parts..
				Regards,
				dreamwvr@dreamwvr.com
ps- note it will be
choppy due to 
latency
On Sat, 05 Aug 2000, sllai wrote:
&gt; I would like to know whether currently their is application software that
&gt; can make use of the PC camera (either uing USB or serial port) in Linux
&gt; system.
&gt;  It is like conduct a video conference using the PC camera and both PC is
&gt; running he Linux OS.
&gt; 
&gt; Any idea or info on this is highly appreciated
&gt; sllai
&gt; 
&gt; -====---====---====---====---====---====---====---====---====---====---====-
&gt;  to unsubscribe email "unsubscribe linux-admin" to majordomo@vger.rutgers.edu
&gt;  See the linux-admin FAQ: http://www.kalug.lug.net/linux-admin-FAQ/
-- 
Reuters, London, February 29, 1998:
Scientists have announced discovering a meteorite which will strike the
earth in March, 2028.  Millions of UNIX coders expressed relief for being
spared the UNIX epoch "crisis" of 2038. 
_______________________________________________________________________
 
************** DREAMWVR.COM - TOTAL INTERNET SERVICES ****************
  TOTAL DESIGN - DEVELOPMENT - INTEGRATION - SECURITY - Click Here..
           &lt;http://www.dreamwvr.com/services/MAX_SEC.html&gt;;
   DREAMWVR.COM - The Console of Many... 90 Topics Covered
&lt;http://www.dreamwvr.com/dynamicduo.html&gt;;
&lt;mailto:dreamwvr@dreamwvr.com&gt;;
-&gt;&gt; LINUX Solution Provider and North American Distributor&lt;&lt;-
 "===0 PGP Key Available
*************** "As Unique as the Company You Keep."*****************
    "If anyone speaks from DREAMWVR.COM its certainly not me:-)"
________________________________________________________________________  

</body></email><email><emailId>20000808141413</emailId><senderName>MPInet User</senderName><senderEmail>shaft@mpinet.net</senderEmail><timestampReceived>2000-08-08 14:14:13-0400</timestampReceived><subject>Great website for wholesale body jewelry and piercing supplies</subject><body>


We have just recently finished our website and online catalog.  Please take a second \
and browse through our site to see our great prices on body jewelry and unique gifts. \
http://www.steeldreamsbodyjewelry.com  We have jewelry that no one has seen before.  \
As an incentive to buy from us we have several specials going now! If you buy more \
than $600 in jewelry you will receive 50-14 gauge 1/2" CBR's FREE and with all 14 or \
16 gauge piercing jewelry ordered you will receive a free sterilized individually \
wrapped piercing needle. No orders under $100 please. Please call our toll-free \
number 1-877-974-3723 for a free catalog or for more information that isn't on the \
site.  Please do not respond to this email address for any information.  Thanks for \
your time.

-Ray at Steel Dreams


</body></email><email><emailId>20000812223023</emailId><senderName>Kurt Wall</senderName><senderEmail>kwall@kurtwerks.com</senderEmail><timestampReceived>2000-08-12 22:30:23-0400</timestampReceived><subject>Re: Basic programming</subject><body>

Unnamed sources report that on Aug 12, Roland Haeder claimed:

% Hi!
% 
%   I have written a small program which prints only white on black text. In
% my book I can't find how to chnage the text color (forther and background).
% May you tell which command I have to use and which header files to I have to
% load?

#include &lt;curses.h&gt;
or
#include &lt;ncurses.h&gt;

Add "-lcurses" to your compilation command.

%   And I haven't found any hint to move the cursor to another position on the
% screen. May you help me here, too?

Use ncurses. I thinkg curs_move, but it's been awhile.

Kurt
-- 
TV is chewing gum for the eyes.
		-- Frank Lloyd Wright

</body></email><email><emailId>20000822010456</emailId><senderName>"David S. Miller"</senderName><senderEmail>davem@redhat.com</senderEmail><timestampReceived>2000-08-22 01:04:56-0400</timestampReceived><subject>Vger lists have moved</subject><body>


The old lists run at vger.rutgers.edu have been moved to
vger.kernel.org due to an irrecoverable hard-disk failure of the old
machine, the lists were planned to be moved anyways.

If you are receiving this email, it means you were subscribed to
one of the vger Linux mailing lists as of the crash of the old
system last week.

You are not subscribed to the new lists at vger.kernel.org, you will
have to manually re-subscribe yourself.

The new site uses the same mailing list software, Majordomo.  So the
subscription mechanism is the same as on the old system.

Thanks for your patience and understanding.

Later,
David S. Miller
davem@redhat.com

</body></email><email><emailId>20000824025228</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-08-24 02:52:28-0400</timestampReceived><subject>binutils 2.10.0.24 is released</subject><body>

Some changes in assembler and linker may introduce some new bugs.
Please report them to me if it doesn't work as expected.

Thanks.


-- 
H.J. Lu (hjl@gnu.org)
---
This is the beta release of binutils 2.10.0.24 for Linux, which is
based on binutils 2000 0823 in CVS on sourecware.cygnus.com plus
various changes. It is purely for Linux, although it has been tested
on Solaris/Sparc and Solaris/x86 from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.10.0.24 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.10.0.18:

1. Update from binutils 2000 0823. Fix DT_RPATH/DT_RUNPATH handling.
Fix the ELF/ia32 DSO not compiled with PIC.
2. Try to fix the ELF visibility bug on PPC with glibc 2.2.

Changes from binutils 2.10.0.12:

1. Update from binutils 2000 0720.
2. Fix the DT_NEEDED link bug.
3. Add the new DT_XXXX dynamic tags. Glibc 2.2 will use them at least
on libpthread.so.

Changes from binutils 2.10.0.9:

1. Update from binutils 2000 0701. Fix the parallel build in ld when PE
is enabled.

Changes from binutils 2.9.5.0.46:

1. Update from binutils 2000 0617. The demangler support for the new
g++ ABI. Minor fix for the ELF visibility. Fix linking non-ELF
relocatable object files under ELF with symbol versioning.
2. Support for linking PE relocatable object files under ia32/ELF.

Changes from binutils 2.9.5.0.42:

1. Update from binutils 2000 0604. The ELF visibility attribuite should
work correctly now.
2. The ia32 assembler has changed the way it assembles the "jmp"
instructions to the global symbols. The old assembler will optimize the
jump to the global symbol defined in the same source file so that no
relocation will be used. The new assembler will use relocation for
global jumps. It will mainly affect PIC asm code. The segment like

	.globl  __setjmp
__setjmp:
	...
	jmp __sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:

is no longer PIC safe since "jmp __sigsetjmp" jumps to a global symbol
and relocation will be used. Instead, it can be changed to

	.globl  __setjmp
__setjmp:
	...
	jmp sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:
sigsetjmp:

so that "jmp sigsetjmp" jumps to a local symbol and the new assembler
will optimize out the relocation.

Changes from binutils 2.9.5.0.41:

1. Update from binutils 2000 0512.
2. Add testsuite for ELF visibility.

Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.10.0.24.tar.gz. Source code.
2. binutils-2.10.0.18-2.10.0.24.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.10.0.24-1.i386.rpm. IA-32 binary RPM for RedHat 6.2.
4. binutils-2.10.0.24-1.alpha.rpm. Alpha binary RPM for RedHat 6.2.

There is no separate source rpm. You can do

# rpm -ta binutils-2.10.0.24.tar.gz

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
08/23/2000
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
Please read the FAQ at http://www.tux.org/lkml/


</body></email><email><emailId>20000829223837</emailId><senderName>Subba Rao</senderName><senderEmail>subb3@attglobal.net</senderEmail><timestampReceived>2000-08-29 22:38:37-0400</timestampReceived><subject>List activities</subject><body>

Hi,

Is there an FAQ or an archive for this list?

Thank you.
-- 

Subba Rao
subb3@attglobal.net
http://pws.prserv.net/truemax/

 =&gt; Time is relative. Here is a new way to look at time. &lt;=
http://www.smcinnovations.com
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20000919013303</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-09-19 01:33:03-0400</timestampReceived><subject>glibc 2.1.94</subject><body>

Time for another test release.  Quite a number of bug fixes went in
since the last test release but no severe problem popped up.

 - several iconv modules and charmaps fixed; one of these changes
   is responsible for a major part of the patch file size

 - PPC and MIPS should be much happier after fixing some compatibility
   problems

 - program using AIO but not threads should work again

 - more ISO C cleanliness of the headers

 - some new functions to allow program *not* to look into the FILE
   structure while still getting information which they couldn't get
   with existing interfaces; these new interfaces come from Solaris

 - some false alarms in the test suite are fixed

 - a problem in malloc which prevented non-threaded applications in
   some situations from allocating all available memory is fixed

 - one compatibility problem with glibc 2.0 is fixed

 - much better LC_COLLATE representation (on disk and in localedef)

 - prepare all parts of the code for LFS (all functions internally use
   internally now LFS versions of the functions)

 - general non-x86 platform stabilization.  All of the constantly tested
   platforms should work just fine (leaving tools problems aside):

   + x86: no known problems
   + m68k: no known problems
   + Alpha: should work with a correct kernel (FPU stuff)
   + PPC: some people have patched versions of binutils and gcc and
          report success; but they are just lucky; tools patches are
          coming sometime soon
   + Arm: working except for one problem in the compiler (no ETA) and
          you need a recent kernel
   + SPARC: should work, don't have recent reports
   + MIPS: should work, don't have recent reports
   + SH: should work, don't have recent reports

   + IA-64: possibly working; but special gcc + binutils + kernel are
            required
   + S390: no idea

   I also haven't heard much about Hurd lately but assume they would have
   shouted if something broke.


At

       ftp://sources.redhat.com/pub/glibc/releases/

the files

       glibc-2.1.94.tar.bz2               (also .gz)
       glibc-2.1.93-2.1.94.diff.bz2       (also .gz)
       glibc-linuxthreads-2.1.94.tar.bz2  (also .gz)
       nss_db-2.1.92.tar.gz

are available for download.  The last file contains the now separately
distributed nss_db module.  You have to install this after glibc and
after a db library is made available.

For those who want checksums (MD5 in this case):

205168bde0bd4e9d809e7036ad404f90  glibc-2.1.94.tar.bz2
dde5c79bbba25cf1911585ee98c1c659  glibc-2.1.94.tar.gz
632621929f3f447f511910011e8a57b3  glibc-2.1.93-2.1.94.diff.bz2
3f4e79cf55e96477070bb09495b200dc  glibc-2.1.93-2.1.94.diff.gz
a966f2601e5b4448acf454bd4f0892f4  glibc-linuxthreads-2.1.94.tar.bz2
eab2c33e664b6c8631743d1bd7f6130b  glibc-linuxthreads-2.1.94.tar.gz


Please send feedback to libc-alpha@sources.redhat.com (and only
here!).  Also reports about successful compilation attempts are
necessary.

I am still extremely disappointed about the participation.  I got one
or two reports about a successful compilation and bug reports from
perhaps six people outside the developer group.  This is not enough
evidence that things are working properly.  I repeat this: you can
test glibc without installing it.  Just compile and run `make check'.
The only thins you need is diskspace (about 350MB on x86, more on RISC
platforms), working tools (make, gcc, binutils), and either time or a
fast machine.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20000805092454</emailId><senderName>"sllai"</senderName><senderEmail>laisl@hotmail.com</senderEmail><timestampReceived>2000-08-05 09:24:54-0400</timestampReceived><subject>Camera Application software run on Linux PC</subject><body>

I would like to know whether currently their is application software that
can make use of the PC camera (either uing USB or serial port) in Linux
system.
 It is like conduct a video conference using the PC camera and both PC is
running he Linux OS.

Any idea or info on this is highly appreciated
sllai

</body></email><email><emailId>20000919064452</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-09-19 06:44:52-0400</timestampReceived><subject>Re: glibc 2.1.94</subject><body>

OKUJI Yoshinori &lt;okuji@kuicr.kyoto-u.ac.jp&gt; writes:

&gt;     [6: huff+mtf rt+rld]
&gt;     [7: huff+mtf rt+rld]data integrity (CRC) error in data
&gt; 
&gt; You can use the `bzip2recover' program to attempt to recover
&gt; data from undamaged sections of corrupted files.
&gt; 
&gt; tab@~% md5sum glibc-2.1.94.tar.bz2 
&gt; 205168bde0bd4e9d809e7036ad404f90  glibc-2.1.94.tar.bz2

Yep, I can confirm this.  But I cannot change it since bzip2 (I'm
using 0.9.5b) is broken.  It always produces the same result.  I've
now compiled bzip2 1.0.1 and it seems to work now.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20000919134314</emailId><senderName>Ben Collins</senderName><senderEmail>bcollins@debian.org</senderEmail><timestampReceived>2000-09-19 13:43:14-0400</timestampReceived><subject>Re: glibc 2.1.94</subject><body>

&gt;    + SPARC: should work, don't have recent reports

I've been using 2.1.93 on a daily used ultrasparc (compiled as 32bit) for
a few weeks now, with zero problems (X, mozilla, apache, xmms, etc..).
Compiles without problems (that I know of) using 2.2.17 and
2.4.0-test(of-the-week) kernel headers. Recompiles other programs without
problems (haven't done extensive recompiles yet). I'm using gcc 2.95.2 +
some patches.

Ben

-- 
 -----------=======-=-======-=========-----------=====------------=-=------
/  Ben Collins  --  ...on that fantastic voyage...  --  Debian GNU/Linux   \
`  bcollins@debian.org  --  bcollins@openldap.org  --  bcollins@linux.com  '
 `---=========------=======-------------=-=-----=-===-======-------=--=---'
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20000920140913</emailId><senderName>"Mike Black"</senderName><senderEmail>mblack@csihq.com</senderEmail><timestampReceived>2000-09-20 14:09:13-0400</timestampReceived><subject>Re: glibc 2.1.94</subject><body>

I compiled glibc-2.1.94 OK with pgcc-2.95.2 19991024 (release)
I then upgraded to 2.96 20000918 (experimental) and did a clean re-extract
re-compile of glibc-2.1.94 and got this:

make[1]: Entering directory `/usr/src/lib/glibc-2.1.94/iconv'
gcc -nostdlib -nostartfiles -o
conv_prog  -Wl,-dynamic-linker=/usr/local/lib/ld-linux.so.2   ../csu/crt1.o
../csu/crti.o `gcc --pri
nt-file-name=crtbegin.o`
conv_prog.o  -Wl,-rpath-link=..:../math:../elf:../dlfcn:../nss:../nis:../rt:
../resolv:../crypt:../linuxthr
eads ../libc.so.6 ../libc_nonshared.a -lgcc `gcc --print-file-name=crtend.o`
../csu/crtn.o
../csu/crt1.o(.text+0xc): undefined reference to `_fini'
../csu/crt1.o(.text+0x11): undefined reference to `_init'
collect2: ld returned 1 exit status
make[1]: *** [iconv_prog] Error 1
make[1]: Leaving directory `/usr/src/lib/glibc-2.1.94/iconv'
make: *** [iconv/others] Error 2

This is on Linux 2.2.17 i386
________________________________________
Michael D. Black   Principal Engineer
mblack@csihq.com  321-676-2923,x203
http://www.csihq.com  Computer Science Innovations
http://www.csihq.com/~mike  My home page
FAX 321-676-2355
----- Original Message -----
From: "Ulrich Drepper" &lt;drepper@redhat.com&gt;
To: "GNU libc testers" &lt;libc-alpha@sourceware.cygnus.com&gt;; "VGER gcc list"
&lt;linux-gcc@vger.kernel.org&gt;
Sent: Monday, September 18, 2000 9:33 PM
Subject: glibc 2.1.94


Time for another test release.  Quite a number of bug fixes went in
since the last test release but no severe problem popped up.

 - several iconv modules and charmaps fixed; one of these changes
   is responsible for a major part of the patch file size

 - PPC and MIPS should be much happier after fixing some compatibility
   problems

 - program using AIO but not threads should work again

 - more ISO C cleanliness of the headers

 - some new functions to allow program *not* to look into the FILE
   structure while still getting information which they couldn't get
   with existing interfaces; these new interfaces come from Solaris

 - some false alarms in the test suite are fixed

 - a problem in malloc which prevented non-threaded applications in
   some situations from allocating all available memory is fixed

 - one compatibility problem with glibc 2.0 is fixed

 - much better LC_COLLATE representation (on disk and in localedef)

 - prepare all parts of the code for LFS (all functions internally use
   internally now LFS versions of the functions)

 - general non-x86 platform stabilization.  All of the constantly tested
   platforms should work just fine (leaving tools problems aside):

   + x86: no known problems
   + m68k: no known problems
   + Alpha: should work with a correct kernel (FPU stuff)
   + PPC: some people have patched versions of binutils and gcc and
          report success; but they are just lucky; tools patches are
          coming sometime soon
   + Arm: working except for one problem in the compiler (no ETA) and
          you need a recent kernel
   + SPARC: should work, don't have recent reports
   + MIPS: should work, don't have recent reports
   + SH: should work, don't have recent reports

   + IA-64: possibly working; but special gcc + binutils + kernel are
            required
   + S390: no idea

   I also haven't heard much about Hurd lately but assume they would have
   shouted if something broke.


At

       ftp://sources.redhat.com/pub/glibc/releases/

the files

       glibc-2.1.94.tar.bz2               (also .gz)
       glibc-2.1.93-2.1.94.diff.bz2       (also .gz)
       glibc-linuxthreads-2.1.94.tar.bz2  (also .gz)
       nss_db-2.1.92.tar.gz

are available for download.  The last file contains the now separately
distributed nss_db module.  You have to install this after glibc and
after a db library is made available.

For those who want checksums (MD5 in this case):

205168bde0bd4e9d809e7036ad404f90  glibc-2.1.94.tar.bz2
dde5c79bbba25cf1911585ee98c1c659  glibc-2.1.94.tar.gz
632621929f3f447f511910011e8a57b3  glibc-2.1.93-2.1.94.diff.bz2
3f4e79cf55e96477070bb09495b200dc  glibc-2.1.93-2.1.94.diff.gz
a966f2601e5b4448acf454bd4f0892f4  glibc-linuxthreads-2.1.94.tar.bz2
eab2c33e664b6c8631743d1bd7f6130b  glibc-linuxthreads-2.1.94.tar.gz


Please send feedback to libc-alpha@sources.redhat.com (and only
here!).  Also reports about successful compilation attempts are
necessary.

I am still extremely disappointed about the participation.  I got one
or two reports about a successful compilation and bug reports from
perhaps six people outside the developer group.  This is not enough
evidence that things are working properly.  I repeat this: you can
test glibc without installing it.  Just compile and run `make check'.
The only thins you need is diskspace (about 350MB on x86, more on RISC
platforms), working tools (make, gcc, binutils), and either time or a
fast machine.

--
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20000812203116</emailId><senderName>"Roland Haeder"</senderName><senderEmail>quixy_man@gmx.net</senderEmail><timestampReceived>2000-08-12 20:31:16-0400</timestampReceived><subject>Basic programming</subject><body>

Hi!

  I have written a small program which prints only white on black text. In
my book I can't find how to chnage the text color (forther and background).
May you tell which command I have to use and which header files to I have to
load?

  And I haven't found any hint to move the cursor to another position on the
screen. May you help me here, too?

Thanx in advance!

Regards,
  Roland Haeder

</body></email><email><emailId>20000822010001</emailId><senderName>"David S. Miller"</senderName><senderEmail>davem@redhat.com</senderEmail><timestampReceived>2000-08-22 01:00:01-0400</timestampReceived><subject>Vger lists have moved</subject><body>


The old lists run at vger.rutgers.edu have been moved to
vger.kernel.org due to an irrecoverable hard-disk failure of the old
machine, the lists were planned to be moved anyways.

If you are receiving this email, it means you were subscribed to
one of the vger Linux mailing lists as of the crash of the old
system last week.

You are not subscribed to the new lists at vger.kernel.org, you will
have to manually re-subscribe yourself.

The new site uses the same mailing list software, Majordomo.  So the
subscription mechanism is the same as on the old system.

Thanks for your patience and understanding.

Later,
David S. Miller
davem@redhat.com

</body></email><email><emailId>20000629143401</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-06-29 14:34:01-0400</timestampReceived><subject>Re: Position independent code</subject><body>



On Thu, 29 Jun 2000, Scott Long wrote:

&gt; As we all know, shared objects want to be compiled with -fPIC.
&gt;
&gt; But shouldn't this be the linking loader's job? Why is there no fixup
&gt; section for jumps?
&gt;
&gt; On the i386 platform relative jumps are limited to an 8 bit signed
&gt; offset. In order to jump further than this the jumps must be threaded
(I
&gt; may be wrong about this, in truth it has been a while since I did any
&gt; assembly on the Intels).

16 bits, I think.
&gt;
&gt; So there are two possible states the universe can be in at this point:
&gt;
&gt; 1) I'm right about the limitations of relative jumps on Intel, in which
&gt; case I wonder why this is something for the compiler to do as opposed
to
&gt; the linking loader.
&gt;
&gt; 2) I'm totally wrong about the limitations of relative jumps on Intel,
&gt; in which case this message qualifies as noise.
&gt;
&gt; If the latter case is true, please accept my apologies.
&gt;
&gt; Regards,
&gt; Scott
&gt;
The intel only jumps relatively.  It has no way to address data relative
to the IP.  I think that is what PIC is all about.  At least that is
what the code gcc generates when told to -fPIC looks like it is trying
to do.

Lawson
---cut here





________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000704015725</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-07-04 01:57:25-0400</timestampReceived><subject>Re: ANSI Colors in a C program under Linux...</subject><body>

Have a read of man console_codes.  It ain't ANSII, but ANSII don't care
what you put in a string variable or printf("..") as long as the %'s
align.  Also man ncurses.

On Tue, 4 Jul 2000, Hendrix wrote:

&gt; Hi folks,
&gt;
&gt; I recently noticed that the command line 'linuxconf' program has
&gt; text-based colors in its interface...  How would it be possible for me
&gt; to utilize these colors in my own C, or C++, program?  I remember doing
&gt; this with ANSI colors back when I used to run my own PCBoard from
&gt; DOS...  I was also experienced in using the QuickBASIC color statement
&gt; to print ANSI colors on SCREEN 0 (text mode)...  Whenever I ask
&gt; questions about color and graphics in "comp.lang.c" they send me
&gt; elsewhere and say that it is compiler specific...???  I do not agree
&gt; with this!!!  I think that a C program can be written with ANSI escape
&gt; characters in order to colorize a screen, and I believe that this would
&gt; be included in the ANSI Standard of the C language...  It isn't
graphics
&gt; functions, it just uses the ANSI escape sequences to print...
&gt;
&gt; I don't know, I may very well be wrong, but if I'm not, could someone
&gt; please help me figure this out...  If it is possible to present ANSI
&gt; colors in a C program (and still complie to the ANSI C Standard) then
&gt; could someone show me a "Hello World" kind of program that has a blue
&gt; background with yellow writing (much like the 'linuxconf' console
&gt; program)...  Thanks a bunch for reading my ramblings...*s*
&gt;
&gt; Later,
&gt; --
&gt; Trevor Penney,
&gt; A+, Network+ Certified
&gt; ----------------------
&gt; "That's alright, I still got my guitar"...
&gt; -James Marshall Hendrix (11/27/1942-09/18/1970)
&gt;
Lawson

&gt; We apologize if this message has reached you in error.
&gt; Save the Planet, Save the Trees! Advertise via E mail.




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000630141452</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-06-30 14:14:52-0400</timestampReceived><subject>Re: More Position Independent Code</subject><body>



On Fri, 30 Jun 2000, Scott Long wrote:

&gt; Thanks to all those who replied to my original question. I'll restate
&gt; what I've learned, let's see if I'm correct:
&gt;
&gt; The purpose of PIC is really to allow position-independent data access,
&gt; not for jump fixes. In order to prove this to myself I wrote the
&gt; following piece:
&gt;
&gt; --- BEGIN pic.c
&gt;
&gt; unsigned int array[256];
&gt;
&gt; int init_array()
&gt; {
&gt;     int i;
&gt;
&gt;     for(i = 0; i &lt; 256; i++)
&gt;         array[i] = 0xDEADBEEF;
&gt; }
&gt;
&gt; --- END pic.c
&gt;
&gt; scott@abacus:~$ gcc -O -fPIC -S -o pic.s pic.c
&gt;
&gt; The relevant portion of pic.s:
&gt;
&gt; ...
&gt;
&gt;         pushl %ebx
&gt;         call .L8
&gt; .L8:
&gt;         popl %ebx
&gt;         addl $_GLOBAL_OFFSET_TABLE_+[.-.L8],%ebx
&gt;
&gt; ...
&gt;
&gt; Indeed what I'm seeing are not jump fixes but data access fixes. I'm
not
&gt; 100% familiar with the GNU assembler so I'm not sure exactly what this
&gt; _GLOBAL_OFFSET_TABLE is referring to, but it is clear from this snippet
&gt; that Intel cannot address data relative to EIP and therefore must load
&gt; the PC into a general purpose register.
&gt;
&gt; This call-then-pop to get EIP makes me grimace. Intel is forcing us to
&gt; make TWO MEMORY ACCESSES just to get the value of the program counter.
&gt; Does anyone know if Intel had a justification for this? It seems like
&gt; all shared libraries and shared objects on Intel take a serious penalty
&gt; every time they access non-auto storage.

You pay the penalty not for each access, but for each entry to a
function that makes such access.  The function is responsible to not
disturb ebx as set by the caller, if you look past what you consider
relevant you will see it restores ebx on exit.  Not only does it take 2
memory accesses, it wastes a register to hold the address of the
GOT.  But it doesn't do the call/pop every time you reference a
variable.

gcc is fairly clever.  maybe even clever than I am.
&gt;
&gt; So now I have a question pertinent to this list's raison d'etre:
&gt;
&gt; Is GCC smart enough to figure this out in most cases, and cache the
&gt; value of these expensive variables during long stretches of
computation,
&gt; then save the result into the real location at the end of a function
&gt; call or basic block? Imagine the following, compiled with -fPIC:
&gt;
---pseudocode snipped

&gt; Regards and thanks,
&gt; Scott
&gt;
Lawson
---cut here




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000701222936</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-07-01 22:29:36-0400</timestampReceived><subject>Re: More Position Independent Code</subject><body>

&gt; The purpose of PIC is really to allow position-independent data access,
&gt; not for jump fixes. 

No, not only for data access. PIC also deals with function calls; just
compile

void foo();
void bar()
{foo();}

&gt; This call-then-pop to get EIP makes me grimace. Intel is forcing us to
&gt; make TWO MEMORY ACCESSES just to get the value of the program counter.
&gt; Does anyone know if Intel had a justification for this?

Sure. Compatibility to the 8086, which was in turn like the 8008/Z80
processors...

&gt; It seems like all shared libraries and shared objects on Intel take
&gt; a serious penalty every time they access non-auto storage.

The performance loss comes from not being able to use ebx, not because
of the overhead of loading the register. I guess a modern process does
not even touch main memory for that...

&gt; Is GCC smart enough to figure this out in most cases, and cache the
&gt; value of these expensive variables during long stretches of computation,
&gt; then save the result into the real location at the end of a function
&gt; call or basic block? 

GCC will only load the PIC register only once. It will not
specifically optimize access to global variables, instead, that will
be done as part of the normal data flow analysis.

&gt; The important point of this example is that the inline function is
&gt; complex enough to exhaust the general-purpose registers. This means that
&gt; expensive_var cannot be stored indefinitely in any one register. In this
&gt; case, I think it would be Good for GCC to create an invisible automatic
&gt; variable to store the value of expensive_var during the execution of
&gt; crunch_numbers().
&gt; 
&gt; Does GCC indeed do something like this?

I think it won't. Instead, it will try to clear as many registers as
possible inside the loop, and leave the variable's value in a register
- unless the address of the variable was taken, in which case every
store will go into the variable.

Regards,
Martin

</body></email><email><emailId>20000702073420</emailId><senderName>Florian Weimer</senderName><senderEmail>fw@deneb.enyo.de</senderEmail><timestampReceived>2000-07-02 07:34:20-0400</timestampReceived><subject>Re: More Position Independent Code</subject><body>

Scott Long &lt;scott@swiftview.com&gt; writes:

&gt; This call-then-pop to get EIP makes me grimace.

Note that call-then-pop is a major performance penalty on many modern
processors (because call is not paried by ret).  A local-call-move-ret
scheme is a bit more efficient.

&gt; It seems like all shared libraries and shared objects on Intel take
&gt; a serious penalty every time they access non-auto storage.

s/non-auto storage/global variables/

Global variables are a pain in the neck anyway, so this is just
another serious penalty.  I wouldn't care about that too much.

</body></email><email><emailId>20000704045628</emailId><senderName>Hendrix</senderName><senderEmail>tgjp@thezone.net</senderEmail><timestampReceived>2000-07-04 04:56:28-0400</timestampReceived><subject>ANSI Colors in a C program under Linux...</subject><body>

Hi folks,

I recently noticed that the command line 'linuxconf' program has
text-based colors in its interface...  How would it be possible for me
to utilize these colors in my own C, or C++, program?  I remember doing
this with ANSI colors back when I used to run my own PCBoard from
DOS...  I was also experienced in using the QuickBASIC color statement
to print ANSI colors on SCREEN 0 (text mode)...  Whenever I ask
questions about color and graphics in "comp.lang.c" they send me
elsewhere and say that it is compiler specific...???  I do not agree
with this!!!  I think that a C program can be written with ANSI escape
characters in order to colorize a screen, and I believe that this would
be included in the ANSI Standard of the C language...  It isn't graphics
functions, it just uses the ANSI escape sequences to print...  

I don't know, I may very well be wrong, but if I'm not, could someone
please help me figure this out...  If it is possible to present ANSI
colors in a C program (and still complie to the ANSI C Standard) then
could someone show me a "Hello World" kind of program that has a blue
background with yellow writing (much like the 'linuxconf' console
program)...  Thanks a bunch for reading my ramblings...*s*

Later,
-- 
Trevor Penney, 
A+, Network+ Certified
----------------------
"That's alright, I still got my guitar"... 
-James Marshall Hendrix (11/27/1942-09/18/1970)

</body></email><email><emailId>200007040456280</emailId><senderName>Hendrix</senderName><senderEmail>tgjp@thezone.net</senderEmail><timestampReceived>2000-07-04 04:56:28-0400</timestampReceived><subject>ANSI Colors in a C program under Linux...</subject><body>

Hi folks,

I recently noticed that the command line 'linuxconf' program has
text-based colors in its interface...  How would it be possible for me
to utilize these colors in my own C, or C++, program?  I remember doing
this with ANSI colors back when I used to run my own PCBoard from
DOS...  I was also experienced in using the QuickBASIC color statement
to print ANSI colors on SCREEN 0 (text mode)...  Whenever I ask
questions about color and graphics in "comp.lang.c" they send me
elsewhere and say that it is compiler specific...???  I do not agree
with this!!!  I think that a C program can be written with ANSI escape
characters in order to colorize a screen, and I believe that this would
be included in the ANSI Standard of the C language...  It isn't graphics
functions, it just uses the ANSI escape sequences to print...  

I don't know, I may very well be wrong, but if I'm not, could someone
please help me figure this out...  If it is possible to present ANSI
colors in a C program (and still complie to the ANSI C Standard) then
could someone show me a "Hello World" kind of program that has a blue
background with yellow writing (much like the 'linuxconf' console
program)...  Thanks a bunch for reading my ramblings...*s*

Later,
-- 
Trevor Penney, 
A+, Network+ Certified
----------------------
"That's alright, I still got my guitar"... 
-James Marshall Hendrix (11/27/1942-09/18/1970)

</body></email><email><emailId>20000704055216</emailId><senderName>Mark Gray</senderName><senderEmail>markgray@iago.nac.net</senderEmail><timestampReceived>2000-07-04 05:52:16-0400</timestampReceived><subject>Re: ANSI Colors in a C program under Linux...</subject><body>

Hendrix &lt;tgjp@thezone.net&gt; writes:

&gt; Hi folks,
&gt; 
&gt; I recently noticed that the command line 'linuxconf' program has
&gt; text-based colors in its interface...  How would it be possible for me
&gt; to utilize these colors in my own C, or C++, program?

linuxconf uses ncurses for this, you could also use the slang library.
(See man ncurses and the code)

[snip]

</body></email><email><emailId>20000629162140</emailId><senderName>Scott Long</senderName><senderEmail>scott@swiftview.com</senderEmail><timestampReceived>2000-06-29 16:21:40-0400</timestampReceived><subject>Position independent code</subject><body>

As we all know, shared objects want to be compiled with -fPIC.

But shouldn't this be the linking loader's job? Why is there no fixup
section for jumps?

On the i386 platform relative jumps are limited to an 8 bit signed
offset. In order to jump further than this the jumps must be threaded (I
may be wrong about this, in truth it has been a while since I did any
assembly on the Intels).

So there are two possible states the universe can be in at this point:

1) I'm right about the limitations of relative jumps on Intel, in which
case I wonder why this is something for the compiler to do as opposed to
the linking loader.

2) I'm totally wrong about the limitations of relative jumps on Intel,
in which case this message qualifies as noise.

If the latter case is true, please accept my apologies.

Regards,
Scott

</body></email><email><emailId>20000724135117</emailId><senderName>"Venkata Rajesh Velamakanni"</senderName><senderEmail>rajesh.venkata@wipro.com</senderEmail><timestampReceived>2000-07-24 13:51:17-0400</timestampReceived><subject>Query on linking libraries</subject><body>

Hello All,

This is regarding a query on linking libraries. 
I would like to know whether anyone has faced 
this problem.

I have a application, in which I open a file(test1),
and then I am calling a function defined in My library.
Inside this function I am trying open someother file
(test2) and then closing the file. While closing this
file(test2).. it errors out saying "Segmentation fault".

But this problem was not simulatable if close 
fist file ( test1) before calling the function 
in the library.

My test programs are here:
--------------------------

Application.c

void
main()
{
        FILE *appfd;
        appfd = fopen("test1","w");
        library();
        printf("Hello World\n");
}


Library.c

#include &lt;stdio.h&gt;
void 
library() {

    FILE *f;
    f=fopen("test2","r");
   fclose(f);
}


I am doing following steps to build the library:

1. cc -c -o library.o library.c
2. ld -dn -G -Bstatic -o -libmylib.a library.o
3. cc -lmylib -o application application.c
4. ./application

Can any one tell me the root cause of this problem.
Or am I missing something.


Thanks in Advance,
Rajesh.


[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD W3 HTML//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;

&lt;META content=text/html;charset=iso-8859-1 http-equiv=Content-Type&gt;
&lt;META content='"MSHTML 4.72.3110.7"' name=GENERATOR&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;Hello All,&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;This is regarding a query on 
linking libraries. &lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;I would like 
&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT face="Courier New"&gt;to know whether anyone has 
faced &lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;this 
problem.&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;I have a application, in 
which I open a file(test1),&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;and then I am calling a 
function defined in My library.&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;Inside this function I am 
trying open someother file&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;(test2) and then closing the 
file. While closing this&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;file(test2).. it errors out 
saying "Segmentation fault".&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;But this 
problem was not simulatable if close &lt;/STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;fist file 
( test1) before calling the function &lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000&gt;&lt;FONT face="Courier New"&gt;&lt;FONT 
size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT face="Courier New"&gt;in the 
library.&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New" size=3&gt;&lt;STRONG&gt;&lt;/STRONG&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;My test programs are 
here:&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT 
size=3&gt;&lt;STRONG&gt;--------------------------&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT 
size=3&gt;&lt;STRONG&gt;Application.c&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000&gt;&lt;FONT face="Courier New"&gt;&lt;FONT 
size=3&gt;&lt;STRONG&gt;void&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT 
size=3&gt;&lt;STRONG&gt;main()&lt;BR&gt;{&lt;BR&gt;        FILE 
*appfd;&lt;BR&gt;        appfd = 
fopen("test1","w");&lt;BR&gt;        
library();&lt;BR&gt;        printf("Hello 
World\n");&lt;BR&gt;}&lt;BR&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;Library.c&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;#include 
&lt;stdio.h&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;void &lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;library() 
{&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000&gt;&lt;FONT face="Courier New"&gt;&lt;FONT 
size=3&gt;&lt;STRONG&gt;    &lt;FONT color=#000000&gt;FILE 
*f;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000&gt;&lt;FONT color=#000000&gt;&lt;FONT face="Courier New"&gt;&lt;FONT 
size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;    
f=fopen("test2","r");&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000&gt;&lt;FONT face="Courier New"&gt;&lt;FONT 
size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;   fclose(f);&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;FONT 
color=#000000&gt;}&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;I am 
doing following steps to build the library:&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000&gt;&lt;FONT face="Courier New"&gt;&lt;FONT 
size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;1. cc -c -o library.o 
library.c&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;2. ld -dn -G -Bstatic -o 
-libmylib.a library.o&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;3. cc -lmylib -o application 
application.c&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;4. 
./application&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;Can any 
one tell me the root cause of this problem.&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;Or am I 
missing something.&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000&gt;&lt;FONT face="Courier New"&gt;&lt;FONT 
size=3&gt;&lt;STRONG&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New" size=3&gt;&lt;STRONG&gt;&lt;/STRONG&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;Thanks in 
Advance,&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT size=3&gt;&lt;FONT 
face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face="Courier New"&gt;&lt;FONT size=3&gt;&lt;STRONG&gt;Rajesh.&lt;/FONT&gt;&lt;/FONT&gt;&lt;FONT 
size=3&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;STRONG&gt;&lt;FONT face="Courier New"&gt;&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;


</body></email><email><emailId>20000726044018</emailId><senderName>"Venkata Rajesh Velamakanni"</senderName><senderEmail>rajesh.venkata@wipro.com</senderEmail><timestampReceived>2000-07-26 04:40:18-0400</timestampReceived><subject>Query on malloc</subject><body>

Hello All,

This is regarding a query on malloc.
Can any one tell me from where I can get the source code
of malloc.c
I observed that malloc / calloc is giving Sigmentation fault.
I would like to know the situations in which this can happen.
Can any one help me by going through the following traces
from gdb.


Following are the back traces from gdb:
--------------------------------------------

Breakpoint 2, H245_InternalClose (H245SessionPtr=0x8053fc0)
    at h245Common.c:3342
3342      ptr = malloc(len);
(gdb) n

Program received signal SIGSEGV, Segmentation fault.
0x4015c4e1 in chunk_alloc (ar_ptr=0x401f1040, nb=16) at malloc.c:2699
2699    malloc.c: No such file or directory.
(gdb) bt
#0  0x4015c4e1 in chunk_alloc (ar_ptr=0x401f1040, nb=16) at malloc.c:2699
#1  0x4015c40a in __libc_malloc (bytes=12) at malloc.c:2643
#2  0x40088002 in H245_InternalClose (H245SessionPtr=0x8053fc0)
    at h245Common.c:3342
#3  0x400a1ce5 in H245_ReceiveThread (h245session=0x8053fc0)
    at h245Receive.c:1671
#4  0x400f7eca in pthread_start_thread (arg=0xbe7ffe60) at manager.c:213
(gdb) 

Thanks,
Rajesh.


[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD W3 HTML//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;

&lt;META content=text/html;charset=iso-8859-1 http-equiv=Content-Type&gt;
&lt;META content='"MSHTML 4.72.3110.7"' name=GENERATOR&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Hello All,&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;This is regarding a query on 
malloc.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Can any one tell me from where I can get the 
source code&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;of malloc.c&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;I observed that malloc / calloc is giving 
Sigmentation fault.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;I would like to know the situations in which 
this can happen.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt;&lt;FONT size=2&gt;Can any one help me by going 
through the following traces&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;from gdb.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;Following are the back traces from gdb:&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;--------------------------------------------&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Breakpoint 2, H245_InternalClose 
(H245SessionPtr=0x8053fc0)&lt;BR&gt;    at 
h245Common.c:3342&lt;BR&gt;3342      ptr = 
malloc(len);&lt;BR&gt;(gdb) n&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Program received signal SIGSEGV, Segmentation 
fault.&lt;BR&gt;0x4015c4e1 in chunk_alloc (ar_ptr=0x401f1040, nb=16) at 
malloc.c:2699&lt;BR&gt;2699    malloc.c: No such file or 
directory.&lt;BR&gt;(gdb) bt&lt;BR&gt;#0  0x4015c4e1 in chunk_alloc (ar_ptr=0x401f1040, 
nb=16) at malloc.c:2699&lt;BR&gt;#1  0x4015c40a in __libc_malloc (bytes=12) at 
malloc.c:2643&lt;BR&gt;#2  0x40088002 in H245_InternalClose 
(H245SessionPtr=0x8053fc0)&lt;BR&gt;    at 
h245Common.c:3342&lt;BR&gt;#3  0x400a1ce5 in H245_ReceiveThread 
(h245session=0x8053fc0)&lt;BR&gt;    at h245Receive.c:1671&lt;BR&gt;#4  
0x400f7eca in pthread_start_thread (arg=0xbe7ffe60) at manager.c:213&lt;BR&gt;(gdb) 
&lt;BR&gt;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;Thanks,&lt;/DIV&gt;
&lt;DIV&gt;Rajesh.&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;


</body></email><email><emailId>20000726094858</emailId><senderName>Ben Miller</senderName><senderEmail>ben.miller@mercia.com</senderEmail><timestampReceived>2000-07-26 09:48:58-0400</timestampReceived><subject>linux/gcc newbie...</subject><body>

Hi all,

I'm new on this list and up until now I have been programming C++
exclusively on Windows platforms.  Now, I find I want to learn how to
the same on Linux.  My head is currently swimming with loads of
strange notions - I know next to nothing about UNIX but I'm slowly
picking it up.  Can anyone recommend some good (on-line) texts that
cover migrating your programming skills from Windows to Linux?  I'm
sure loads of people have been doing this!

I have the 2.8.1 distributuion of GCC (it was installed with Linux)
and I can't figure out how to tell the compiler what default
include/lib directories to use.  I know how to provide, say, an
include directory using the -I flag, but I want to set some defaults.
For example, after copying the standard C++ library headers (such as
&lt;string&gt;) onto the machine, gcc cannot find them unless I specifically
use the -I flag.  How does it know where to find the standard C header
files?

Is it okay to ask question this basic on this list?

Best regards,
Ben Miller
Mercia Software Ltd.
Mercia House 
Ashted Lock
Aston Science Park
Birmingham B7 4AZ, UK 
Registered Number: 1868855 (Cardiff) 
Tel: 44 (0)121 359 5096 
Fax: 44 (0)121 359 0375 
Web Site: http://www.mercia.com 

</body></email><email><emailId>20000728054622</emailId><senderName>"Venkata Rajesh Velamakanni"</senderName><senderEmail>rajesh.venkata@wipro.com</senderEmail><timestampReceived>2000-07-28 05:46:22-0400</timestampReceived><subject>Query on Pthread_cond_timedwait</subject><body>

Hello all,

This is regarding a query on pthead_cond_timedwait..
I have received SIGSEGV from pthread_cond_timedwait.
It seems that libc has sent this signal. I would like to know
has any one faced this problem?or am I missing something.
Can any one tell me the situations where this can happen.

Following are the back traces from gdb
------------------------------------------------

Reading symbols from /lib/libpthread.so.0...done.
Reading symbols from /lib/libc.so.6...done.
Reading symbols from /lib/ld-linux.so.2...done.
Reading symbols from /lib/libnss_files.so.2...done.
#0  0x401977f1 in __libc_nanosleep () from /lib/libc.so.6
(gdb) bt
#0  0x401977f1 in __libc_nanosleep () from /lib/libc.so.6
#1  0x400fa429 in pthread_cond_timedwait (cond=0x8051d20, mutex=0x8051d08, 
    abstime=0xbefffbb0) at condvar.c:94
#2  0x400d3772 in OS_GetTimerSignal (signalParam=0xbefffd00)
    at osSpecific.c:1290
#3  0x400b6e19 in timerThread (info=0x400ee018) at timerThread.c:93
#4  0x400faeca in pthread_start_thread (arg=0xbefffe60) at manager.c:213
(gdb) 

Thanks,
Rajesh.

[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD W3 HTML//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;

&lt;META content=text/html;charset=iso-8859-1 http-equiv=Content-Type&gt;
&lt;META content='"MSHTML 4.72.3110.7"' name=GENERATOR&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Hello all,&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;This is regarding a query on 
pthead_cond_timedwait..&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;I have received SIGSEGV from 
pthread_cond_timedwait.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt;&lt;FONT size=2&gt;It seems that libc has sent 
this signal. I would like to know&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;has any one faced this problem?or am I missing 
something.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Can any one tell me the situations where this 
can happen.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Following are the back traces from 
gdb&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 
size=2&gt;------------------------------------------------&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Reading symbols from 
/lib/libpthread.so.0...done.&lt;BR&gt;Reading symbols from 
/lib/libc.so.6...done.&lt;BR&gt;Reading symbols from 
/lib/ld-linux.so.2...done.&lt;BR&gt;Reading symbols from 
/lib/libnss_files.so.2...done.&lt;BR&gt;#0  0x401977f1 in __libc_nanosleep () 
from /lib/libc.so.6&lt;BR&gt;(gdb) bt&lt;BR&gt;#0  0x401977f1 in __libc_nanosleep () 
from /lib/libc.so.6&lt;BR&gt;#1  0x400fa429 in pthread_cond_timedwait 
(cond=0x8051d20, mutex=0x8051d08, &lt;BR&gt;    abstime=0xbefffbb0) at 
condvar.c:94&lt;BR&gt;#2  0x400d3772 in OS_GetTimerSignal 
(signalParam=0xbefffd00)&lt;BR&gt;    at osSpecific.c:1290&lt;BR&gt;#3  
0x400b6e19 in timerThread (info=0x400ee018) at timerThread.c:93&lt;BR&gt;#4  
0x400faeca in pthread_start_thread (arg=0xbefffe60) at manager.c:213&lt;BR&gt;(gdb) 
&lt;BR&gt;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Thanks,&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Rajesh.&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;


</body></email><email><emailId>20000729141006</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-07-29 14:10:06-0400</timestampReceived><subject>Re: pthreads and signals question</subject><body>

There is a discussion of this in

info libc -&gt;POSIX Threads-&gt;
* Threads and Signal Handling:: Why you should avoid mixing the two, and
                                  how to do it if you must.

You should read it before you drive yourself nuts.

libc.info* are part of libc AFAIK, you should have them in /usr/info or
/usr/local/info

if "info libc" doesn't work, try "info -f libc"

I much prefer pinfo to read info pages:

http://aptiva.caltech.edu/links/rpm/redhat-6.0/RPMS/i386/pinfo-0.5.9-1.i386.rpm

On Sat, 29 Jul 2000, Randy Locklair wrote:

&gt; All:
&gt;
&gt; I have a question about the glibc implementation of pthreads.  Maybe
&gt; there's
&gt; a better place for me to post this, off so please inform me off list :)
&gt; Now
&gt; I'm not saying that the implementation is wrong or anything, I am just
&gt; asking questions.
&gt;
&gt; I have a process which has a signal handler for signals such as SIGTERM
and
&gt; SIGINT.  When there are no pthreads created, the signal handler works
fine.
&gt; If i send either signal, it catches them, and shuts itself down.
&gt;
&gt; If i start a pthread, and send a SIGINT, any thing that would return on
a
&gt; signal (select, etc) falls through, but the signal handler is never
run.
&gt; If
&gt; i send a SIGTERM, the handler is called twice (it seems) and seg faults
&gt; when
&gt; the second one tries to exit (presumably the first one is already
trying to
&gt; call exit and they do it at the same time...that's my guess anyway).
&gt;
&gt; Anyway, does anyone have any ideas?  I've never seen this on any other
OS.
&gt; Maybe its because linux's impelmentation is more posix compliant than
&gt; others
&gt; hehe.. Maybe I have to set some signal masks on the thread?  Let me
know if
&gt; you have any ideas, i'll keep tinkering..
&gt;
&gt; Randy
&gt;
Lawson

| We apologize if this message has reached you in error.
| Save the Planet, Save the Trees! Advertise via E mail.




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000729200112</emailId><senderName>Christophe Leroy</senderName><senderEmail>christophe.leroy@c-s.fr</senderEmail><timestampReceived>2000-07-29 20:01:12-0400</timestampReceived><subject>Pb with signal and read</subject><body>

Hello,

I'm using gcc on Linux RedHat 6.2
It's said in man that signal() behaviour is SYSV one. But, when I
compile my programs, signal() has got the BSD behaviour. Why ?
How can I make it have SYSV behaviour ?

read() doesn't return on signal. Why ? I want it to return with
errno=EINTR. How can I do that ?

Thanks

Christophe

</body></email><email><emailId>20000729161341</emailId><senderName>"Randy Locklair"</senderName><senderEmail>rlocklair@earthlink.net</senderEmail><timestampReceived>2000-07-29 16:13:41-0400</timestampReceived><subject>pthreads and signals question</subject><body>

All:

I have a question about the glibc implementation of pthreads.  Maybe there's
a better place for me to post this, off so please inform me off list :)  Now
I'm not saying that the implementation is wrong or anything, I am just
asking questions.

I have a process which has a signal handler for signals such as SIGTERM and
SIGINT.  When there are no pthreads created, the signal handler works fine.
If i send either signal, it catches them, and shuts itself down.

If i start a pthread, and send a SIGINT, any thing that would return on a
signal (select, etc) falls through, but the signal handler is never run.  If
i send a SIGTERM, the handler is called twice (it seems) and seg faults when
the second one tries to exit (presumably the first one is already trying to
call exit and they do it at the same time...that's my guess anyway).

Anyway, does anyone have any ideas?  I've never seen this on any other OS.
Maybe its because linux's impelmentation is more posix compliant than others
hehe.. Maybe I have to set some signal masks on the thread?  Let me know if
you have any ideas, i'll keep tinkering..

Randy

</body></email><email><emailId>20000724142318</emailId><senderName>Thomas_Bätzler</senderName><senderEmail>thomas.baetzler@harbinger.com</senderEmail><timestampReceived>2000-07-24 14:23:18-0400</timestampReceived><subject>RE: Query on linking libraries</subject><body>

Hi,

&gt; Venkata Rajesh Velamakanni [SMTP:rajesh.venkata@wipro.com] asked:
&gt;  
&gt; This is regarding a query on linking libraries. 
&gt; I would like to know whether anyone has faced 
&gt; this problem.
&gt;  
&gt; I have a application, in which I open a file(test1),
&gt; and then I am calling a function defined in My library.
&gt; Inside this function I am trying open someother file
&gt; (test2) and then closing the file. While closing this
&gt; file(test2).. it errors out saying "Segmentation fault".
&gt; 
[...]
&gt;  
&gt; 
Does test2 exist? You open it in read mode and close it
without testing that the open was successful. Try this:

&gt;  
&gt; Library.c
&gt;  
&gt; #include &lt;stdio.h&gt;
&gt; 
&gt; void 
&gt; library() {
&gt; 
	if( f=fopen("test2","r") ){
		fclose(f);
	} else {
		printf("Open in library() failed!\n");
	}
&gt; }
&gt; 
HTH,
-- 
Thomas Bätzler, System Administrator, Network Operations EMEA
Harbinger, e-Business Connectivity Group, a part of Peregrine
Steinhäuserstraße 22                 phone: +49-721-98143-110
D-76135 Karlsruhe / Germany            fax: +49-721-98143-196

</body></email><email><emailId>20000725122926</emailId><senderName>Ralf Baechle</senderName><senderEmail>ralf@uni-koblenz.de</senderEmail><timestampReceived>2000-07-25 12:29:26-0400</timestampReceived><subject>Re: Query on linking libraries</subject><body>

On Mon, Jul 24, 2000 at 07:09:17PM +0530, Venkata Rajesh Velamakanni wrote:

&gt; #include &lt;stdio.h&gt;
&gt; void 
&gt; library() {
&gt; 
&gt;     FILE *f;
&gt;     f=fopen("test2","r");
&gt;    fclose(f);

Bug: You don't verify if the fopen was successful.

&gt; I am doing following steps to build the library:
&gt; 
&gt; 1. cc -c -o library.o library.c
&gt; 2. ld -dn -G -Bstatic -o -libmylib.a library.o
&gt; 3. cc -lmylib -o application application.c
&gt; 4. ./application

Don't call ld directly if you don't know exactly what you're doing.  You
just missed linking a ton of other files.  Do something like
``cc -shared -o library.so library.c''.

  Ralf

</body></email><email><emailId>20000629205042</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-06-29 20:50:42-0400</timestampReceived><subject>Re: Position independent code</subject><body>

&gt; As we all know, shared objects want to be compiled with -fPIC.

No, shared objects are lifeless - users want to compile shared objects
with -fPIC :-)

&gt; But shouldn't this be the linking loader's job? Why is there no fixup
&gt; section for jumps?

Sure there is. At least on Linux, compiling shared libraries with
-fPIC is not an absolute requirement. If you don't, it will still work
- only it will require relocations on run-time. These result, due to
copy-on-write, that the shared pages are not shared anymore. Since
there is likely at least one relocation per page, you essentially have
to copy the entire library to swap on start-up.

&gt; On the i386 platform relative jumps are limited to an 8 bit signed
&gt; offset. In order to jump further than this the jumps must be threaded (I
&gt; may be wrong about this, in truth it has been a while since I did any
&gt; assembly on the Intels).

No. On the i386 platform, *all* jumps are PC-relative (except for the
indirect ones), so you can jump relatively to about any location you
want.

&gt; 1) I'm right about the limitations of relative jumps on Intel

No, see above.

&gt; 2) I'm totally wrong about the limitations of relative jumps on Intel,
&gt; in which case this message qualifies as noise.

The problem is that the static linker can't know the final location of
a function in a shared library, so you still pay the overhead of going
through the PLT. In addition, there are no PC-relative read and write
operations - which is the real overhead of -fPIC on ia32

Regards,
Martin

</body></email><email><emailId>20000729194930</emailId><senderName>"Randy Locklair"</senderName><senderEmail>rlocklair@earthlink.net</senderEmail><timestampReceived>2000-07-29 19:49:30-0400</timestampReceived><subject>addendum to last email re: pthreads and signals</subject><body>

Ok.. more on that pthreads and signals issue..

My process starts up one extra thread.  Once its done that it has three
pid's.  If i kill -9 the last one in the tree, the process dies.  If I
kill -9 the first one, the process dies.  If i kill -9 the middle one, it
goes defunct, but both threads seem to continue.  Wierd.

Also, I can't ctrl-c or ctrl-\ the process.  I am assuming that ignoring all
signals might solve that problem.  I will keep tinkering, I just am posting
in case anyone has any hints ;)

Randy

</body></email><email><emailId>20000701222020</emailId><senderName>"H. Peter Anvin"</senderName><senderEmail>hpa@zytor.com</senderEmail><timestampReceived>2000-07-01 22:20:20-0400</timestampReceived><subject>Re: Position independent code</subject><body>

Followup to:  &lt;Pine.LNX.4.10.10006300845540.13864-100000@mhw.ULib.IUPUI.Edu&gt;
By author:    "Mark H. Wood" &lt;mwood@IUPUI.Edu&gt;
In newsgroup: linux.dev.gcc
&gt;
&gt; On Thu, 29 Jun 2000, Martin v. Loewis wrote:
&gt; [snip]
&gt; &gt; &gt; On the i386 platform relative jumps are limited to an 8 bit signed
&gt; &gt; &gt; offset. In order to jump further than this the jumps must be threaded (I
&gt; &gt; &gt; may be wrong about this, in truth it has been a while since I did any
&gt; &gt; &gt; assembly on the Intels).
&gt; &gt; 
&gt; &gt; No. On the i386 platform, *all* jumps are PC-relative (except for the
&gt; &gt; indirect ones), so you can jump relatively to about any location you
&gt; &gt; want.
&gt; 
&gt; My Intel Software Developer's Manual:  Instruction Set Reference seems to
&gt; be saying that things are more complex than that.  Conditional jumps can
&gt; be relative to CS (near jump) or relative to CS:EIP (short jump).
&gt; Unconditional jumps can be relative to CS, relative to CS:EIP, or relative
&gt; to a new value that the jump will load into CS (far jump).  Only short
&gt; jumps take any notice of the current EIP value.  So all jumps are
&gt; *segment*-relative, but not all are PC-relative.
&gt; 

Uh, no.

Only far jumps are absolute.  Near jumps, may they be 8- (short), 16-
or 32-bit, are always PC-relative.  Far jumps (those that include a
CS) are always absolute.

	-hpa
-- 
&lt;hpa@transmeta.com&gt; at work, &lt;hpa@zytor.com&gt; in private!
"Unix gives you enough rope to shoot yourself in the foot."
http://www.zytor.com/~hpa/puzzle.txt

</body></email><email><emailId>20000701223025</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-07-01 22:30:25-0400</timestampReceived><subject>Re: Position independent code</subject><body>

&gt; &gt; No. On the i386 platform, *all* jumps are PC-relative (except for the
&gt; &gt; indirect ones), so you can jump relatively to about any location you
&gt; &gt; want.
&gt; 
&gt; My Intel Software Developer's Manual:  Instruction Set Reference seems to
&gt; be saying that things are more complex than that.

Sorry for the confusion. For PIC code, it is not that much the jmp
instructions that matter (unless there are very large functions); it
is the call instructions, invoking procedures in a different
translation units. These were the ones I was talking about; I believe
there are only relative calls (except for the ones having a target
segment as well - gcc never emits those).

Regards,
Martin

</body></email><email><emailId>20000701213130</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2000-07-01 21:31:30-0400</timestampReceived><subject>Re: glibc 2.1.91 (first test release for 2.2)</subject><body>

On Sat, Jul 01, 2000 at 01:02:13AM -0700, Ulrich Drepper wrote:
&gt; I've just uploaded to
&gt; 
&gt; 	ftp://sourceware.cygnus.com/pub/glibc/releases
&gt; 
&gt; the files
&gt; 
&gt; 	glibc-2.1.91.tar.bz2	(also glibc-2.1.91.tar.gz)
&gt; and
&gt; 	glibc-linuxthreads-2.1.91.tar.gz
&gt; 
&gt; which contain the first test release for glibc 2.2.  A *lot* has
&gt; changed and therefore no diff again 2.1.3 is available.  If the
&gt; sourceware machine is not accessible due to overload please visit one
&gt; of the mirrors.  There is *no* crypt add-on anymore.  Due to the
&gt; change in the export restrictions we can now provide the crappy code in
&gt; the glibc sources.  Do not use an old add-on.
&gt; 

With the fresh build from CVS today, the parallel "make check" failed

/bin/sh -e sort-test.sh /home/work/build/gnu/bin/glibc/ de_DE.ISO-8859-1
en_US.ISO-8859-1
/bin/sh -e tst-locale.sh /home/work/build/gnu/bin/glibc/
/bin/sh -e tst-trans.sh /home/work/build/gnu/bin/glibc/
/bin/sh -e tst-mbswcs.sh /home/work/build/gnu/bin/glibc/
/bin/sh -e tst-fmon.sh /home/work/build/gnu/bin/glibc/ tst-fmon.data
/bin/sh -e tst-ctype.sh /home/work/build/gnu/bin/glibc/
tst-fmon.sh: line 42: 29761 Segmentation fault      I18NPATH=.
GCONV_PATH=${common_objpfx}/iconvdata ${common_objpfx}elf/ld.so --library-path
$common_objpfx ${common_objpfx}locale/localedef --quiet -i $cn -f $fn
${common_objpfx}localedata/$cns
make[2]: *** [do-tst-fmon] Error 139
make[2]: *** Waiting for unfinished jobs....
tst-locale.sh: line 8: 29786 Segmentation fault      I18NPATH=.
GCONV_PATH=${common_objpfx}/iconvdata ${common_objpfx}elf/ld.so --library-path
$common_objpfx ${common_objpfx}locale/localedef --quiet -c -f $charmap -i
$input ${rep} ${common_objpfx}localedata/$out
make[2]: *** [do-tst-locale] Error 139
make[2]: Leaving directory `/work/gnu/src/glibc/localedata'
make[1]: *** [localedata/tests] Error 2
make[1]: Leaving directory `/work/gnu/src/glibc'



H.J.

</body></email><email><emailId>20000705140815</emailId><senderName>"Mark H. Wood"</senderName><senderEmail>mwood@iupui.edu</senderEmail><timestampReceived>2000-07-05 14:08:15-0400</timestampReceived><subject>Re: Position independent code</subject><body>

On 1 Jul 2000, H. Peter Anvin wrote:
&gt; Followup to:  &lt;Pine.LNX.4.10.10006300845540.13864-100000@mhw.ULib.IUPUI.Edu&gt;
&gt; By author:    "Mark H. Wood" &lt;mwood@IUPUI.Edu&gt;
&gt; In newsgroup: linux.dev.gcc
&gt; &gt;
&gt; &gt; On Thu, 29 Jun 2000, Martin v. Loewis wrote:
&gt; &gt; [snip]
&gt; &gt; &gt; &gt; On the i386 platform relative jumps are limited to an 8 bit signed
&gt; &gt; &gt; &gt; offset. In order to jump further than this the jumps must be threaded (I
&gt; &gt; &gt; &gt; may be wrong about this, in truth it has been a while since I did any
&gt; &gt; &gt; &gt; assembly on the Intels).
&gt; &gt; &gt; 
&gt; &gt; &gt; No. On the i386 platform, *all* jumps are PC-relative (except for the
&gt; &gt; &gt; indirect ones), so you can jump relatively to about any location you
[I read right over the exception.  Oops.]
&gt; &gt; &gt; want.
&gt; &gt; 
&gt; &gt; My Intel Software Developer's Manual:  Instruction Set Reference seems to
&gt; &gt; be saying that things are more complex than that.  Conditional jumps can
&gt; &gt; be relative to CS (near jump) or relative to CS:EIP (short jump).
&gt; &gt; Unconditional jumps can be relative to CS, relative to CS:EIP, or relative
&gt; &gt; to a new value that the jump will load into CS (far jump).  Only short
&gt; &gt; jumps take any notice of the current EIP value.  So all jumps are
&gt; &gt; *segment*-relative, but not all are PC-relative.
&gt; &gt; 
&gt; 
&gt; Uh, no.
&gt; 
&gt; Only far jumps are absolute.  Near jumps, may they be 8- (short), 16-
&gt; or 32-bit, are always PC-relative.  Far jumps (those that include a
&gt; CS) are always absolute.

I reread the material and found that I was being confused by the way the
various modes are being presented.  There are indeed PC-relative near
jumps.  But either I'm still confused, or there is still more complexity:
opcode E9 is a PC-relative near jump, but FF/4 (also near) seems to be
what Intel calls "absolute".  The text (page 3-245 of the 1997 edition),
under the heading "Near and Short Jumps", discusses "absolute offsets",
and the opcode table on that page calls FF/4 "Jump near, absolute
indirect,..."

Regardless of my earlier error, the situation is more complex than what
was presented by either of the postings I quoted.  It is not true that
relative jumps are constrained by an 8-bit displacement; 16- and 32-bit
forms are provided by opcode E9. It is not true that all nonindirect jumps
are PC-relative; opcode EA is "absolute" but not indirect.

I'll try to shut up now. :-/

-- 
Mark H. Wood, Lead System Programmer   mwood@IUPUI.Edu
I'd like to find the person who coined "short jump" but forgot "medium
jump" and "long jump".

</body></email><email><emailId>20000705170831</emailId><senderName>Bolan Meek</senderName><senderEmail>bolan.meek@wcom.com</senderEmail><timestampReceived>2000-07-05 17:08:31-0400</timestampReceived><subject>Re: ANSI Colors in a C program under Linux...</subject><body>

Hendrix wrote:
&gt; 
&gt; Hi folks,
&gt; 
&gt; ...
&gt; text-based colors in its interface...  How would it be possible for me
&gt; to utilize these colors in my own C, or C++, program?...

Much the same way: have your output to stdout have an escape sequence.
The escape sequence has ESC[???m for attributes.  End the string, or
follow up soon with ESC[0m to reset to normal, unless you want
_everything_
thereafter to have those attributes.  The ESC is symbolized through
GCC with '\e'.

I used http://www.google.com/search?q=&amp;num=100 to find "ansi escape
codes".
http://www.evergreen.edu/user/serv_res/research/bsi/people/dawn/program/ansi_esc.htm
seemed like a good page, and I used it to remind myself of the exact
contents of the sequences.

&gt; Whenever I ask
&gt; questions about color and graphics in "comp.lang.c" they send me
&gt; elsewhere and say that it is compiler specific...???  I do not agree
&gt; with this!!!

Well, I think that the ESC symbolization _is_ compiler specific.  But
even _more_ to the point, the color changes are _terminal_ specific.
The escape sequences below would work, but without any color change,
on an xterm coming from an HP-UX/PA box.  However, on an rxvt coming
from a Debian Linux/sparc box, the colors came out just fine.

&gt; I think that a C program can be written with ANSI escape
&gt; characters in order to colorize a screen, and I believe that this would
&gt; be included in the ANSI Standard of the C language...  It isn't graphics
&gt; functions, it just uses the ANSI escape sequences to print...

Here you go:

int main()
{
	printf("\e[31mHello\e[32m, \e[34mBlue \e[32mWorld\e[0m.\n");
 }

&gt; 
&gt; ...If it is possible to present ANSI
&gt; colors in a C program (and still complie to the ANSI C Standard) then
&gt; could someone show me a "Hello World" kind of program that has
&gt; a blue background with yellow writing ...
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
My, aren't we picky?

OK, as you wish:

int main()
{
	printf("\e[33,44mHello, Blue World\e[0m.\n");
 }

-- 
Bolan.Meek@wcom.com 972-729-5387
bolan@koyote.com (home phone on request)
http://www.koyote.com/users/bolan
RE: xmailtool http://www.koyote.com/users/bolan/xmailtool/index.html
I am the "ILOVEGNU" signature virus. Just copy me to your signature.
This email was infected under the terms of the GNU General Public
License.

</body></email><email><emailId>20000705171743</emailId><senderName>Scott Long</senderName><senderEmail>scott@swiftview.com</senderEmail><timestampReceived>2000-07-05 17:17:43-0400</timestampReceived><subject>Re: More Position Independent Code</subject><body>

"Martin v. Loewis" wrote:

&gt; &gt; It seems like all shared libraries and shared objects on Intel take
&gt; &gt; a serious penalty every time they access non-auto storage.
&gt; 
&gt; The performance loss comes from not being able to use ebx, not because
&gt; of the overhead of loading the register. I guess a modern process does
&gt; not even touch main memory for that...

Not if the stack resides in uncacheable pages, although I can't think of
a situation in which someone would WANT that.

At any rate, thank you to all who replied on this thread, it has been
most enlightening. As I'm sure has become clear I am not someone who has
ever touched a code generator/optimizer although I'll definitely be
studying it in more detail.

Thanks,
Scott

</body></email><email><emailId>20000710001907</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-07-10 00:19:07-0400</timestampReceived><subject>binutils 2.10.0.12 is released.</subject><body>

This is the beta release of binutils 2.10.0.12 for Linux, which is
based on binutils 2000 0701 in CVS on sourecware.cygnus.com plus
various changes. It is purely for Linux, although it has been tested
on Solaris/Sparc and Solaris/x86 from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.10.0.12 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.10.0.9:

1. Update from binutils 2000 0701. Fix the parallel build in ld when PE
is enabled.

Changes from binutils 2.9.5.0.46:

1. Update from binutils 2000 0617. The demangler support for the new
g++ ABI. Minor fix for the ELF visibility. Fix linking non-ELF
relocatable object files under ELF with symbol versioning.
2. Support for linking PE relocatable object files under ia32/ELF.

Changes from binutils 2.9.5.0.42:

1. Update from binutils 2000 0604. The ELF visibility attribuite should
work correctly now.
2. The ia32 assembler has changed the way it assembles the "jmp"
instructions to the global symbols. The old assembler will optimize the
jump to the global symbol defined in the same source file so that no
relocation will be used. The new assembler will use relocation for
global jumps. It will mainly affect PIC asm code. The segment like

	.globl  __setjmp
__setjmp:
	...
	jmp __sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:

is no longer PIC safe since "jmp __sigsetjmp" jumps to a global symbol
and relocation will be used. Instead, it can be changed to

	.globl  __setjmp
__setjmp:
	...
	jmp sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:
sigsetjmp:

so that "jmp sigsetjmp" jumps to a local symbol and the new assembler
will optimize out the relocation.

Changes from binutils 2.9.5.0.41:

1. Update from binutils 2000 0512.
2. Add testsuite for ELF visibility.

Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.10.0.12.tar.gz. Source code.
2. binutils-2.10.0.9-2.10.0.12.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.10.0.12-1.i386.rpm. IA-32 binary RPM for RedHat 6.2.
4. binutils-2.10.0.12-1.alpha.rpm. Alpha binary RPM for RedHat 6.2.

There is no separate source rpm. You can do

# rpm -ta binutils-2.10.0.12.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
07/09/2000


</body></email><email><emailId>20000721045135</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-07-21 04:51:35-0400</timestampReceived><subject>binutils 2.10.0.18 is released.</subject><body>

There are some big Linux related changes from 2.10.0.12 to 2.10.0.18.
Please test it as much as you can under Linux.

Thanks.


H.J.
---
This is the beta release of binutils 2.10.0.18 for Linux, which is
based on binutils 2000 0720 in CVS on sourecware.cygnus.com plus
various changes. It is purely for Linux, although it has been tested
on Solaris/Sparc and Solaris/x86 from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.10.0.18 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.10.0.12:

1. Update from binutils 2000 0720.
2. Fix the DT_NEEDED link bug.
3. Add the new DT_XXXX dynamic tags. Glibc 2.2 will use them at least
on libpthread.so.

Changes from binutils 2.10.0.9:

1. Update from binutils 2000 0701. Fix the parallel build in ld when PE
is enabled.

Changes from binutils 2.9.5.0.46:

1. Update from binutils 2000 0617. The demangler support for the new
g++ ABI. Minor fix for the ELF visibility. Fix linking non-ELF
relocatable object files under ELF with symbol versioning.
2. Support for linking PE relocatable object files under ia32/ELF.

Changes from binutils 2.9.5.0.42:

1. Update from binutils 2000 0604. The ELF visibility attribuite should
work correctly now.
2. The ia32 assembler has changed the way it assembles the "jmp"
instructions to the global symbols. The old assembler will optimize the
jump to the global symbol defined in the same source file so that no
relocation will be used. The new assembler will use relocation for
global jumps. It will mainly affect PIC asm code. The segment like

	.globl  __setjmp
__setjmp:
	...
	jmp __sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:

is no longer PIC safe since "jmp __sigsetjmp" jumps to a global symbol
and relocation will be used. Instead, it can be changed to

	.globl  __setjmp
__setjmp:
	...
	jmp sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:
sigsetjmp:

so that "jmp sigsetjmp" jumps to a local symbol and the new assembler
will optimize out the relocation.

Changes from binutils 2.9.5.0.41:

1. Update from binutils 2000 0512.
2. Add testsuite for ELF visibility.

Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.10.0.18.tar.gz. Source code.
2. binutils-2.10.0.12-2.10.0.18.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.10.0.18-1.i386.rpm. IA-32 binary RPM for RedHat 6.2.
4. binutils-2.10.0.18-1.alpha.rpm. Alpha binary RPM for RedHat 6.2.

There is no separate source rpm. You can do

# rpm -ta binutils-2.10.0.18.tar.gz

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
07/20/2000


</body></email><email><emailId>20000726041834</emailId><senderName>"Venkata Rajesh Velamakanni"</senderName><senderEmail>rajesh.venkata@wipro.com</senderEmail><timestampReceived>2000-07-26 04:18:34-0400</timestampReceived><subject>Re: Query on linking libraries</subject><body>

Hi,

I observed that here fopen was successful. And I am able
to simulate this problem on only one machine.. it works
fine on other machines. I would like to know whether I am
missing any patches.

Thanks,
Rajesh.
-----Original Message-----
From: Thomas Bätzler &lt;Thomas.Baetzler@harbinger.com&gt;
To: linux-gcc@vger.rutgers.edu &lt;linux-gcc@vger.rutgers.edu&gt;
Cc: 'Venkata Rajesh Velamakanni' &lt;rajesh.venkata@wipro.com&gt;
Date: Monday, July 24, 2000 7:51 PM
Subject: RE: Query on linking libraries


Hi,

&gt; Venkata Rajesh Velamakanni [SMTP:rajesh.venkata@wipro.com] asked:
&gt;
&gt; This is regarding a query on linking libraries.
&gt; I would like to know whether anyone has faced
&gt; this problem.
&gt;
&gt; I have a application, in which I open a file(test1),
&gt; and then I am calling a function defined in My library.
&gt; Inside this function I am trying open someother file
&gt; (test2) and then closing the file. While closing this
&gt; file(test2).. it errors out saying "Segmentation fault".
&gt;
[...]
&gt;
&gt;
Does test2 exist? You open it in read mode and close it
without testing that the open was successful. Try this:

&gt;
&gt; Library.c
&gt;
&gt; #include &lt;stdio.h&gt;
&gt;
&gt; void
&gt; library() {
&gt;
if( f=fopen("test2","r") ){
fclose(f);
} else {
printf("Open in library() failed!\n");
}
&gt; }
&gt;
HTH,
--
Thomas Bätzler, System Administrator, Network Operations EMEA
Harbinger, e-Business Connectivity Group, a part of Peregrine
Steinhäuserstraße 22                 phone: +49-721-98143-110
D-76135 Karlsruhe / Germany            fax: +49-721-98143-196

</body></email><email><emailId>20000726094326</emailId><senderName>Andre Majorel</senderName><senderEmail>amajorel@teaser.fr</senderEmail><timestampReceived>2000-07-26 09:43:26-0400</timestampReceived><subject>Re: Query on malloc</subject><body>

At 09:58 2000.07.26 +0530, Venkata Rajesh Velamakanni wrote:

&gt;Can any one tell me from where I can get the source code
&gt;of malloc.c
&gt;I observed that malloc / calloc is giving Sigmentation fault.

A segfault in malloc() or free() is almost certainly due to the
heap being corrupt. It means that, before the last call to
malloc(), you have written in free()'d memory or beyond the
bounds of malloc()'d memory.

You could try linking you program with Electric Fence
(-lefence). It would help you to find the place where it
clobbers the heap.


André Majorel &lt;amajorel@teaser.fr&gt;
http://www.teaser.fr/~amajorel/

</body></email><email><emailId>20000726115228</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-07-26 11:52:28-0400</timestampReceived><subject>Re: linux/gcc newbie...</subject><body>

Disclaimer:  g++ has a cloven hoof.  I don't touch it.

On Wed, 26 Jul 2000, Ben Miller wrote:

&gt; Hi all,
&gt;
&gt; I'm new on this list and up until now I have been programming C++
&gt; exclusively on Windows platforms.  Now, I find I want to learn how to
&gt; the same on Linux.  My head is currently swimming with loads of
&gt; strange notions - I know next to nothing about UNIX but I'm slowly
&gt; picking it up.  Can anyone recommend some good (on-line) texts that
&gt; cover migrating your programming skills from Windows to Linux?  I'm
&gt; sure loads of people have been doing this!
&gt;
info gcc

It should be online right on your local system.  I like pinfo better
than info to read info files:

http://aptiva.caltech.edu/links/rpm/redhat-6.0/RPMS/i386/pinfo-0.5.9-1.i386.rpm


&gt; I have the 2.8.1 distributuion of GCC (it was installed with Linux)

I think the current release of gcc (2.95.2 last I looked) will provide
better g++ support.

&gt; and I can't figure out how to tell the compiler what default
&gt; include/lib directories to use.  I know how to provide, say, an
&gt; include directory using the -I flag, but I want to set some defaults.
&gt; For example, after copying the standard C++ library headers (such as
&gt; &lt;string&gt;) onto the machine, gcc cannot find them unless I specifically
&gt; use the -I flag.  How does it know where to find the standard C header
&gt; files?

Where did you get them, and where did you put them?
library headers are normally included with the library.  libraries?  I
think you need both libg++ and libstdc++ for c++.  When you install[ed]
the libraries it should [have] put the headers where the compiler can
find them.

gcc will know better where to look if you invoke it as g++.  Take a look
through info gcc and see if it doesn't answer your questions.

IOW, from the command line, type

info gcc

&gt;
&gt; Is it okay to ask question this basic on this list?
&gt;
&gt; Best regards,
&gt; Ben Miller
&gt; Mercia Software Ltd.
&gt; Mercia House
&gt; Ashted Lock
&gt; Aston Science Park
&gt; Birmingham B7 4AZ, UK
&gt; Registered Number: 1868855 (Cardiff)
&gt; Tel: 44 (0)121 359 5096
&gt; Fax: 44 (0)121 359 0375
&gt; Web Site: http://www.mercia.com
&gt;
&gt;
&gt;
Happy reading.

Lawson

| We apologize if this message has reached you in error.
| Save the Planet, Save the Trees! Advertise via E mail.




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000728160908</emailId><senderName>"Randy Locklair"</senderName><senderEmail>rlocklair@earthlink.net</senderEmail><timestampReceived>2000-07-28 16:09:08-0400</timestampReceived><subject>RE: Query on Pthread_cond_timedwait</subject><body>

Hello Venkata:

It seems that your memory has probably been corrupted before making this
call, or that the data being passed into the call is bad.  These functions
get used a lot so I doubt theres any problem with them, but it isn't
something too easily debuggable from the core.  This is similar to your last
message re: a malloc() segmentation fault.  I would make sure no recently
free()'d memory has been referenced or any sort of memory issue like that.

Randy
  -----Original Message-----
  From: owner-linux-gcc@vger.rutgers.edu
[mailto:owner-linux-gcc@vger.rutgers.edu]On Behalf Of Venkata Rajesh
Velamakanni
  Sent: Friday, July 28, 2000 1:34 AM
  To: linux-gcc@vger.rutgers.edu
  Subject: Query on Pthread_cond_timedwait


  Hello all,

  This is regarding a query on pthead_cond_timedwait..
  I have received SIGSEGV from pthread_cond_timedwait.
  It seems that libc has sent this signal. I would like to know
  has any one faced this problem?or am I missing something.
  Can any one tell me the situations where this can happen.

  Following are the back traces from gdb
  ------------------------------------------------

  Reading symbols from /lib/libpthread.so.0...done.
  Reading symbols from /lib/libc.so.6...done.
  Reading symbols from /lib/ld-linux.so.2...done.
  Reading symbols from /lib/libnss_files.so.2...done.
  #0  0x401977f1 in __libc_nanosleep () from /lib/libc.so.6
  (gdb) bt
  #0  0x401977f1 in __libc_nanosleep () from /lib/libc.so.6
  #1  0x400fa429 in pthread_cond_timedwait (cond=0x8051d20, mutex=0x8051d08,
      abstime=0xbefffbb0) at condvar.c:94
  #2  0x400d3772 in OS_GetTimerSignal (signalParam=0xbefffd00)
      at osSpecific.c:1290
  #3  0x400b6e19 in timerThread (info=0x400ee018) at timerThread.c:93
  #4  0x400faeca in pthread_start_thread (arg=0xbefffe60) at manager.c:213
  (gdb)

  Thanks,
  Rajesh.

[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;&lt;HEAD&gt;
&lt;META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"&gt;


&lt;META content="MSHTML 5.00.2920.0" name=GENERATOR&gt;&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT color=#0000ff face=Arial size=2&gt;&lt;SPAN class=356233805-28072000&gt;Hello 
Venkata:&lt;BR&gt;&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#0000ff face=Arial size=2&gt;&lt;SPAN class=356233805-28072000&gt;It 
seems that your memory has probably been corrupted before making this call, or 
that the data being passed into the call is bad.  These functions get used 
a lot so I doubt theres any problem with them, but it isn't something too easily 
debuggable from the core.  This is similar to your last message re: a 
malloc() segmentation fault.  I would make sure no recently free()'d memory 
has been referenced or any sort of memory issue like that.&lt;/SPAN&gt;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#0000ff face=Arial size=2&gt;&lt;SPAN 
class=356233805-28072000&gt;&lt;/SPAN&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#0000ff face=Arial size=2&gt;&lt;SPAN 
class=356233805-28072000&gt;Randy&lt;/DIV&gt;&lt;/SPAN&gt;&lt;/FONT&gt;
&lt;BLOCKQUOTE style="MARGIN-RIGHT: 0px"&gt;
  &lt;DIV align=left class=OutlookMessageHeader dir=ltr&gt;&lt;FONT face=Tahoma 
  size=2&gt;-----Original Message-----&lt;BR&gt;&lt;B&gt;From:&lt;/B&gt; 
  owner-linux-gcc@vger.rutgers.edu 
  [mailto:owner-linux-gcc@vger.rutgers.edu]&lt;B&gt;On Behalf Of &lt;/B&gt;Venkata Rajesh 
  Velamakanni&lt;BR&gt;&lt;B&gt;Sent:&lt;/B&gt; Friday, July 28, 2000 1:34 AM&lt;BR&gt;&lt;B&gt;To:&lt;/B&gt; 
  linux-gcc@vger.rutgers.edu&lt;BR&gt;&lt;B&gt;Subject:&lt;/B&gt; Query on 
  Pthread_cond_timedwait&lt;BR&gt;&lt;BR&gt;&lt;/DIV&gt;&lt;/FONT&gt;
  &lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Hello all,&lt;/FONT&gt;&lt;/DIV&gt;
  &lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
  &lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;This is regarding a query on 
  pthead_cond_timedwait..&lt;/FONT&gt;&lt;/DIV&gt;
  &lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;I have received SIGSEGV from 
  pthread_cond_timedwait.&lt;/FONT&gt;&lt;/DIV&gt;
  &lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt;&lt;FONT size=2&gt;It seems that libc has 
  sent this signal. I would like to know&lt;/FONT&gt;&lt;/DIV&gt;
  &lt;DIV&gt;&lt;FONT size=2&gt;has any one faced this problem?or am I missing 
  something.&lt;/FONT&gt;&lt;/DIV&gt;
  &lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Can any one tell me the situations where this 
  can happen.&lt;/FONT&gt;&lt;/DIV&gt;
  &lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
  &lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Following are the back traces from 
  gdb&lt;/FONT&gt;&lt;/DIV&gt;
  &lt;DIV&gt;&lt;FONT color=#000000 
  size=2&gt;------------------------------------------------&lt;/FONT&gt;&lt;/DIV&gt;
  &lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
  &lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Reading symbols from 
  /lib/libpthread.so.0...done.&lt;BR&gt;Reading symbols from 
  /lib/libc.so.6...done.&lt;BR&gt;Reading symbols from 
  /lib/ld-linux.so.2...done.&lt;BR&gt;Reading symbols from 
  /lib/libnss_files.so.2...done.&lt;BR&gt;#0  0x401977f1 in __libc_nanosleep () 
  from /lib/libc.so.6&lt;BR&gt;(gdb) bt&lt;BR&gt;#0  0x401977f1 in __libc_nanosleep () 
  from /lib/libc.so.6&lt;BR&gt;#1  0x400fa429 in pthread_cond_timedwait 
  (cond=0x8051d20, mutex=0x8051d08, &lt;BR&gt;    abstime=0xbefffbb0) 
  at condvar.c:94&lt;BR&gt;#2  0x400d3772 in OS_GetTimerSignal 
  (signalParam=0xbefffd00)&lt;BR&gt;    at 
  osSpecific.c:1290&lt;BR&gt;#3  0x400b6e19 in timerThread (info=0x400ee018) at 
  timerThread.c:93&lt;BR&gt;#4  0x400faeca in pthread_start_thread 
  (arg=0xbefffe60) at manager.c:213&lt;BR&gt;(gdb) &lt;BR&gt;&lt;/FONT&gt;&lt;/DIV&gt;
  &lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Thanks,&lt;/FONT&gt;&lt;/DIV&gt;
  &lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Rajesh.&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BLOCKQUOTE&gt;&lt;/BODY&gt;&lt;/HTML&gt;


</body></email><email><emailId>20000729193032</emailId><senderName>"Randy Locklair"</senderName><senderEmail>rlocklair@earthlink.net</senderEmail><timestampReceived>2000-07-29 19:30:32-0400</timestampReceived><subject>RE: pthreads and signals question</subject><body>

I figured out where I was being confused.  I knew how the __clone syscall
worked and all, but I never realized that the processes get listed in a
normal ps.  So my killall was distributing the signal all over the place.
Good to know :)

I guess sigmasking the threads to ignore the signals would cause it to
behave correctly should anyone try and kill threads.  But here's a good
question:

Can you make a thread ignore sig 9's?  I think it would be kinda bad if a
user could kill -9 a thread of a process, no?

Randy

-----Original Message-----
From: owner-linux-gcc@vger.rutgers.edu
[mailto:owner-linux-gcc@vger.rutgers.edu]On Behalf Of
lawson_whitney@juno.com
Sent: Saturday, July 29, 2000 2:10 PM
To: rlocklair@earthlink.net
Cc: linux-gcc@vger.rutgers.edu
Subject: Re: pthreads and signals question


There is a discussion of this in

info libc -&gt;POSIX Threads-&gt;
* Threads and Signal Handling:: Why you should avoid mixing the two, and
                                  how to do it if you must.

You should read it before you drive yourself nuts.

libc.info* are part of libc AFAIK, you should have them in /usr/info or
/usr/local/info

if "info libc" doesn't work, try "info -f libc"

I much prefer pinfo to read info pages:

http://aptiva.caltech.edu/links/rpm/redhat-6.0/RPMS/i386/pinfo-0.5.9-1.i386.
rpm

On Sat, 29 Jul 2000, Randy Locklair wrote:

&gt; All:
&gt;
&gt; I have a question about the glibc implementation of pthreads.  Maybe
&gt; there's
&gt; a better place for me to post this, off so please inform me off list :)
&gt; Now
&gt; I'm not saying that the implementation is wrong or anything, I am just
&gt; asking questions.
&gt;
&gt; I have a process which has a signal handler for signals such as SIGTERM
and
&gt; SIGINT.  When there are no pthreads created, the signal handler works
fine.
&gt; If i send either signal, it catches them, and shuts itself down.
&gt;
&gt; If i start a pthread, and send a SIGINT, any thing that would return on
a
&gt; signal (select, etc) falls through, but the signal handler is never
run.
&gt; If
&gt; i send a SIGTERM, the handler is called twice (it seems) and seg faults
&gt; when
&gt; the second one tries to exit (presumably the first one is already
trying to
&gt; call exit and they do it at the same time...that's my guess anyway).
&gt;
&gt; Anyway, does anyone have any ideas?  I've never seen this on any other
OS.
&gt; Maybe its because linux's impelmentation is more posix compliant than
&gt; others
&gt; hehe.. Maybe I have to set some signal masks on the thread?  Let me
know if
&gt; you have any ideas, i'll keep tinkering..
&gt;
&gt; Randy
&gt;
Lawson

| We apologize if this message has reached you in error.
| Save the Planet, Save the Trees! Advertise via E mail.




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000730165533</emailId><senderName></senderName><senderEmail>linas</senderEmail><timestampReceived>2000-07-30 16:55:33-0400</timestampReceived><subject>Re: Pb with signal and read</subject><body>

It's been rumoured that Christophe Leroy said:
&gt; 
&gt; Hello,
&gt; 
&gt; I'm using gcc on Linux RedHat 6.2
&gt; It's said in man that signal() behaviour is SYSV one. But, when I
&gt; compile my programs, signal() has got the BSD behaviour. Why ?
&gt; How can I make it have SYSV behaviour ?
&gt; 
&gt; read() doesn't return on signal. Why ? I want it to return with
&gt; errno=EINTR. How can I do that ?

This may not be helpful, but last time I did this, an interrupt of a
blocked read() of a socket and also of a serial port did indeed return 
EINTR (or EAGAIN?) .  This was on older versions of redhat.

Not all signals would do this e.g. ignored signals wouldn't.  What
signal are you using?

--linas

&gt; 
&gt; Thanks
&gt; 
&gt; Christophe
&gt; 

</body></email><email><emailId>20000730170957</emailId><senderName></senderName><senderEmail>linas</senderEmail><timestampReceived>2000-07-30 17:09:57-0400</timestampReceived><subject>Re: addendum to last email re: pthreads and signals</subject><body>

It's been rumoured that Randy Locklair said:
&gt; 
&gt; Ok.. more on that pthreads and signals issue..

I assume you've discovered the pthread_sigmask and sigwait routines.
That might help you some.

&gt; My process starts up one extra thread.  Once its done that it has three
&gt; pid's.  If i kill -9 the last one in the tree, the process dies.  If I
&gt; kill -9 the first one, the process dies.  If i kill -9 the middle one, it
&gt; goes defunct, but both threads seem to continue.  Wierd.
&gt; 
&gt; Also, I can't ctrl-c or ctrl-\ the process.  I am assuming that ignoring all
&gt; signals might solve that problem.  I will keep tinkering, I just am posting
&gt; in case anyone has any hints ;)

Part of me says these are linux kernel bugs. Another part of me says
'don't do that'.  Any code you write here is likely to be highly
non-portable.  Different unixes tend to have very different semantics
for these things.  What works on Linux might not work on AIX, and v.v.
Sometimes everything does indeed 'work correctly', but its highly
non-intuitive what 'work correctly' meant.

e.g. was the thread blocked when signal delivered? Was it blocked in 
select() or read(), or was it blocked in pthread_join()?  Was the thread 
created detached or not?  My experience is that 'detached' tends to
cause a lot of pain and non-intuitive behaviour.  If your threads have
mutex locks (which I'm sure they do), and you are not using them exactly
correctly, the delivery of signals can seem wierd.   Draw a diagram
showing every possible  combination of thread lock, blocking, condwait
release and signal arrival, and you'll see what I mean.   It can get
nasty real fast.

--linas

&gt; 
&gt; Randy
&gt; 

</body></email><email><emailId>20000730173220</emailId><senderName></senderName><senderEmail>linas</senderEmail><timestampReceived>2000-07-30 17:32:20-0400</timestampReceived><subject>Re: configuring g++</subject><body>

It's been rumoured that Ben Miller said:
&gt; 
&gt; Thanks for all the help everyone.  I think I have a fairly good
&gt; understanding of what's going on now.  My main problems now are:
&gt; 
&gt; 1.  I don't seem to have all the stuff I needed in the
&gt; libstdc++-2.90.8.tr.gz.  Specifically I'm missing the config.sub file?

why are you trying to do this yourself?  Why not just install the
pre-compiled .deb or .rpm for this?   Its a *lot* easier to install
the pre-compiled, pre-configured packages ...

&gt; &gt; They really told you to do that CXX=gcc thing ? That's unusual.
&gt; &gt; It amounts to requiring that C++ be compiled with a C compiler.
&gt; &gt; Oh well, they probably know what they're doing.

gcc and g++ are written in C not C++. Thus you use C to compile it/them.
(the fortran compiler is written in C also ... )

&gt; &gt; &gt;1.  Why can I not just type "CXX=gcc configure" (i.e. without the
&gt; &gt; "./"
&gt; &gt; &gt;bit)?  (I'm too used to MS-DOS, I think!)
&gt; &gt; 
&gt; &gt; Depends on the configuration of your system. If the PATH
&gt; &gt; environment variable includes "." (the current directory),
&gt; &gt; AND the directories that come before "." in the PATH do not
&gt; &gt; happen to contain a command named "configure", then you
&gt; &gt; can use just "configure". Otherwise, you have to specify
&gt; &gt; "./configure".
&gt; &gt; 
&gt; &gt; "./configure" is best because it works in all cases and
&gt; &gt; always does the right thing, even if you have other
&gt; &gt; "configure" commands lying around in the path.
&gt; &gt; 
&gt; &gt; One of the differences between DOS and Unix is that, with
&gt; &gt; the latter, "." is not special w.r.t. to the command path ;
&gt; &gt; like any other directory, it's searched for executables *only*
&gt; &gt; if it's explicitly listed in PATH.
&gt; &gt; 
&gt; &gt; [Security note: You might be tempted to change your PATH to
&gt; &gt; something like PATH=.:/usr/local/bin:/usr/bin to get a more
&gt; &gt; DOS-like behaviour but that would not be a good idea security
&gt; &gt; wise. Putting ./ or other non-system directories first makes
&gt; &gt; you more vulnerable to trojans.]

Sepcifically,  while you were out to lunch, some joker might have copied
a binary called 'cp' (or 'ls' or 'ps' or whatever) to your current 
directory.  When you come back from lunch, you type `cp filea fileb`
at the keyboard, and, instead of invoking /usr/bin/cp which is what
you thought you were invoking, you get ./cp which might do something
very very different.  Ooops.  Jokes on you.  


--linas

</body></email><email><emailId>20000727152034</emailId><senderName>Ben Miller</senderName><senderEmail>ben.miller@mercia.com</senderEmail><timestampReceived>2000-07-27 15:20:34-0400</timestampReceived><subject>configuring g++</subject><body>

Hello again,

Thanks for the previous responses.  Now, bearing in mind that I am
picking up Linux (and Unix) as I go along, can you help me with the
following...

I'm trying to build the 2.90.8 version of the GNU Standard C++
Library.  I have the libstdc++-2.90.8.tar.gz which I have unzipped
into /root/usr.  Now, I'm trying to 'configure' the library so that I
can 'make' it.  I'm having problems with the configuration step.  The
instructions I am following (from
http://theory.uwinnipeg.ca/localfiles/infofiles/gcc/gcc_Installation.h
tml) tells me to change to the directory  where I unzipped the
libstdc++ files and then execute:

$ CXX=gcc ./configure
$ make 
$ make install 

My problems are:

1.  Why can I not just type "CXX=gcc configure" (i.e. without the "./"
bit)?  (I'm too used to MS-DOS, I think!)
2.  When I execute the first line (with the "./" bit included) I get
the error message: "configure: error: can not run ../config.sub".  I
have this file in the "/usr/share/automake/" directory, but it seems
to be trying to get it from the "../" directory.  How can I tell it
where to look for this file?
3.  How does the next line ("make") know what it is I'm trying to
make!?
4.  Is the last line trying to run "make" and create a target called
"install"?

Sorry if these are fairly basic questions.  I feel that the way I am
learning Linus is the hard way - can anyone suggest a better
way/decent book?

Best regards,
Ben Miller.

Mercia Software Ltd.
Mercia House 
Ashted Lock
Aston Science Park
Birmingham B7 4AZ, UK 
Registered Number: 1868855 (Cardiff) 
Tel: 44 (0)121 359 5096 
Fax: 44 (0)121 359 0375 
Web Site: http://www.mercia.com 

</body></email><email><emailId>20000728092453</emailId><senderName>Ben Miller</senderName><senderEmail>ben.miller@mercia.com</senderEmail><timestampReceived>2000-07-28 09:24:53-0400</timestampReceived><subject>RE: configuring g++</subject><body>

Thanks for all the help everyone.  I think I have a fairly good
understanding of what's going on now.  My main problems now are:

1.  I don't seem to have all the stuff I needed in the
libstdc++-2.90.8.tr.gz.  Specifically I'm missing the config.sub file?
2.  One more question: if the "make install" command copies relevant
files into system directories (assuming this is the header and lib
files for the standard C++ library) can I then remove the top
directory that I unzipped the archive into?

Thanks again everyone,
Ben.

&gt; -----Original Message-----
&gt; From:	Andre Majorel [SMTP:amajorel@teaser.fr]
&gt; Sent:	Friday, July 28, 2000 3:20 AM
&gt; To:	Ben Miller
&gt; Subject:	Re: configuring g++
&gt; 
&gt; At 16:20 2000.07.27 +0100, Ben Miller wrote:
&gt; 
&gt; &gt;I'm trying to build the 2.90.8 version of the GNU Standard C++
&gt; &gt;Library.  I have the libstdc++-2.90.8.tar.gz which I have unzipped
&gt; &gt;into /root/usr.  Now, I'm trying to 'configure' the library so that
&gt; I
&gt; &gt;can 'make' it.  I'm having problems with the configuration step.
&gt; The
&gt; &gt;instructions I am following (from
&gt; &gt;http://theory.uwinnipeg.ca/localfiles/infofiles/gcc/gcc_Installatio
&gt; n.h
&gt; &gt;tml) tells me to change to the directory  where I unzipped the
&gt; &gt;libstdc++ files and then execute:
&gt; &gt;
&gt; &gt;$ CXX=gcc ./configure
&gt; 
&gt; They really told you to do that CXX=gcc thing ? That's unusual.
&gt; It amounts to requiring that C++ be compiled with a C compiler.
&gt; Oh well, they probably know what they're doing.
&gt; 
&gt; &gt;$ make 
&gt; &gt;$ make install 
&gt; &gt;
&gt; &gt;My problems are:
&gt; &gt;
&gt; &gt;1.  Why can I not just type "CXX=gcc configure" (i.e. without the
&gt; "./"
&gt; &gt;bit)?  (I'm too used to MS-DOS, I think!)
&gt; 
&gt; Depends on the configuration of your system. If the PATH
&gt; environment variable includes "." (the current directory),
&gt; AND the directories that come before "." in the PATH do not
&gt; happen to contain a command named "configure", then you
&gt; can use just "configure". Otherwise, you have to specify
&gt; "./configure".
&gt; 
&gt; "./configure" is best because it works in all cases and
&gt; always does the right thing, even if you have other
&gt; "configure" commands lying around in the path.
&gt; 
&gt; One of the differences between DOS and Unix is that, with
&gt; the latter, "." is not special w.r.t. to the command path ;
&gt; like any other directory, it's searched for executables *only*
&gt; if it's explicitly listed in PATH.
&gt; 
&gt; [Security note: You might be tempted to change your PATH to
&gt; something like PATH=.:/usr/local/bin:/usr/bin to get a more
&gt; DOS-like behaviour but that would not be a good idea security
&gt; wise. Putting ./ or other non-system directories first makes
&gt; you more vulnerable to trojans.]
&gt; 
&gt; &gt;2.  When I execute the first line (with the "./" bit included) I
&gt; get
&gt; &gt;the error message: "configure: error: can not run ../config.sub".
&gt; I
&gt; &gt;have this file in the "/usr/share/automake/" directory, but it
&gt; seems
&gt; &gt;to be trying to get it from the "../" directory.  How can I tell it
&gt; &gt;where to look for this file?
&gt; 
&gt; Mmm... config.sub should be included in the archive. ./configure
&gt; should look for it in the current directory, not in ../ or
&gt; /usr/share/automake/ or whatever. I don't understand. :-(
&gt; 
&gt; &gt;3.  How does the next line ("make") know what it is I'm trying to
&gt; &gt;make!?
&gt; 
&gt; A makefile contains the rules for a number of targets. Typing
&gt; "make foo" causes make to try to build target "foo". If you omit
&gt; the target, make tries to build the *first* target defined in
&gt; the makefile. Traditionally, that target is called "all" and the
&gt; writer of the makefile has arranged so that when you try to
&gt; build it, the program (or library) is built.
&gt; 
&gt; &gt;4.  Is the last line trying to run "make" and create a target
&gt; called
&gt; &gt;"install"?
&gt; 
&gt; "install" is, like "all", a pseudo target. When you try to
&gt; build it, the program (that you just compiled) is installed.
&gt; Because "make install" generally copies file into system
&gt; directories (/usr/bin, /usr/local/bin, etc.), you usually
&gt; need to be root to run it.
&gt; 
&gt; Here is a simplified typical makefile :
&gt; 
&gt; --------------------------------------
&gt; all: foo
&gt; 
&gt; # Link foo
&gt; foo: module1.o module2.o
&gt; 	cc module1.o module2.o -o foo
&gt; 
&gt; # Compile module1.c and module2.c
&gt; module1.o: module1.c
&gt; 	cc -c module1.c
&gt; 
&gt; module2.o: module2.c
&gt; 	cc -c module2.c
&gt; 
&gt; # Install
&gt; install:
&gt; 	cp foo /usr/local/bin
&gt; --------------------------------------
&gt; 
&gt; "make" will run 
&gt; 
&gt;   cc -c module1.c
&gt;   cc -c module2.c
&gt;   cc module1.o module2.o -o foo
&gt; 
&gt; "make install" will run
&gt; 
&gt;   cp foo /usr/local/bin
&gt; 
&gt; HTH. Good luck with your first steps in the Unix world. :-)
&gt; 
&gt; 
&gt; André Majorel &lt;amajorel@teaser.fr&gt;
&gt; http://www.teaser.fr/~amajorel/
Mercia Software Ltd.
Mercia House 
Ashted Lock
Aston Science Park
Birmingham B7 4AZ, UK 
Registered Number: 1868855 (Cardiff) 
Tel: 44 (0)121 359 5096 
Fax: 44 (0)121 359 0375 
Web Site: http://www.mercia.com 

</body></email><email><emailId>20000601081554</emailId><senderName>Fenglou Mao</senderName><senderEmail>mao@linux2.ipc.pku.edu.cn</senderEmail><timestampReceived>2000-06-01 08:15:54-0400</timestampReceived><subject>how to realease memory in STL?</subject><body>

hi, all,
    I used a data structure in my program like this:

         vector&lt;vector&lt;vector&lt;vector&lt;set&lt;double&gt; &gt; &gt; &gt; &gt; x;

    to store my data, but I have so many data in my program,
it used so much memory, so I want to write the datas into
disk, then release the memory, I use code below to do it,
i,j,k,l is long int for loop. 

         set&lt;double&gt;&amp; data=s[i][j][k][l];
         data.erase(data.begin(),data.end()); 				

but when I run my program, it seemed it not release the memory,
who can help me?

   Thank you very much.

Sincerely Yours,

FengLou Mao
*******************************
ADD:Mr. FengLou Mao
    Institute of Physical Chemistry
    Peking University
    BeiJing
    P.R.China
Tel:86-10-62756833
Fax:86-10-62751725

</body></email><email><emailId>20000604170613</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-06-04 17:06:13-0400</timestampReceived><subject>Binutils 2.9.5.0.46 is released.</subject><body>

This is the beta release of binutils 2.9.5.0.46 for Linux, which is
based on binutils 2000 0604 plus various changes. It is purely for
Linux, although it has been tested on Solaris/Sparc and Solaris/x86
from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.9.5.0.46 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.9.5.0.42:

1. Update from binutils 2000 0604. The ELF visibility attribuite should
work correctly now.
2. The ia32 assembler has changed the way it assembles the "jmp"
instructions to the global symbols. The old assembler will optimize the
jump to the global symbol defined in the same source file so that no
relocation will be used. The new assembler will use relocation for
global jumps. It will mainly affect PIC asm code. The segment like

	.globl  __setjmp
__setjmp:
	...
	jmp __sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:

is no longer PIC safe since "jmp __sigsetjmp" jumps to a global symbol
and relocation will be used. Instead, it can be changed to

	.globl  __setjmp
__setjmp:
	...
	jmp sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:
sigsetjmp:

so that "jmp sigsetjmp" jumps to a local symbol and the new assembler
will optimize out the relocation.

Changes from binutils 2.9.5.0.41:

1. Update from binutils 2000 0512.
2. Add testsuite for ELF visibility.

Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.9.5.0.46.tar.gz. Source code.
2. binutils-2.9.5.0.42-2.9.5.0.46.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.5.0.46-1.i386.rpm. IA-32 binary RPM for RedHat 6.2.
4. binutils-2.9.5.0.46-1.alpha.rpm. Alpha binary RPM for RedHat 6.2.

There is no separate source rpm. You can do

# rpm -ta binutils-2.9.5.0.46.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
06/04/2000


</body></email><email><emailId>20000608120208</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@suse.de</senderEmail><timestampReceived>2000-06-08 12:02:08-0400</timestampReceived><subject>Re: how system calls implemented in glibc?</subject><body>

&gt;&gt;&gt;&gt;&gt; Junaid Iqbal writes:

 &gt; Thanks for ur reply.
 &gt; got it. looking in wrong path.  from where i can get docs on sysdeps dir
 &gt; structure and some detail on its functions
Read the manual (under "Hierarchy Conventions").

 &gt; One more problem. i m looking for File System functions like __unlink ,
 &gt; __open etc.
 &gt; they r defined in 2 places in the tree under sysdeps/mach/hurd/unlink.c
 &gt; or in /sysdeps/generic/unlink.c
 &gt; generic/unlink.c is same as generic/system.c.
 &gt; sysdeps/mach/hurd/unlink.c looks like the main unlink code. but its using
 &gt; some functions which i m unable to find.
 &gt; like __dir_unlink.
Did you read my reply at all? A last hint: sysdeps/unix/syscalls.list.

Andreas



 &gt; Andreas Jaeger wrote:

&gt;&gt; &gt;&gt;&gt;&gt;&gt; Junaid Iqbal writes:
&gt;&gt; 
&gt;&gt; &gt; hi all.
&gt;&gt; &gt; I m unable to undersatnd how system calls implemented in glibc (ver
&gt;&gt; &gt; 2.1.3).
&gt;&gt; &gt; for example __libc_system  function (defined in system.c) have these
&gt;&gt; &gt; lines
&gt;&gt; That's the fall back in sysdeps/generic/system.c, the function used on
&gt;&gt; Linux is in sysdeps/posix/system.c.  Read the documentation about the
&gt;&gt; sysdeps directory and have also a look at syscalls.list.
&gt;&gt; 
&gt;&gt; &gt; #include &lt;errno.h&gt;
&gt;&gt; &gt; #include &lt;stdlib.h&gt;
&gt;&gt; 
&gt;&gt; &gt; /* Execute LINE as a shell command.  */
&gt;&gt; &gt; int
&gt;&gt; &gt; __libc_system (line)
&gt;&gt; &gt;      const char *line;
&gt;&gt; &gt; {
&gt;&gt; &gt;   if (line == NULL)
&gt;&gt; &gt;     return 0;   /* This indicates no command processor.  */
&gt;&gt; 
&gt;&gt; &gt;   __sys_errno (ENOSYS);
&gt;&gt; &gt;   return -1;
&gt;&gt; &gt; }
&gt;&gt; &gt; weak_alias (__libc_system, system)
&gt;&gt; 
&gt;&gt; &gt; stub_warning (system)
&gt;&gt; &gt; #include &lt;stub-tag.h&gt;
&gt;&gt; 
&gt;&gt; &gt; can some one give me hand in understanding this?
&gt;&gt; &gt; thanks in advance.
&gt;&gt; 
&gt;&gt; --
&gt;&gt; Andreas Jaeger
&gt;&gt; SuSE Labs aj@suse.de
&gt;&gt; private aj@arthur.inka.de



-- 
 Andreas Jaeger
  SuSE Labs aj@suse.de
   private aj@arthur.inka.de

</body></email><email><emailId>20000616022232</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-06-16 02:22:32-0400</timestampReceived><subject>Re: Shared libraries</subject><body>

What shared libraries are you having trouble with?
The troubles most people have with ld are usually because they don't
understand that unless directed otherwise it is a ONE PASS linker.
if you mention a library to it that defines a symbol, but you haven't
mentioned a library or object file that needs that symbol, it forgets
it, so if you then mention a library or object file that needs it, it is
undefined.  Either order your references to occur before your
definitions (in the ld command line (gcc will generate one from the gcc
command line)), or group libraries with the -( option.  Also known as
--start-group.  info ld is pretty good on this.  I am afraid I have a
hard time finding it in man ld, but I think I've seen it there too.
Oh, you may mention the same library more than once in the ld command
line.  Sometimes that is easier.

If you want something really simple that uses shared libraries, you
could look at

ftp://metalab.unc.edu/pub/Linux/utils/console/lockvc-3.6.tgz

or even simpler,

ftp://metalab.unc.edu/pub/Linux/utils/text/safe-1.3.8.tar.bz2

or

ftp://nwonknu.org/pub/junopine-1.5.6.tar.gz

Those are all from memory, but should be close enough to find.

If you want something hairy that uses shared libraries, look at

 
ftp://metalab.unc.edu/pub/Linux/ALPHA/wine/development/Wine-20000614.tar.gz
 
ftp://tsx-11.mit.edu/pub/linux/ALPHA/Wine/development/Wine-20000614.tar.gz
 
ftp://ftp.infomagic.com/pub/mirrors/linux/sunsite/ALPHA/wine/development/Wine-20000614.tar.gz
 
ftp://orcus.progsoc.uts.edu.au/pub/Wine/development/Wine-20000614.tar.gz


On Thu, 15 Jun 2000, Jeff Parker wrote:

&gt; I'm new to creating  and using shared libraries in LINUX.  When I use
&gt; static libraries while building an application, everything works fine
&gt; but going to shared libaries , I get many 'undefined references' to
&gt; calls in other libraries that my program never needs.  Is there a
switch
&gt; for gcc that stops trying to resolve the dependencies when they aren't
&gt; needed?
&gt;
Oh, a switch.  You can tell ld, -noinhibit-exec.  On the gcc command
line, that would be spelled -Wl,-noinhibit-exec

&gt; If any one has some example makefiles for shared libaries and/or
&gt; applications using shared libraries, I'd appreciate a look.
&gt;
&gt; Thanks,
&gt;
&gt; Jeff Parker
&gt;
&gt;
Lawson

For the man who rises early is a man whose life is lost.
He will never know what he has missed till he's counted up the cost.
It's too late to put eggs in the nest when the bird's already flown.
If you're known as an early riser you can sleep till the cows com home.

                            - Robbie O'Connell
-------------------------




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000620014125</emailId><senderName>"Guido Macchi"</senderName><senderEmail>guido@fceia.unr.edu.ar</senderEmail><timestampReceived>2000-06-20 01:41:25-0400</timestampReceived><subject>Re: RS6000?</subject><body>


Hi, Shourya.

On Sun, 18 Jun 2000, Shourya Sarcar wrote:

&gt; Finally , Linux on RS6000 :-)

Yessssss!!

&gt; Tnx suse
&gt; 
&gt; http://www.rs6000.ibm.com/resource/pressreleases/2000/Jun/suse.html
&gt; 
&gt; Shourya
&gt; 
Thanks a lot!

                                                guido

........................................................................
 "One of the symptoms of an approaching nervous breakdown is the belief
 that one's work is terribly important."
     - Bertrand Russell (1872-1970)

"If you assume that there's no hope, you guarantee that there will be no
hope. If you assume that there is an instinct for freedom, there are 
opportunities to change things, there's a chance you may contribute to
making a better world. That's your choice"
    - Noam Chomsky
........................................................................

</body></email><email><emailId>20000621003238</emailId><senderName>"Andre Majorel"</senderName><senderEmail>amajorel@teaser.fr</senderEmail><timestampReceived>2000-06-21 00:32:38-0400</timestampReceived><subject>Re: problem with math.h</subject><body>


At 15:05 2000.06.20 +0530, Madhav wrote:

&gt;#include &lt;math.h&gt;
[snipped C code]
&gt;is giving an error "undefined reference to 'sqrt' ".  Can anybody tell me
&gt;what the problem may be?

Basically, if you need to #include &lt;math.h&gt;, also use "-lm"
when linking. This is true for unices in general (and perhaps
other systems), not only for GCC on Linux.

Do something like

  cc -c -Wall -O foo.c
  cc foo.o -lm -o foo

or, in one step,

  cc -Wall -O foo.c -lm -o foo

The C FAQ is your friend
(http://www.eskimo.com/~scs/C-faq/top.html).


André Majorel &lt;amajorel@teaser.fr&gt;
http://www.teaser.fr/~amajorel/

</body></email><email><emailId>20000623172949</emailId><senderName>"Graham Murray"</senderName><senderEmail>graham@barnowl.demon.co.uk</senderEmail><timestampReceived>2000-06-23 17:29:49-0400</timestampReceived><subject>Re: binutils 2.10.0.9 is released.</subject><body>


"H . J . Lu" &lt;hjl@valinux.com&gt; writes:

&gt; This is the beta release of binutils 2.10.0.9 for Linux, which is
&gt; based on binutils 2000 0617 in CVS on sourecware.cygnus.com plus
&gt; various changes.

How does this compare with the 'released' binutils 2.10 on
ftp.gnu.org? 

</body></email><email><emailId>20000623202419</emailId><senderName>"13mb80000-HallM(10053584)37x10"</senderName><senderEmail>marcus@bighorn.dr.lucent.com</senderEmail><timestampReceived>2000-06-23 20:24:19-0400</timestampReceived><subject>Re-directing a BSS symbol to another segment</subject><body>


I would like to place a symbol into another segment and am running into
great difficulty.  The symbol is uninitialized (and therefore COMMON).

Suppose that there is a symbol thus:

int X[1000];

This normally gets marked as a COMMON symbol and the loader eventually
puts it into .bss at final link time.  If I change the code to look like:

int X[1000] __attributes__((segment(".mybss")));

This has no effect, since the symbol is COMMON and not attached to a segment
yet (or so I presume).  Now, if I add the "nocommon" attribute like this:

int X[1000] __attributes__((nocommon,segment(".mybss")));

I do get the symbol "X" palced into the .mybss segment, but it is
now an initialized variable.  The problem with this is that it makes
the object file quite large for some of the data I need to be using.

If I take the original file, then do a relocatable link with the script:

SECTIONS { .mybss : { *(.bss) } }

I actually do get the symbol put into .mybss.  I'm not quite sure how this
works, but the problem is that I can only move the entire bss segment this
way, and it takes extra post-processing after the compile.  I guess I could
live with that if I really had to, but I'm searching for a better way right
now...

If I look at the object file header produced for the 3rd case (with the
initialized data) I see that .mybss is being created with the CONTENTS,
ALLOC, LOAD, and DATA flags set, which seems appropriate for initialized
data, and in the last case only the ALLOC flag is set.  So, perhaps another
way of saying this is that I would like to put my data into a segment
with only the ALLOC flag set, or change the flags on a segment somehow.

Does anybody have any suggestions on the best way to accomplish this?

marcus hall


marcus

</body></email><email><emailId>20000630140414</emailId><senderName>"Mark H. Wood"</senderName><senderEmail>mwood@iupui.edu</senderEmail><timestampReceived>2000-06-30 14:04:14-0400</timestampReceived><subject>Re: Position independent code</subject><body>

On Thu, 29 Jun 2000, Martin v. Loewis wrote:
[snip]
&gt; &gt; On the i386 platform relative jumps are limited to an 8 bit signed
&gt; &gt; offset. In order to jump further than this the jumps must be threaded (I
&gt; &gt; may be wrong about this, in truth it has been a while since I did any
&gt; &gt; assembly on the Intels).
&gt; 
&gt; No. On the i386 platform, *all* jumps are PC-relative (except for the
&gt; indirect ones), so you can jump relatively to about any location you
&gt; want.

My Intel Software Developer's Manual:  Instruction Set Reference seems to
be saying that things are more complex than that.  Conditional jumps can
be relative to CS (near jump) or relative to CS:EIP (short jump).
Unconditional jumps can be relative to CS, relative to CS:EIP, or relative
to a new value that the jump will load into CS (far jump).  Only short
jumps take any notice of the current EIP value.  So all jumps are
*segment*-relative, but not all are PC-relative.

(In protected mode CS indexes the descriptor table, and the segment base
is found there, but the effect is similar for the purpose of this
discussion.)

I'll let the philosophers argue whether or not a jump relative to a
segment with base of zero is absolute.

-- 
Mark H. Wood, Lead System Programmer   mwood@IUPUI.Edu
Life was so much simpler on the PDP-10.

</body></email><email><emailId>20000615161405</emailId><senderName>Jeff Parker</senderName><senderEmail>jeffrey.h.parker@saic.com</senderEmail><timestampReceived>2000-06-15 16:14:05-0400</timestampReceived><subject>Shared libraries</subject><body>

I'm new to creating  and using shared libraries in LINUX.  When I use
static libraries while building an application, everything works fine
but going to shared libaries , I get many 'undefined references' to
calls in other libraries that my program never needs.  Is there a switch
for gcc that stops trying to resolve the dependencies when they aren't
needed?

If any one has some example makefiles for shared libaries and/or
applications using shared libraries, I'd appreciate a look.

Thanks,

Jeff Parker

</body></email><email><emailId>20000606043157</emailId><senderName>Guido Macchi</senderName><senderEmail>guido@fceia.unr.edu.ar</senderEmail><timestampReceived>2000-06-06 04:31:57-0400</timestampReceived><subject>RS6000?</subject><body>

Hi.

	Anybody knows if exists a Linux implementation for the IBM RS6000?
I think that the big problem is the MicroChannel bus.
	Thanks in advance.

						guido

........................................................................
 "One of the symptoms of an approaching nervous breakdown is the belief
 that one's work is terribly important."
     - Bertrand Russell (1872-1970)

"If you assume that there's no hope, you guarantee that there will be no
hope. If you assume that there is an instinct for freedom, there are 
opportunities to change things, there's a chance you may contribute to
making a better world. That's your choice"
    - Noam Chomsky
........................................................................

</body></email><email><emailId>20000607001746</emailId><senderName></senderName><senderEmail>linas</senderEmail><timestampReceived>2000-06-07 00:17:46-0400</timestampReceived><subject>Re: RS6000?</subject><body>

It's been rumoured that Guido Macchi said:
&gt; 
&gt; Hi.
&gt; 
&gt; 	Anybody knows if exists a Linux implementation for the IBM RS6000?

I think that IBM sells &amp; supports this.  Or at least they were planing
to a few years ago.

--linas

</body></email><email><emailId>20000610181428</emailId><senderName></senderName><senderEmail>linas</senderEmail><timestampReceived>2000-06-10 18:14:28-0400</timestampReceived><subject>Re: RS6000?</subject><body>


If you read the article carefully, you will see that it says absolutely
zero about running linux on rs/6000's or sp/2's

The article only states that they support linux beowulf clusters running
on intel (netfinity) platforms.

fwiw linux should run on f50's and h50's,
but I don't know if its 'officially supported'. 

-- linas

It's been rumoured that Shourya Sarcar said:
&gt; 
&gt; This link should prove useful for settling all doubts ;-)

like none of them? ;-)

&gt; 
&gt; http://www.zdnet.com.au/linux/stories/au0003286.html
&gt; 
&gt; Regards
&gt; Shourya Sarcar
&gt; 
&gt; ----- Original Message ----- 
&gt; From: &lt;linas@linas.org&gt;
&gt; To: Guido Macchi &lt;guido@fceia.unr.edu.ar&gt;
&gt; Cc: &lt;linux-gcc@vger.rutgers.edu&gt;
&gt; Sent: Wednesday, June 07, 2000 5:47 AM
&gt; Subject: Re: RS6000?
&gt; 
&gt; 
&gt; &gt; It's been rumoured that Guido Macchi said:
&gt; &gt; &gt; 
&gt; &gt; &gt; Hi.
&gt; &gt; &gt; 
&gt; &gt; &gt; Anybody knows if exists a Linux implementation for the IBM RS6000?
&gt; &gt; 
&gt; &gt; I think that IBM sells &amp; supports this.  Or at least they were planing
&gt; &gt; to a few years ago.
&gt; &gt; 
&gt; &gt; --linas
&gt; &gt; 
&gt; 

</body></email><email><emailId>20000620094745</emailId><senderName>"Madhav"</senderName><senderEmail>msp@srasys.co.in</senderEmail><timestampReceived>2000-06-20 09:47:45-0400</timestampReceived><subject>problem with math.h</subject><body>


Hi all,
    I have a problem compiling this simple program in gcc under my RH linux
6.1. I am giving it here.

#include &lt;math.h&gt;
#include &lt;stdio.h&gt;
main()
{
double i,n;
n=0;
for (i=0;i&lt;100;i++)
n += sqrt (i);
printf("the sum of square roots of first 100 natural numbers=%f",n);
}

is giving an error "undefined reference to 'sqrt' ".  Can anybody tell me
what the problem may be?

thanks in advance,
Madhav

</body></email><email><emailId>20000620111920</emailId><senderName>"Gabor Z. Papp"</senderName><senderEmail>gzp@myhost.mynet</senderEmail><timestampReceived>2000-06-20 11:19:20-0400</timestampReceived><subject>problem with math.h</subject><body>


* Madhav &lt;msp@srasys.co.in&gt;:

| is giving an error "undefined reference to 'sqrt' ".  Can anybody tell me
| what the problem may be?

Compile with -lm

</body></email><email><emailId>20000620140947</emailId><senderName>"Karthik Vishwanath"</senderName><senderEmail>karthik.vishwanath@dartmouth.edu</senderEmail><timestampReceived>2000-06-20 14:09:47-0400</timestampReceived><subject>Re: problem with math.h</subject><body>


Try gcc -lm &lt;program.c&gt;. 

-Karthik.

On Tue, 20 Jun 2000, at 3:05pm, Madhav wrote:

&gt; Hi all,
&gt;     I have a problem compiling this simple program in gcc under my RH linux
&gt; 6.1. I am giving it here.
&gt; 
&gt; #include &lt;math.h&gt;
&gt; #include &lt;stdio.h&gt;
&gt; main()
&gt; {
&gt; double i,n;
&gt; n=0;
&gt; for (i=0;i&lt;100;i++)
&gt; n += sqrt (i);
&gt; printf("the sum of square roots of first 100 natural numbers=%f",n);
&gt; }
&gt; 
&gt; is giving an error "undefined reference to 'sqrt' ".  Can anybody tell me
&gt; what the problem may be?
&gt; 
&gt; thanks in advance,
&gt; Madhav
&gt; 
&gt; 
&gt; 

</body></email><email><emailId>20000610185806</emailId><senderName>"Shourya Sarcar"</senderName><senderEmail>sarcar@vsnl.com</senderEmail><timestampReceived>2000-06-10 18:58:06-0400</timestampReceived><subject>Re: RS6000?</subject><body>

The article said :
&lt;/quote&gt;
While the company will initially offer support only for Linux superclusters
using IBM Netfinity servers, Gelardi left open the possibility that IBM may
expand the program.

The RS/6000 SP is basically a large-scale server designed to handle massive
parallel workloads across hundreds or thousands of processors. The server
operates using AIX, IBM's version of Unix. But the supercomputing power
comes at a hefty price, with systems often costing millions of dollars.
&lt;/quote&gt;

I thought this meant that IBM has currently no support for Linux on RS6000,
but  "The server operates using [only] AIX, IBM's version of Unix" (although
it could be supported by others via independent ports) and that the
"possibilty that IBM would expand the program" implied that IBM wa thinking
in terms of including the RS6000 under the Linux umbrage.

The article would probably make more sense if these two para had been
swapped.

I think we had different semantic analysis.

Regards

----- Original Message -----
From: &lt;linas@linas.org&gt;
To: &lt;sarcar@vsnl.com&gt;
Cc: &lt;linas@linas.org&gt;; &lt;guido@fceia.unr.edu.ar&gt;;
&lt;linux-gcc@vger.rutgers.edu&gt;
Sent: Saturday, June 10, 2000 11:44 PM
Subject: Re: RS6000?


&gt;
&gt; If you read the article carefully, you will see that it says absolutely
&gt; zero about running linux on rs/6000's or sp/2's
&gt;
&gt; The article only states that they support linux beowulf clusters running
&gt; on intel (netfinity) platforms.
&gt;
&gt; fwiw linux should run on f50's and h50's,
&gt; but I don't know if its 'officially supported'.
&gt;
&gt; -- linas
&gt;
&gt; It's been rumoured that Shourya Sarcar said:
&gt; &gt;
&gt; &gt; This link should prove useful for settling all doubts ;-)
&gt;
&gt; like none of them? ;-)
&gt;
&gt; &gt;
&gt; &gt; http://www.zdnet.com.au/linux/stories/au0003286.html
&gt; &gt;
&gt; &gt; Regards
&gt; &gt; Shourya Sarcar
&gt; &gt;
&gt; &gt; ----- Original Message -----
&gt; &gt; From: &lt;linas@linas.org&gt;
&gt; &gt; To: Guido Macchi &lt;guido@fceia.unr.edu.ar&gt;
&gt; &gt; Cc: &lt;linux-gcc@vger.rutgers.edu&gt;
&gt; &gt; Sent: Wednesday, June 07, 2000 5:47 AM
&gt; &gt; Subject: Re: RS6000?
&gt; &gt;
&gt; &gt;
&gt; &gt; &gt; It's been rumoured that Guido Macchi said:
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; Hi.
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; Anybody knows if exists a Linux implementation for the IBM RS6000?
&gt; &gt; &gt;
&gt; &gt; &gt; I think that IBM sells &amp; supports this.  Or at least they were planing
&gt; &gt; &gt; to a few years ago.
&gt; &gt; &gt;
&gt; &gt; &gt; --linas
&gt; &gt; &gt;
&gt; &gt;
&gt;
&gt;

</body></email><email><emailId>20000611045252</emailId><senderName></senderName><senderEmail>linas</senderEmail><timestampReceived>2000-06-11 04:52:52-0400</timestampReceived><subject>Re: RS6000?</subject><body>

It's been rumoured that Shourya Sarcar said:
&gt; 
&gt; I think we had different semantic analysis.

I think I have the advantage of having worked at IBM, and knowing the
people who do this stuff.  Several years ago, I talked to one of the
planners about linux on the mainframe, and the conversation drifted off
to linux/6000. 	I reiterate, I beleive it works fine on f50/h50's.
The planner was working on getting some of IBM's high-availability
cluster tools ported from netfinity+NT to linux/6000.  (actually, the
programmers had already done the port, they hated NT. what he was
working on was getting the business plan together, getting the sales &amp;
marketing materials prepared, pushing the beurocratic infrastructure to 
do what it takes to productize.)  Of course, its pointless of sell
software that runs on top of linux/6000 if you don't *also* support
linux/6000 itself.

Note that having linux/6000 work is not the same as linux running on an
sp2.  Although the hardware is based on the same architecture, there
are enough differences that its not instantly compatible.

Note that having a running copy of linux/6000 is not the same as
offering support for it.  Its possible/likely that IBM nuked support for
it beacuse:
1) it cuts into the aix revenue stream
2) "what customer would be crazy enough to buy an rs/6000 and run linux
   on it? wouldn't they want to run the much better aix?"  these words I
   quote, straight out of the plannners mouth.
3) perception that there's no demand for this product
4) perception that it would cost too much to support it
5) it costs millions of dollars to launch a product at IBM.  You have to
   print hundreds of thousands of sales brochures, translated into
   dozens of languages, just to let the immense staff of salespeople
   know that linux/6000 exists, and not to look stoopid when a customer
   calls.  If 10,000 salesmen each spend one hour learning about
   linux/6000, you've already wasted in excess of $0.5M in salaries alone.
   So, basically, its not worth launching a product unless you think
   you'll make millions of dollars in revenue.

--linas

&gt; 
&gt; Regards
&gt; 
&gt; ----- Original Message -----
&gt; From: &lt;linas@linas.org&gt;
&gt; To: &lt;sarcar@vsnl.com&gt;
&gt; Cc: &lt;linas@linas.org&gt;; &lt;guido@fceia.unr.edu.ar&gt;;
&gt; &lt;linux-gcc@vger.rutgers.edu&gt;
&gt; Sent: Saturday, June 10, 2000 11:44 PM
&gt; Subject: Re: RS6000?
&gt; 
&gt; 
&gt; &gt;
&gt; &gt; If you read the article carefully, you will see that it says absolutely
&gt; &gt; zero about running linux on rs/6000's or sp/2's
&gt; &gt;
&gt; &gt; The article only states that they support linux beowulf clusters running
&gt; &gt; on intel (netfinity) platforms.
&gt; &gt;
&gt; &gt; fwiw linux should run on f50's and h50's,
&gt; &gt; but I don't know if its 'officially supported'.
&gt; &gt;
&gt; &gt; -- linas
&gt; &gt;
&gt; &gt; It's been rumoured that Shourya Sarcar said:
&gt; &gt; &gt;
&gt; &gt; &gt; This link should prove useful for settling all doubts ;-)
&gt; &gt;
&gt; &gt; like none of them? ;-)
&gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt; http://www.zdnet.com.au/linux/stories/au0003286.html
&gt; &gt; &gt;
&gt; &gt; &gt; Regards
&gt; &gt; &gt; Shourya Sarcar
&gt; &gt; &gt;
&gt; &gt; &gt; ----- Original Message -----
&gt; &gt; &gt; From: &lt;linas@linas.org&gt;
&gt; &gt; &gt; To: Guido Macchi &lt;guido@fceia.unr.edu.ar&gt;
&gt; &gt; &gt; Cc: &lt;linux-gcc@vger.rutgers.edu&gt;
&gt; &gt; &gt; Sent: Wednesday, June 07, 2000 5:47 AM
&gt; &gt; &gt; Subject: Re: RS6000?
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt; &gt; It's been rumoured that Guido Macchi said:
&gt; &gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; &gt; Hi.
&gt; &gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; &gt; Anybody knows if exists a Linux implementation for the IBM RS6000?
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; I think that IBM sells &amp; supports this.  Or at least they were planing
&gt; &gt; &gt; &gt; to a few years ago.
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; --linas
&gt; &gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt;
&gt; &gt;
&gt; 

</body></email><email><emailId>20000611160419</emailId><senderName>"Shourya Sarcar"</senderName><senderEmail>sarcar@vsnl.com</senderEmail><timestampReceived>2000-06-11 16:04:19-0400</timestampReceived><subject>Re: RS6000?</subject><body>

Hi Linas!
    Thanks for your insight on the issue. I happened to chance upon an IBM
brochure which is abt a few months old an I am quoting some parts thereof.
Hope this should add substance to our discussion.

        "IBM is strongly committed to Linux through its establishment of key
alliances and the provision opf the most comprehensive service
offereing-hardware, software and technical support."

    Linux users _will_ benefit from IBM's wide range of softare and hardware
solutions including :
        blah ....
        blah....
        A linux version of IBM DB2 Universal database. Plans for Lotus
Domino to support Linux
    Delivery of IBM's enterprise File system , AFS, on Linux
    More PowerPC based systems-IBM RS/6000 43P Models 150 and 260 , and
RS/6000 F50 - to run on
    Linux.

    The brochure also talks about AIX palnning to render "Linux application
executon environment" support in 2000.

    Linas also wrote:
    Its possible/likely that IBM nuked support for
&gt; it beacuse:
&gt; 1) it cuts into the aix revenue stream
&gt; 2) "what customer would be crazy enough to buy an rs/6000 and run linux
&gt;    on it? wouldn't they want to run the much better aix?"  these words I
&gt;    quote, straight out of the plannners mouth.

An additional reason would be the new Monterey OS being launched by IBM, an
UNIX system based on the AIX.

    Does IBM sell AIX as a part o the RS/6000 or is it bought additionally,
by default ? wqhat are your opinions regarding the usability and performance
of AIX versus Linux especially vis-a-vis IBM HACMP (High availibilty cluster
multiprocessing ) software programs. Especially since Linux SMP is known not
to scale well beyond 4 processors.

    Also, I shall check out www.rs6000.ibm.com and let the list knwo if I
find something interesting.

Warmest regards.
Shourya Sarcar



----- Original Message -----
From: &lt;linas@linas.org&gt;
To: &lt;sarcar@vsnl.com&gt;
Cc: &lt;linas@linas.org&gt;; &lt;guido@fceia.unr.edu.ar&gt;;
&lt;linux-gcc@vger.rutgers.edu&gt;
Sent: Sunday, June 11, 2000 10:22 AM
Subject: Re: RS6000?


&gt; It's been rumoured that Shourya Sarcar said:
&gt; &gt;
&gt; &gt; I think we had different semantic analysis.
&gt;
&gt; I think I have the advantage of having worked at IBM, and knowing the
&gt; people who do this stuff.  Several years ago, I talked to one of the
&gt; planners about linux on the mainframe, and the conversation drifted off
&gt; to linux/6000. I reiterate, I beleive it works fine on f50/h50's.
&gt; The planner was working on getting some of IBM's high-availability
&gt; cluster tools ported from netfinity+NT to linux/6000.  (actually, the
&gt; programmers had already done the port, they hated NT. what he was
&gt; working on was getting the business plan together, getting the sales &amp;
&gt; marketing materials prepared, pushing the beurocratic infrastructure to
&gt; do what it takes to productize.)  Of course, its pointless of sell
&gt; software that runs on top of linux/6000 if you don't *also* support
&gt; linux/6000 itself.
&gt;
&gt; Note that having linux/6000 work is not the same as linux running on an
&gt; sp2.  Although the hardware is based on the same architecture, there
&gt; are enough differences that its not instantly compatible.
&gt;
&gt; Note that having a running copy of linux/6000 is not the same as
&gt; offering support for it.  Its possible/likely that IBM nuked support for
&gt; it beacuse:
&gt; 1) it cuts into the aix revenue stream
&gt; 2) "what customer would be crazy enough to buy an rs/6000 and run linux
&gt;    on it? wouldn't they want to run the much better aix?"  these words I
&gt;    quote, straight out of the plannners mouth.
&gt; 3) perception that there's no demand for this product
&gt; 4) perception that it would cost too much to support it
&gt; 5) it costs millions of dollars to launch a product at IBM.  You have to
&gt;    print hundreds of thousands of sales brochures, translated into
&gt;    dozens of languages, just to let the immense staff of salespeople
&gt;    know that linux/6000 exists, and not to look stoopid when a customer
&gt;    calls.  If 10,000 salesmen each spend one hour learning about
&gt;    linux/6000, you've already wasted in excess of $0.5M in salaries alone.
&gt;    So, basically, its not worth launching a product unless you think
&gt;    you'll make millions of dollars in revenue.
&gt;
&gt; --linas
&gt;
&gt; &gt;
&gt; &gt; Regards
&gt; &gt;
&gt; &gt; ----- Original Message -----
&gt; &gt; From: &lt;linas@linas.org&gt;
&gt; &gt; To: &lt;sarcar@vsnl.com&gt;
&gt; &gt; Cc: &lt;linas@linas.org&gt;; &lt;guido@fceia.unr.edu.ar&gt;;
&gt; &gt; &lt;linux-gcc@vger.rutgers.edu&gt;
&gt; &gt; Sent: Saturday, June 10, 2000 11:44 PM
&gt; &gt; Subject: Re: RS6000?
&gt; &gt;
&gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt; If you read the article carefully, you will see that it says
absolutely
&gt; &gt; &gt; zero about running linux on rs/6000's or sp/2's
&gt; &gt; &gt;
&gt; &gt; &gt; The article only states that they support linux beowulf clusters
running
&gt; &gt; &gt; on intel (netfinity) platforms.
&gt; &gt; &gt;
&gt; &gt; &gt; fwiw linux should run on f50's and h50's,
&gt; &gt; &gt; but I don't know if its 'officially supported'.
&gt; &gt; &gt;
&gt; &gt; &gt; -- linas
&gt; &gt; &gt;
&gt; &gt; &gt; It's been rumoured that Shourya Sarcar said:
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; This link should prove useful for settling all doubts ;-)
&gt; &gt; &gt;
&gt; &gt; &gt; like none of them? ;-)
&gt; &gt; &gt;
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; http://www.zdnet.com.au/linux/stories/au0003286.html
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; Regards
&gt; &gt; &gt; &gt; Shourya Sarcar
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; ----- Original Message -----
&gt; &gt; &gt; &gt; From: &lt;linas@linas.org&gt;
&gt; &gt; &gt; &gt; To: Guido Macchi &lt;guido@fceia.unr.edu.ar&gt;
&gt; &gt; &gt; &gt; Cc: &lt;linux-gcc@vger.rutgers.edu&gt;
&gt; &gt; &gt; &gt; Sent: Wednesday, June 07, 2000 5:47 AM
&gt; &gt; &gt; &gt; Subject: Re: RS6000?
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; &gt; It's been rumoured that Guido Macchi said:
&gt; &gt; &gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; &gt; &gt; Hi.
&gt; &gt; &gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; &gt; &gt; Anybody knows if exists a Linux implementation for the IBM
RS6000?
&gt; &gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; &gt; I think that IBM sells &amp; supports this.  Or at least they were
planing
&gt; &gt; &gt; &gt; &gt; to a few years ago.
&gt; &gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; &gt; --linas
&gt; &gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt;
&gt;
&gt;

</body></email><email><emailId>20000618175721</emailId><senderName>"Shourya Sarcar"</senderName><senderEmail>sarcar@vsnl.com</senderEmail><timestampReceived>2000-06-18 17:57:21-0400</timestampReceived><subject>Re: RS6000?</subject><body>

Finally , Linux on RS6000 :-)
Tnx suse

http://www.rs6000.ibm.com/resource/pressreleases/2000/Jun/suse.html

Shourya

</body></email><email><emailId>20000630164525</emailId><senderName>Scott Long</senderName><senderEmail>scott@swiftview.com</senderEmail><timestampReceived>2000-06-30 16:45:25-0400</timestampReceived><subject>More Position Independent Code</subject><body>

Thanks to all those who replied to my original question. I'll restate
what I've learned, let's see if I'm correct:

The purpose of PIC is really to allow position-independent data access,
not for jump fixes. In order to prove this to myself I wrote the
following piece:

--- BEGIN pic.c

unsigned int array[256];

int init_array()
{
    int i;

    for(i = 0; i &lt; 256; i++)
        array[i] = 0xDEADBEEF;
}

--- END pic.c

scott@abacus:~$ gcc -O -fPIC -S -o pic.s pic.c

The relevant portion of pic.s:

...

        pushl %ebx
        call .L8
.L8:
        popl %ebx
        addl $_GLOBAL_OFFSET_TABLE_+[.-.L8],%ebx

...

Indeed what I'm seeing are not jump fixes but data access fixes. I'm not
100% familiar with the GNU assembler so I'm not sure exactly what this
_GLOBAL_OFFSET_TABLE is referring to, but it is clear from this snippet
that Intel cannot address data relative to EIP and therefore must load
the PC into a general purpose register.

This call-then-pop to get EIP makes me grimace. Intel is forcing us to
make TWO MEMORY ACCESSES just to get the value of the program counter.
Does anyone know if Intel had a justification for this? It seems like
all shared libraries and shared objects on Intel take a serious penalty
every time they access non-auto storage.

So now I have a question pertinent to this list's raison d'etre:

Is GCC smart enough to figure this out in most cases, and cache the
value of these expensive variables during long stretches of computation,
then save the result into the real location at the end of a function
call or basic block? Imagine the following, compiled with -fPIC:

--- BEGIN pic2.c

int expensive_var;

void crunch_numbers()
{
    while(some_condition_that_is_true_for_many_iterations)
    {
        expensive_var =
some_inline_function_that_exhausts_the_registers(expensive_var);
    }
}

--- END pic2.c

The important point of this example is that the inline function is
complex enough to exhaust the general-purpose registers. This means that
expensive_var cannot be stored indefinitely in any one register. In this
case, I think it would be Good for GCC to create an invisible automatic
variable to store the value of expensive_var during the execution of
crunch_numbers().

Does GCC indeed do something like this?

Regards and thanks,
Scott

</body></email><email><emailId>20000623063019</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-06-23 06:30:19-0400</timestampReceived><subject>binutils 2.10.0.9 is released.</subject><body>


This is the beta release of binutils 2.10.0.9 for Linux, which is
based on binutils 2000 0617 in CVS on sourecware.cygnus.com plus
various changes. It is purely for Linux, although it has been tested
on Solaris/Sparc and Solaris/x86 from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.10.0.9 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.9.5.0.46:

1. Update from binutils 2000 0617. The demangler support for the new
g++ ABI. Minor fix for the ELF visibility. Fix linking non-ELF
relocatable object files under ELF with symbol versioning.
2. Support for linking PE relocatable object files under ia32/ELF.

Changes from binutils 2.9.5.0.42:

1. Update from binutils 2000 0604. The ELF visibility attribuite should
work correctly now.
2. The ia32 assembler has changed the way it assembles the "jmp"
instructions to the global symbols. The old assembler will optimize the
jump to the global symbol defined in the same source file so that no
relocation will be used. The new assembler will use relocation for
global jumps. It will mainly affect PIC asm code. The segment like

        .globl  __setjmp
__setjmp:
        ...
        jmp __sigsetjmp
        ...
        .globl __sigsetjmp
__sigsetjmp:

is no longer PIC safe since "jmp __sigsetjmp" jumps to a global symbol
and relocation will be used. Instead, it can be changed to

        .globl  __setjmp
__setjmp:
        ...
        jmp sigsetjmp
        ...
        .globl __sigsetjmp
__sigsetjmp:
sigsetjmp:

so that "jmp sigsetjmp" jumps to a local symbol and the new assembler
will optimize out the relocation.

Changes from binutils 2.9.5.0.41:

1. Update from binutils 2000 0512.
2. Add testsuite for ELF visibility.

Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.10.0.9.tar.gz. Source code.
2. binutils-2.9.5.0.46-2.10.0.9.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.10.0.9-1.i386.rpm. IA-32 binary RPM for RedHat 6.2.
4. binutils-2.10.0.9-1.alpha.rpm. Alpha binary RPM for RedHat 6.2.

There is no separate source rpm. You can do

# rpm -ta binutils-2.10.0.9.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
06/23/2000


</body></email><email><emailId>20000502044307</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-05-02 04:43:07-0400</timestampReceived><subject>Re: Process state</subject><body>



On Sun, 30 Apr 2000, Murat Parlakisik wrote:

&gt; HI
&gt;
&gt; I need to dump process memory state (stack,text,.etc(. How can i do ?
&gt;
Depends on who you are and where you stand in relation to the process.
If you are programming the process, abort() will dump core to the
current working directory to a file named core - if there isn't one
alreafy - and you can read it with gdb. - if your program doesn't have a
handler for the abort signal, and it doesn't sound like it does.  If it
is a separate process, you can try sending it a signal it doesn't handle
or block with kill(1) and that will probably make it dump core.

Lawson
	  &gt;&lt; Microsoft free environment

This mail client runs on Wine.  Your mileage may vary.

---cut here---





________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000502103456</emailId><senderName>"Davide Libenzi"</senderName><senderEmail>davidel@maticad.it</senderEmail><timestampReceived>2000-05-02 10:34:56-0400</timestampReceived><subject>Re: c++ ide?</subject><body>

http://www.kdevelop.org

\Davide

--
Feel free, feel Debian !

</body></email><email><emailId>20000504004839</emailId><senderName></senderName><senderEmail>formulegagnante@hotmail.com</senderEmail><timestampReceived>2000-05-04 00:48:39-0400</timestampReceived><subject>This is for you</subject><body>

Hi ! If the fact of receiving this message chocks you, please delete it immediately. \
I excuse myself sincerely. Your truly,  thank you.

**********************************************************************************

AS EASY AS TRUE : GAIN $50,000 IN 3 MONTHS !
You wish to gain much money ?
Take a few minutes to read this message !

You’ll be delighted to know that you can make a lot of money on the Internet simply \
by sending e-maills. It pays well. It’s  paying, easy and it’s legal. Try it !

This message is to inform you of the existance of a program a friend sent me. I hope \
that this program will interest you. You  will find below the content of the e-mail \
she sent me. I must send this message to everyone if I want to make money. My  friend \
explained to me that it works and that it’s very stimulating : « The e-mails arrive \
as if by magic ! », she told me.

***********************************************************************************
CONTENT OF E-MAIL WE WORK WITH
Maybe you already have received a message similar to this one coming from someone \
else. Unless there is a mistake, this is  the first and the last time that I send it \
to you. I am aware that you received this message without asking for it. If you  \
don’t answer this e-mail, you won’t receive anything else from me.

But if you’re interested by this message, be sure that you’ll be happy to have read \
me, because I have a very interesting,  honorable and lucrative proposal to make to \
you : nothing that would be illegal or immoral.

When I received this program myself, accidentaly, I saw in it an opportunity to \
circulate abondance through other people and  to ameliorate my financial situation. I \
can tell you that it is now possible to make money from home with the wonderfull tool \
 that is Internet. If we give it a try, by devoting 30 minutes to one hour per day, \
it works ! I would like to share with you  this wonderful, exceptionnal and \
profit-earning business plan to develop at home. Consequently, I invite you to read  \
attentively what follows and think that this is another scam because it seams too \
easy.

WHAT WAS SHOWN ON TV
Here is what you could have seen on tv recently. Because of the great popularity of \
this letter on the Internet, an important  evening news program has devoted an entire \
broadcast to analyze if the following program could really generate money. In this  \
broadcast, the letter was also analyzed to see if it was proposing something legal. \
What was discovered prooves once and for  all that there is no law in America that \
fordids anyone from participating in this kind of work. This helped to demonstrate  \
that it is a simple and pleasant way to make extra money at home. There are a lot of \
people implicated in this business.

Since more and more people make a lot of money with this program, it becomes very \
stimulating to join it. You will understand  when you’ll experiment it !

*******************************************************************************

THE BUSINESS PLAN
(Print the following section to send it in the future)

EASY WAY TO MAKE MONEY
The increadible opportunity of this business plan is that it allows to begin by \
investing a very small amount of money, as  well as generating extraordinary revenus. \
If you have the intention to make for example $50,000 in less than 90 days, this  \
business plan will allow you to reach your financial goal !

A LEGITIMATE AND LEGAL OPPORTUNITY TO MAKE MONEY
Multilevel E-mail Report Business won its nobility rank. This is taught in the \
prestigious Harvard University at its  specialized business school. The Stanford \
Research Centre and the Wall Street Journal foresee that 50% to 65% of all goods  and \
services will soon by sold by the Multilevel E-Mail Business system. It is a growing \
industry of several millions that is  expanding everyday. Among the 500,000 \
millionnaires of United States, 20% of them, that is to say, 100,000, won their \
fortune  in investing in a network business. Statistics show that there are 50 new \
millionnaires every day from network  commercialization.

TESTIMONY
Last year, Donald Trump was at the David Letterman tv show. Letterman asked him what \
he would do if he lost all his  belongings and if he had to start from scratch. \
Without hesitation, Trump replied that he would find a good networking  business and \
would start working there. The audience started to manifest its opposition. He then \
looked at the audience and  said (insisting on these words): « This is the reason why \
I’m sitting here and you, you’re over there. »

The information that you will find here is something I would usually let go. \
Hopefully, a bit later, I read everything again,  I tought about it and I studied the \
proposal in depth. My name is Jacques Brault. Two years ago, the business I worked \
for  the last 12 years decided to reduce its staff and by job was abolished. After \
several infructuous interviews to find a job, I  decided to start my own business. \
Last year, I encountered financial difficulties. I borrowed more thant 35 000 $ from \
family  members and friends. The economy didn’t help my business and I couldn’t see \
the day when I would get out of this cycle. I had  to borrow again by morgaging my \
house to help my family and continue my business venture.

Its about then that something very important happened in my life and I write this in \
order to share with you my experience  hoping that it will change also your life for \
ever on the financial level. By mid december, I received this program by  e-mail. Six \
months ago, I had asked for information regarding different business opportunities. \
All the programs that I had  found were too difficult to understand or their initial \
investment was too high.

I never asked to receive the information about this present business opportunity. \
Someone discovered my nane in a postal  list. After reading the message several \
times, I couldn’t believe my eyes. I had in my hands a phenomenal method to make  \
money ! I could invest the amount of money I wanted in the beginning, without \
generating more depts. After I took some paper  and pen, I analyzed it all and \
realized that the minimum I could receive was to recover the money I had invested. \
But, as  most of you, I was still a bit sceptical and worried about the legal aspect \
of this all. Then, I checked this with the postal  services at # 1-800-725-2161 and \
they confirmed that it was effectively legal. After making sure that it was legal and \
that  the system didn’t consist of a chain of letters (meaning something pyramidal), \
I decided : « And why not me ! ».

Initial investment
At the beginning of my project, I sent 10 000 e-mails. My initial inverstment cost me \
$20 to purchase four reports. One  formidable aspect of the e-mails is that it \
doesn’t cost anything for the printing of the message and of the reports :  because \
all the informations are transmitted by e-mail and that this way of communicating \
virtually doesn’t require the same  supports as those of traditionnal communications. \
The only investment to consider is your time : the time you spend on  development of \
your business.

First step of the project
The goal of this system is to receive at least a minimum of 20 orders of REPORT # 1 \
during the first two weeks of the  project. If you don’t reach this goal, send more \
messages until you rise to it. Within a week, I started to receive orders  for REPORT \
# 1. At January 13, I had already received 26 orders for REPORT # 1. The goal of my \
project was to gain $50,000 :  I had reached this goal. 

Second step of the project
The goal is to receive a minimum of 100 orders and more for REPORT # 2 within two \
weeks. Otherwise, you must send more  messages until you reach this goal. At January \
30, I had received 196 orders for REPORT # 2.

Third step of the project
The rest of the project is easy. Relax ! You will attain your goal of $50,000 in no \
time. So I had 196 orders for REPORT # 2,  96 more than my initial goal. So, I rested \
and relaxed. At the beginning of the month of March, I had received $58,000 for  the \
sending of my first 10 000 e-mails. Everyday, more was coming in. I paied all my \
depts and bought a new car. 

This program works. Please, take the time to read this message. This will change your \
life forever. Remember, it won’t work  unless you try it. I’m the living proof that I \
works! If you choose not to participate in this program, I’m sorry. You’re  free to \
decide. I certify that it constitutes a great opportunity, a low cost investment at \
minimum risk. If you choose to  participate, follow this program well and you will be \
on the road of financial security. If you’re a business person,  consider this as a \
sign of times. This is what I did ! Sincerely ! Signed : Jacques Brault. 

GOLDEN RULES OF THE PROGRAM
For this program to work, you must obtain more than : 
- 20 orders of REPORT # 1 ;
- 100 orders and more of REPORT # 2 ;
- and you will gain more than $50,000 in 90 days.

NOTE FROM THE PROGRAM CREATOR
By reading this program and its reports, you will conclude that it couldn’t havec \
been designed by an amateur. Let me  introduce myself. Ten years ago, I had a \
business that worked well. Then, in 1979, my business started to go wrong. I was  \
doing sensibly the same thing than when business was doing well. At last, I ended all \
of this.

You just received information that will lead you to financial freedom for the rest of \
your life without any risk and a little  bit of efforts. In the next months, you will \
have the possibility to gain more money than you ever imagined. I made more than  \
$4,000,000 ! I retired from this program after sending more thant 16 000 programs. \
Actually, I own several offices that work  on this business and I have several other \
of these programs here and oversees.

TESTIMONY FROM ANOTHER PARTICIPANT
Mr. José Jacobs (Richmond, VA)
Follow this program exactly according to its instructions. Don’t change anything ! It \
works extremely well as presented now.  Remember that you must send a copy of this \
excellent report to anyone you think about. One of these persons could send the  \
message to 50 000 others, and your name would be on each of them. Dont’t forget also \
that the more you send e-mails et the  more chances you’ll have of reaching potential \
clients. I gave you ideas, information, the tools and the opportunity to  become \
financially independant. It’s up to you to try it ! Think about it !

But first of all, take the time to read and to really think about this proposal. Take \
a pen and some paper and discover how  it’s going to happen when you’ll participate. \
Take the worst response you could obtain and no matter how you’ll calculate it,  you \
will make a lot of money. You will definitively recuperate your initial investment. \
All the initial doubts you had at the  beginning will disappear when you’ll receive \
your first order. Because it works !


P R O G R A M    D E S C R I P T I O N

INSTRUCTIONS
This method allowing to accumulate capital works if you participate in it. This \
method is not a chain of letters (nor a  pyramidal system) but a legal opportunity to \
make money.

Essentially, here is what we do. As for all multiple level business networks, we \
construct our business by recruting new  partners and we sell them our products. In \
all the states of United States and in Canada, it is legal to enlist new partners  \
for your business and with this method, you need a product for each amount of money \
received.

Orders are sent to you by mail and you transmit your REPORTS (your products) by \
e-mail, this way, you are not personally  implicated in the sale, you don’t have to \
do door to door sollicitation. You accomplish all your business workin private from  \
your own home, your store or your office. This is the largest multiple level business \
network of postal orders.

1 -  ORDER THE REPORTS : Order each of the 4 REPORTS described below (you won’t be \
able to sell them if you don’t order  them).

To receive each of the 4 REPORTS, send by mail to the person listed below with the \
                number of the REPORT:
-   a bill of $5 (or its equivalent in another currency) ;
-   the name and the # of the REPORT you are ordering ;
-   your e-mail address ;
-   your postal return address (in case of problem).

When you place an order, make sure that you are ordering each of the 4 REPORTS. You \
should save each of the 4 REPORTS in your  computer in order to be able to sell them \
later. A few days later, you will receive, through your electronic mailbox, these  \
four REPORTS. Save them in your computer : they will be accessible later when you’ll \
send them to the thousands of people  that will order them.

2 -   RESPECT THE ORDRE OF THE NAMES : Be very careful not to modify the names of the \
persons listed besides each REPORT and  their order on the list in a way that would \
be different from the one mentionned in the following steps. Otherwise, you might  as \
well annihilate your efforts and your potential financial gains. When you will really \
understand the way that this system  works, you will see how you wouldn’t be \
advantaged if you changed something to the list of names. Remerber: this method has  \
been tested over several years now and, if you modify it the slightest, it just might \
not work anymore. 

a) Take a look at the list of REPORTS available (there are 4 of them) :

b) After having ordered the 4 REPORTS and having seen them, replace the name and the \
address of REPORT #1 by your own name  and address. You will then become the \
recognized distributer of REPORT #1. And then, the ancien name of REPORT #1 will \
become  associated with #2.

c) Move the name and address that was placed next to REPORT #2 to the REPORT #3.

d) Move the name and address that was placed next to REPORT #3 to the REPORT #4.

e) The name and address of the person that was placed next to REPORT #4 is removed \
from the list. This person has probably  gained a large sum of money. Once again, \
make sure that you carefully recopy each name and address.

3 - SAVE THE DOCUMENTS : Entirely save this letter (including the modified names and \
addresses). Make no more changes to the  instruction section.

4 - SEND THE LETTER EVERYWHERE : Frontiers don’t exist in Internet... So, don’t \
hesitate to conquest foreign markets.

Your cost of participating in this project is practically worthless: $20!, and \
evidently, you already have an Internet  connexion, and it doesn’t cost anything to \
send e-mails.

HOW TO MAKE SURE THERE WILL BE LOTS OF PEOPLE AFTER YOU

METHOD # 1 : SEND VERY LARGE QUANTITIES OF E-MAILS
Let’s say that you decide to start on a small scale, just to see how it’s going to \
work. Suppose that you and the people that  follow you send 2000 programs each. \
Suppose also that the postal responses are on a scale of 0,5%. (By using the right \
lists,  the response could be much better). Moreover, a lot of people will send \
thousands of programs instead of just 2000. But, lets  continue with this example \
when you send 2000 programs.

With 0,5% response, there would be only 10 orders for the REPORT #1. And these 10 \
people would send each 2000 other programs  for a total of 20 000. Of these 20 000 \
people with a response of 0,5%, you would obtain 100 orders for the REPORT #2. These  \
100 persons would then send 2000 programs each, for a total of 200 000 programs sent \
and a response rate of 0,5% would bring  you 2000 orders for the REPORT #3.

And these 1000 persons that would send 2000 programs each for a total of 2,000,000 \
vous order 10,000 REPORT #4. That would be  10,000 times $5 for you. Paid in cash! \
Your total income for this example would be of $50 + $500 + $5000 + $50 000 for a  \
total of $55,550 !!!

Don’t forget that it is by supposing that 1990 persons on 2000 won’t send anything by \
mail and will throw everything in the  garbage, that you will nonetheless succeed. \
Try to thing about what would happen if only half of the sollicited persons would  \
send 100,000 programs instead of 2000. Believe me, several persons will do exactly as \
that and even more.

The REPORT #2 will explain you the best methods for transmitting large amounts of \
e-mails and will indicate you also where to  get software designed for sending bulk \
e-mail. Moreover, this report will indicate you where to obtain e-mail lists.

METHOD #2 : PLACE ADDS ON THE INTERNET
Advertizing on the Internet is very cheap and there exists hundreds of free web sites \
where you can set  advertising.

Let’s say that you decide to start on a small scale just to see how it works. Suppose \
that your goal is to find 10 persons  for participating at your first level. However, \
if you set a lot of free advertising on the Internet, you will get a larger  response \
than the 10 orders expected. But, let’s consider that you would get 10 responses at a \
first stage. 

1st LEVEL : You get 10 members : 10 X $5 = $50
2nd LEVEL : Your 10 members recruit 10 others : 100 X $5 = $500
3rd LEVEL : These 100 persons recruit 10 others : 1000 X $5 = $5,000
4th LEVEL : These 1000 persons recruit 10 others : 10 000 X $5 = $50,000
TOTAL : $55,550 

This example supposes that the participants will only recruit 10 persons each. Think \
about what would happen if each person  would recruit 20 persons ! Several of these \
participants will obtain 100 persons and more for their first level.

About 50,000 new persons will begin this program every month.

HERE ARE THE 4 REPORTS AND WHERE YOU CAN ORDER THEM
NOTE - Always send $5 (or its equivalent in another device) in cash for each of the 4 \
REPORTS.  Always send your order by postal mail with a first class service. Make sure \
that the money is sufficiently hidden in the  enveloppe between 2 sheets of paper and \
                on one of these sheets, write :
- the # and the name of the REPORT that you are ordering ;
- your e-mail address ;
- your postal address ;
- your postal address on top of the enveloppe (in case of problem).

Don’t forget to sollicitate your family and friends !

_________________________________________________________

ORDER REPORT #1

Entitled : « The Insider’s Guide to Advertising for Free on the Internet »

FROM : Lyne ROBICHAUD
1829 Plessis Street, apt.#1
Montreal, Quebec, Canada 
H2L 2X9

_________________________________________________________

ORDER REPORT #2 

Entitled : « The Insider’s Guide to Sending Bulk E-mail on the Internet »

FROM : Karine ROSS
C.P. St-André
B.P 32053
Montreal, Quebec, Canada
H2L 4Y5

_________________________________________________________

ORDER REPORT #3

Entitled : « The Secrets to Multimedia Marketing on the Internet »

FROM : Sylvain BLANCHETTE
190, Blanchette Street
Yamachiche, Quebec, Canada
G0X 3L0

--_________________________________________________________

ORDER REPORT #4

Entitled : « How to become a Millionnaire utilizing the Power of Multilevel Marketing \
on the Internet »

FROM : François BLANCHETTE
117, Marguerite Bourgeois Street
Yamachiche, Quebec, Canada
G0X 3L0
____________________________________________________________
SUCCESS RULES OF THUMBS

-  Consider this plan as a business plan of your own.

- Order the 4 REPORTS immediately! (you will have them available when orders will \
start to arrive). According to the law,  when you receive an order with $5, you must \
send the corresponding product in order to conform to United States and Canadian  \
by-laws regarding postal shipment and lotery by-laws.

- Always provide service the same day of the reception of the order.

- Be patient and persistant with this program. If you don’t receive 20 orders for the \
REPORT #1 within 2 weeks after starting  your advertizing on the Internet, continue \
sending e-mails until you reach this goal. Then, a few weeks later, you should  \
receive at least 100 orders for the REPORT #2. If you don’t receive this amount of \
orders, continue sending more e-mails  until you reach this goal. Once you receive \
100 orders or more of REPORT #2, you can start relaxing ! From this point, the  \
system will fonction by itself and money will continue to circulate in the system.

IMPORTANT TO REMEMBER
Everytime that your name is put on the list, you are placed in a different state of \
status. You can follow your own  progression by observing the quantity of reports of \
each number # that the participants will order. If you decide to generate  more \
income, you can send another series of e-mails and start over the process. There is \
no limit to the income you could  gain from this program !

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \
* * * * * * * * * * * * * * * * * * * *

NOTE
If you need help to start a new business or to register a business or to find out how \
to declare your income, contact your  local office of small business administration \
(a federal agency that provides free advice. This agency will answer your  questions. \
Moreover, the Income Department offers free help by phone. It also offers free \
lectures about income taxes. If you  have questions about the legality of this \
program and this letter, contact the Consumer Protection Office.




 
 
 
 
 
 
 
 
 
 
 
 
 
 


</body></email><email><emailId>20000505150932</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2000-05-05 15:09:32-0400</timestampReceived><subject>binutils 2.9.5.0.41 is released.</subject><body>

On Fri, May 05, 2000 at 10:10:20AM +0200, Martin v. Loewis wrote:
&gt; &gt; Thanks for the tips.  Actually, before attempting to get the latest
&gt; &gt; GCC snapshot, I installed the latest binutils from HJ Lu
&gt; &gt; (2.9.5.0.37).  I'm not sure where they stand with respect to
&gt; &gt; "today's CVS binutils"...  Maybe HJ could comment on this...
&gt; 
&gt; I really meant "today's"; the relevant patch was checked in on
&gt; Wednesday, I believe.
&gt; 

binutils 2.9.5.0.41 has Martin's patch. Let me know if anything
is wrong on Linux.


H.J.
---
This is the beta release of binutils 2.9.5.0.41 for Linux, which is
based on binutils 2000 0502 plus various changes. It is purely for
Linux, although it has been tested on Solaris/Sparc and Solaris/x86
from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.9.5.0.41 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.9.5.0.41.tar.gz. Source code.
2. binutils-2.9.5.0.37-2.9.5.0.41.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.5.0.41-1.i386.rpm. IA-32 binary RPM for RedHat 6.2.

There is no separate source rpm. You can do

# rpm -ta binutils-2.9.5.0.41.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
05/05/2000


</body></email><email><emailId>20000505185016</emailId><senderName>Rik Hemsley</senderName><senderEmail>rik@kde.org</senderEmail><timestampReceived>2000-05-05 18:50:16-0400</timestampReceived><subject>Re: Text parser</subject><body>

#if Karthik Vishwanath
&gt; Hi,
&gt; 
&gt; I wanted to have my program accept parameters from a text file instead of
&gt; recompling the code everytime I want to change a few dynamic parameters.
&gt; The program is written in C, and text handling in C is quite a tedious
&gt; process (or am I mistaken?). The question is I will have identifiers and
&gt; numbers in my .rc file, which I want parsed and understood. The question
&gt; is can I find some other tool to do this and integrate it with C? 

You can use fscanf (dangerous), write your own mini parser (easy and
safer), or use one of the libraries written specifically for the
purpose. You might want to check out libproplist.

Rik

</body></email><email><emailId>20000506083252</emailId><senderName>Thomas_Bätzler</senderName><senderEmail>thomas.baetzler@harbinger.com</senderEmail><timestampReceived>2000-05-06 08:32:52-0400</timestampReceived><subject>RE: strtod -  help.</subject><body>

Hi,

&gt; Karthik Vishwanath [SMTP:Karthik.Vishwanath@Dartmouth.EDU] asked:
&gt; I am confused about the call and the return vals. The defn, says: 
&gt; double strtod(const char *nptr, char **endptr)
&gt; 
&gt; So if nptr="1000 00 junk", then the return value must be 0 and the
&gt; expression (*endptr == nptr) must be true, right? I am not able to emulate
&gt; this. What am I missing?
&gt; 
The return value is (double) 1000, and if you pass a reference
to a char pointer as the second argument, it will point to the
blank between 1000 and 00 after the call.

HTH,
Thomas

</body></email><email><emailId>20000509184330</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-05-09 18:43:30-0400</timestampReceived><subject>Re: problems installing kdestudio</subject><body>



On Sat, 6 May 2000, val wrote:

&gt; hi all,
&gt;
&gt; it's some time I'm trying to install kdestudio. I always get many
errors
&gt; after the make command. I don't know how to get out of the problem. I
&gt; downloaded the latest versions of Qt (as recommended by kdestudio's
&gt; author) and kdestudio itself.
&gt;
&gt; Why doesn't the standard procedure work?
&gt;
&gt; val
&gt;
Probably, you are missing some or all of the gnu toolchain that is
needed to compile it.  I don't know kdestudio specifically, but you
cannot compile "Hello, world" without glibc-devel, gcc/egcs, binutils.
kde-anything would also need XFree86-devel also.  You can tell from the
error messages what is missing.

Lawson

It is impossible to make anything foolproof because fools are so
ingenious.
---cut here




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000512214709</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2000-05-12 21:47:09-0400</timestampReceived><subject>binutils 2.9.5.0.42 is released.</subject><body>

This is the beta release of binutils 2.9.5.0.42 for Linux, which is
based on binutils 2000 0512 plus various changes. It is purely for
Linux, although it has been tested on Solaris/Sparc and Solaris/x86
from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.9.5.0.42 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.9.5.0.41:

1. Update from binutils 2000 0512.
2. Add testsuite for ELF visibility.

Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.9.5.0.42.tar.gz. Source code.
2. binutils-2.9.5.0.41-2.9.5.0.42.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.5.0.42-1.i386.rpm. IA-32 binary RPM for RedHat 6.2.

There is no separate source rpm. You can do

# rpm -ta binutils-2.9.5.0.42.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
05/12/2000


</body></email><email><emailId>20000520124447</emailId><senderName>Kurt Wall</senderName><senderEmail>kwall@xmission.com</senderEmail><timestampReceived>2000-05-20 12:44:47-0400</timestampReceived><subject>Re: Strange problem</subject><body>

On Sat, May 20, 2000 at 11:14:04AM +0200, Ralf Baechle wrote:
% 
% In some C environments it's actually legal for main() to return without
% a value; there the C compiler will threat this as equivalent to return 0;.
% This is not true for gcc on Linux, there main() will return a random
% value.

IANAL, but I don't think there is ever a situation in which it is "legal"
for main to return without a value, since the ANSI/ISO standard states
that main returns int.  The standard does not say *which* int is returned,
but compliant compilers are required to return *some* int.  I would think
that, in the environments you mention, that what main returns is up to the 
compiler builder.

% Some C compilers are fairly paranoid and will complain if you don't
% properly declare the arguments for main().

Complaining is the desirable behavior, IMHO.  I haven't a copy of the
current or the new standard (C9X) in front of me, but I have never
quite understood why ANSI/ISO C says that main returns int but does
not require the compiler to issue a diagnostic if you declare it 
as returning, say, void.
 
% Just a few notes by somebody who has been dealing with portability
% problems again and again.

Regards,

Kurt

</body></email><email><emailId>20000502102603</emailId><senderName>val</senderName><senderEmail>_oppio@libero.it</senderEmail><timestampReceived>2000-05-02 10:26:03-0400</timestampReceived><subject>c++ ide?</subject><body>

hi all,

i'm looking for a good programming environment under linux. What i have
in mind is something like Borland's C++ Builder or Delphi. I'd like it
to have a graphic tool for building interfaces. I found Glade for Gnome
and it's not bad but i'm looking for something under KDE. Any
suggestions?

val

</body></email><email><emailId>20000505013529</emailId><senderName>Karthik Vishwanath</senderName><senderEmail>karthik.vishwanath@dartmouth.edu</senderEmail><timestampReceived>2000-05-05 01:35:29-0400</timestampReceived><subject>Text parser</subject><body>

Hi,

I wanted to have my program accept parameters from a text file instead of
recompling the code everytime I want to change a few dynamic parameters.
The program is written in C, and text handling in C is quite a tedious
process (or am I mistaken?). The question is I will have identifiers and
numbers in my .rc file, which I want parsed and understood. The question
is can I find some other tool to do this and integrate it with C? 

Excuse me if I am on the wrong list with this one. 

Thanks,
-Karthik.

</body></email><email><emailId>20000505014738</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-05-05 01:47:38-0400</timestampReceived><subject>Re: Text parser</subject><body>



On Thu, 4 May 2000, Karthik Vishwanath wrote:

&gt; Hi,
&gt;
&gt; I wanted to have my program accept parameters from a text file instead
of
&gt; recompling the code everytime I want to change a few dynamic
parameters.
&gt; The program is written in C, and text handling in C is quite a tedious
&gt; process (or am I mistaken?). The question is I will have identifiers
and
&gt; numbers in my .rc file, which I want parsed and understood. The
question
&gt; is can I find some other tool to do this and integrate it with C?
&gt;
&gt; Excuse me if I am on the wrong list with this one.
&gt;
&gt; Thanks,
&gt; -Karthik.
&gt;
bison?  perl can interface with c.  What you want sounds like maybe a
fortran namelist, so you could define that in fortran, and use f2c to
convert it to c, or g77 to compile it.  If you want your rc file to be
able to assign numeric values to program variables by name, that sounds
awfully like a fortran namelist.

Lawson

	  &gt;&lt; Microsoft free environment

This mail client runs on Wine.  Your mileage may vary.

---cut here---





________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000506030158</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-05-06 03:01:58-0400</timestampReceived><subject>Re: strtod -  help.</subject><body>



On Sat, 6 May 2000, Karthik Vishwanath wrote:

&gt; Hi,
&gt;
&gt; I am confused about the call and the return vals. The defn, says:
&gt; -------------------
&gt; double strtod(const char *nptr, char **endptr)
&gt;
&gt; RETURN VALUES
&gt;        The strtod function returns the converted value, if any.
&gt;
&gt;        If endptr is not NULL, a pointer to  the  character  after
&gt;        the last character used in the conversion is stored in the
&gt;        location referenced by endptr.
&gt;
&gt;        If no conversion is performed, zero is  returned  and  the
&gt;        value  of  nptr  is  stored  in the location referenced by
&gt;        endptr.
&gt;
&gt;        If the correct value would cause overflow, plus  or  minus
&gt;        HUGE_VAL is returned (according to the sign of the value),
&gt;        and ERANGE is stored in errno.  If the correct value would
&gt;        cause  underflow, zero is returned and ERANGE is stored in
&gt;        errno.
&gt; -------------------
&gt;
&gt; So if nptr="1000 00 junk", then the return value must be 0 and the
&gt; expression (*endptr == nptr) must be true, right? I am not able to
emulate
&gt; this. What am I missing?

Wrong.
Conversion is performed.  Glibc aims to please.  strtod returns
1.000000e+03, having stopped at the blank (it will skip leading spaces,
but having got its teeth into a number, it chokes on a blank) amd endptr
will be nptr+4.  Look at _all_ your results.  Is the return value 0 or
NAN?
Also, read all of the fine manual:
DESCRIPTION
       The  strtod() function converts the initial portion of the
                                            ^^^^^
       string pointed to by nptr to double representation.
&gt;
&gt; Thanks,
&gt; -Karthik.
&gt;
Lawson
	  &gt;&lt; Microsoft free environment

This mail client runs on Wine.  Your mileage may vary.

---cut here---





________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000506041452</emailId><senderName>Karthik Vishwanath</senderName><senderEmail>karthik.vishwanath@dartmouth.edu</senderEmail><timestampReceived>2000-05-06 04:14:52-0400</timestampReceived><subject>strtod -  help.</subject><body>

Hi,

I am confused about the call and the return vals. The defn, says: 
-------------------
double strtod(const char *nptr, char **endptr)

RETURN VALUES
       The strtod function returns the converted value, if any.

       If endptr is not NULL, a pointer to  the  character  after
       the last character used in the conversion is stored in the
       location referenced by endptr.

       If no conversion is performed, zero is  returned  and  the
       value  of  nptr  is  stored  in the location referenced by
       endptr.

       If the correct value would cause overflow, plus  or  minus
       HUGE_VAL is returned (according to the sign of the value),
       and ERANGE is stored in errno.  If the correct value would
       cause  underflow, zero is returned and ERANGE is stored in
       errno.
-------------------

So if nptr="1000 00 junk", then the return value must be 0 and the
expression (*endptr == nptr) must be true, right? I am not able to emulate
this. What am I missing? 

Thanks,
-Karthik.

</body></email><email><emailId>20000505044928</emailId><senderName>"Shourya Sarcar"</senderName><senderEmail>sarcar@vsnl.com</senderEmail><timestampReceived>2000-05-05 04:49:28-0400</timestampReceived><subject>Re: Text parser</subject><body>

Hi,
    Why don't you have an easy to decipher .rc file, say 1 line per
parameter, and fscanf() them as if you are reading from the keybd. I do
agree that string processing can be slightly tedious with C.. but in this
case there are not many reasons which i can think off.     You can think of
interfaces with Perl , as a second option.

A good place to throw this Q would be
linux-india-programmers@lists.linux-india.org

BTW, are you from the same Dartmouth which spung up Kemeny and Kurtz
(BASIC ) way nback in 1964?

Are you thinking of changing the source-code during runtime ? what would you
need identifiers for ?

Pls write back, if necessary personally, in details .
Regards
Shourya

----- Original Message -----
From: Karthik Vishwanath &lt;Karthik.Vishwanath@Dartmouth.EDU&gt;
To: linuxgcc &lt;linux-gcc@vger.rutgers.edu&gt;
Sent: Friday, May 05, 2000 7:05 AM
Subject: Text parser


&gt; Hi,
&gt;
&gt; I wanted to have my program accept parameters from a text file instead of
&gt; recompling the code everytime I want to change a few dynamic parameters.
&gt; The program is written in C, and text handling in C is quite a tedious
&gt; process (or am I mistaken?). The question is I will have identifiers and
&gt; numbers in my .rc file, which I want parsed and understood. The question
&gt; is can I find some other tool to do this and integrate it with C?
&gt;
&gt; Excuse me if I am on the wrong list with this one.
&gt;
&gt; Thanks,
&gt; -Karthik.
&gt;
&gt;

</body></email><email><emailId>20000502103006</emailId><senderName>"Donald Dade"</senderName><senderEmail>don_dade@hotmail.com</senderEmail><timestampReceived>2000-05-02 10:30:06-0400</timestampReceived><subject>Re: c++ ide?</subject><body>

Check out www.kdevelop.org, I think it'll be exactly what you want. 
Although, it does force you to conform to GNU coding standards and directory 
structures. It does some other annoying things, like it tries to insert GPL 
license disclaimers in all your code, but it also has a decent dialog box 
editor and is overall the best free ide that I have been able to find so 
far.

Don


&gt;From: val &lt;_oppio@libero.it&gt;
&gt;Reply-To: _oppio@libero.it
&gt;To: linux-gcc &lt;linux-gcc@vger.rutgers.edu&gt;
&gt;Subject: c++ ide?
&gt;Date: Tue, 02 May 2000 12:26:03 +0200
&gt;
&gt;hi all,
&gt;
&gt;i'm looking for a good programming environment under linux. What i have
&gt;in mind is something like Borland's C++ Builder or Delphi. I'd like it
&gt;to have a graphic tool for building interfaces. I found Glade for Gnome
&gt;and it's not bad but i'm looking for something under KDE. Any
&gt;suggestions?
&gt;
&gt;val

________________________________________________________________________
Get Your Private, Free E-mail from MSN Hotmail at http://www.hotmail.com

</body></email><email><emailId>20000526145544</emailId><senderName>"Futura"</senderName><senderEmail>futura@futuracr.it</senderEmail><timestampReceived>2000-05-26 14:55:44-0400</timestampReceived><subject>errore nella compilazione</subject><body>

Versione egcs-2.91.66

il tipo di errore e':
warning: control reaches end of non-void function


Grazie.

</body></email><email><emailId>20000530082058</emailId><senderName>Elias Athanasopoulos</senderName><senderEmail>eatha@cc.uoa.gr</senderEmail><timestampReceived>2000-05-30 08:20:58-0400</timestampReceived><subject>Re: Do me a favor!!</subject><body>

	
	Hi,

&gt; &gt; &gt; The error message is the "bash : file :  command not found".
&gt; &gt; &gt; Why????
&gt; &gt; 
&gt; &gt; Because it didn't find it where it looks for commands.
&gt; 
&gt; Actually, because it found /usr/bin/file instead, and you failed to
&gt; provide an argument.   'file' is a unix command.

	If you execute file(1) without an argument you will get a
	"usage" msg (at least in my system RH 6.2), and not a "command not
            found" error _from_ bash. So, I think the problem is that "./" is
	not in his path.

	Regards,
	Elias
-- 
Elias Athanasopoulos
H.E.P &amp; Apps. Lab.
http://www.uoa.gr/~eatha

I bet the human brain is a kludge. Marvin Minsky

</body></email><email><emailId>20000530200417</emailId><senderName>Aaron M !  Ucko</senderName><senderEmail>amu@mit.edu</senderEmail><timestampReceived>2000-05-30 20:04:17-0400</timestampReceived><subject>Re: Problem With fdopen</subject><body>

Kurt Wall &lt;kwall@xmission.com&gt; writes:

&gt; I'm a touch stumped: fdopen is declared in &lt;stdio.h&gt; and most certainly
&gt; returns FILE *.  If I don't use `-ansi', I get no warnings, so I'm
&gt; guessing the issue is that fdopen is POSIX.1 compliant, but not ANSI
&gt; compliant.

Correct; ANSI C needs to support systems which don't have Unix-style
file descriptors, so fopen() is the only function it provides to open
a file.

-- 
Aaron M. Ucko, KB1CJC &lt;amu@mit.edu&gt; (finger amu@monk.mit.edu)

</body></email><email><emailId>20000506161051</emailId><senderName>val</senderName><senderEmail>_oppio@libero.it</senderEmail><timestampReceived>2000-05-06 16:10:51-0400</timestampReceived><subject>problems installing kdestudio</subject><body>

hi all,

it's some time I'm trying to install kdestudio. I always get many errors
after the make command. I don't know how to get out of the problem. I
downloaded the latest versions of Qt (as recommended by kdestudio's
author) and kdestudio itself.

Why doesn't the standard procedure work?

val

</body></email><email><emailId>20000529023343</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-05-29 02:33:43-0400</timestampReceived><subject>Re: Do me a favor!!</subject><body>



On Mon, 29 May 2000, vito wrote:

&gt;
&gt; May i ask you one question?
&gt; How could I make one executable file????
&gt; I make one file and use
&gt; GCC -o file file.c
&gt; and I cannot execute the file.
&gt; The error message is the "bash : file :  command not found".
&gt; Why????

Because it didn't find it where it looks for commands.

&gt; Please help to resolve the problem.
&gt; Thank you.				vito

execute the file like this:  ./file

This is linux-gcc.  The current directory is not in the search path for
commands unless you edit your shell startup file[s] and put it there,
(the folks who make distros think it is bad security policy to be able
to run things from your current directory without meaning to) so if you
want to run file in the current directory you must make explicit
reference to the current directory with ./file.  Of course, absolute
pathname will also work.

&gt; ------_=_NextPart_001_01BFC932.7140BE40
&gt; Content-Type: text/html;
&gt; 	charset="big5"
&gt; Content-Transfer-Encoding: quoted-printable
You do not need to repeat yourself in HTML.  We can read ASCII.

Lawson
---cut here




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000519132342</emailId><senderName>Kurt Wall</senderName><senderEmail>kwall@xmission.com</senderEmail><timestampReceived>2000-05-19 13:23:42-0400</timestampReceived><subject>Problem With fdopen</subject><body>

A representative program illustrating the problem:

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;

int main(void)
{
	FILE *fp;
	int fd;

	fd = open("foo.c", O_RDONLY);
	if (fd &lt; 0) {
		perror("foo.c: open");
		exit(EXIT_FAILURE);
	} else 
		fp = fdopen(fd, "r");

	if(file == NULL) {
		perror("foo.c: fdopen");
		close(fd);
		exit(EXIT_FAILURE);
	} else {
		fclose(fp);
		close(fd);
	}
	exit(EXIT_SUCCESS);
}

gcc (2.91) complains about implicitly declared function fdopen
and an uncast pointer:

$ gcc -ansi -Wall foo.c
foo.c: In function `main':
foo.c:18: warning: implicit declaration of function `fdopen'
foo.c:18: warning: assignment makes pointer from integer without a cast

I'm a touch stumped: fdopen is declared in &lt;stdio.h&gt; and most certainly
returns FILE *.  If I don't use `-ansi', I get no warnings, so I'm
guessing the issue is that fdopen is POSIX.1 compliant, but not ANSI
compliant.

Thanks,

Kurt

</body></email><email><emailId>20000530195857</emailId><senderName>Andre Majorel</senderName><senderEmail>amajorel@teaser.fr</senderEmail><timestampReceived>2000-05-30 19:58:57-0400</timestampReceived><subject>Re: Problem With fdopen</subject><body>

At 07:23 2000.05.19 -0600, Kurt Wall wrote:

&gt;$ gcc -ansi -Wall foo.c
&gt;foo.c: In function `main':
&gt;foo.c:18: warning: implicit declaration of function `fdopen'
&gt;foo.c:18: warning: assignment makes pointer from integer without a cast
&gt;
&gt;I'm a touch stumped: fdopen is declared in &lt;stdio.h&gt; and most certainly
&gt;returns FILE *.  If I don't use `-ansi', I get no warnings, so I'm
&gt;guessing the issue is that fdopen is POSIX.1 compliant, but not ANSI
&gt;compliant.

SUS2 indeed says fdopen() is declared in stdio.h. But fdopen()
is not part of ISO C (at least it doesn't appear in any of the
draft standards that I have).

If -ansi is used, GCC defines __STRICT_ANSI__. Now try grepping
for that macro in /usr/include/*.h...


André Majorel &lt;amajorel@teaser.fr&gt;
http://www.teaser.fr/~amajorel/

</body></email><email><emailId>20000529055230</emailId><senderName>vito</senderName><senderEmail>vito@mail.bcmtwn.com</senderEmail><timestampReceived>2000-05-29 05:52:30-0400</timestampReceived><subject>Do me a favor!!</subject><body>

May i ask you one question?
How could I make one executable file????
I make one file and use
GCC -o file file.c
and I cannot execute the file.
The error message is the "bash : file :  command not found".
Why????
Please help to resolve the problem.
Thank you.				vito

[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=big5"&gt;
&lt;META NAME="Generator" CONTENT="MS Exchange Server version 5.5.2650.12"&gt;
&lt;TITLE&gt;Do me a favor!!&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;P&gt;&lt;FONT SIZE=2 FACE="Arial"&gt;May i ask you one question?&lt;/FONT&gt;
&lt;BR&gt;&lt;FONT SIZE=2 FACE="Arial"&gt;How could I make one executable file????&lt;/FONT&gt;
&lt;BR&gt;&lt;FONT SIZE=2 FACE="Arial"&gt;I make one file and use&lt;/FONT&gt;
&lt;BR&gt;&lt;FONT SIZE=2 FACE="Arial"&gt;GCC -o file file.c&lt;/FONT&gt;
&lt;BR&gt;&lt;FONT SIZE=2 FACE="Arial"&gt;and I cannot execute the file.&lt;/FONT&gt;
&lt;BR&gt;&lt;FONT SIZE=2 FACE="Arial"&gt;The error message is the "bash : file :  \
command not found".&lt;/FONT&gt; &lt;BR&gt;&lt;FONT SIZE=2 FACE="Arial"&gt;Why????&lt;/FONT&gt;
&lt;BR&gt;&lt;FONT SIZE=2 FACE="Arial"&gt;Please help to resolve the problem.&lt;/FONT&gt;
&lt;BR&gt;&lt;FONT SIZE=2 FACE="Arial"&gt;Thank you.      \
                \
        vito&lt;/FONT&gt; &lt;/P&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;



</body></email><email><emailId>20000529092151</emailId><senderName>Thomas_Bätzler</senderName><senderEmail>thomas.baetzler@harbinger.com</senderEmail><timestampReceived>2000-05-29 09:21:51-0400</timestampReceived><subject>RE: Do me a favor!!</subject><body>

Hi,

&gt; vito [SMTP:vito@mail.bcmtwn.com] asked:
&gt; 
&gt; May i ask you one question? 
&gt; How could I make one executable file???? 
&gt; I make one file and use 
&gt; GCC -o file file.c 
&gt; 
This makes an executable, unless you get a
compile error.

&gt; and I cannot execute the file. 
&gt; 
Before you fiddle with the compiler, you
really should read a book about the shell.

&gt; The error message is the "bash : file :  command not found". 
&gt; Why???? 
&gt; 
Because "." is not in your current path. So,
either do a

	export PATH=$PATH:.

or start your program as

	./file

The second method is the preferred method.

Another typical luser error is to name test
programs "test" - and then wonder why it
does not seem to do anything :-)

HTH,
Thomas

</body></email><email><emailId>20000529172903</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-05-29 17:29:03-0400</timestampReceived><subject>Re: Do me a favor!!</subject><body>



On Mon, 29 May 2000 linas@linas.org wrote:

&gt; It's been rumoured that lawson_whitney@juno.com said:
&gt; &gt;
&gt; &gt; Because it didn't find it where it looks for commands.
&gt;
&gt; Actually, because it found /usr/bin/file instead, and you failed to
&gt; provide an argument.   'file' is a unix command.
&gt;
&gt; Note that it is also a bad idea to call your test program 'test'
&gt; because /usr/bin/test is aonther unix command.
&gt;
&gt; --linas

True.  I read file as &lt;file&gt; and responded that way, since the original
post contained:

&gt; &gt; The error message is the "bash : file :  command not found".

which is a bit improbable if file is literally file.

Lawson


"The obvious mathematical breakthrough would be development of an easy
way to factor large prime numbers." - Bill Gates "The Road Ahead" p265

"The irony of the information age is that it has given new
respectability to uninformed opinion." John Lawton

---cut here




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000529200716</emailId><senderName></senderName><senderEmail>linas</senderEmail><timestampReceived>2000-05-29 20:07:16-0400</timestampReceived><subject>Re: Do me a favor!!</subject><body>

It's been rumoured that lawson_whitney@juno.com said:
&gt; 
&gt; 
&gt; 
&gt; On Mon, 29 May 2000, vito wrote:
&gt; 
&gt; &gt;
&gt; &gt; May i ask you one question?
&gt; &gt; How could I make one executable file????
&gt; &gt; I make one file and use
&gt; &gt; GCC -o file file.c
&gt; &gt; and I cannot execute the file.
&gt; &gt; The error message is the "bash : file :  command not found".
&gt; &gt; Why????
&gt; 
&gt; Because it didn't find it where it looks for commands.

Actually, because it found /usr/bin/file instead, and you failed to
provide an argument.   'file' is a unix command.

Note that it is also a bad idea to call your test program 'test'
because /usr/bin/test is aonther unix command.

--linas

&gt; 
&gt; &gt; Please help to resolve the problem.
&gt; &gt; Thank you.				vito
&gt; 
&gt; execute the file like this:  ./file
&gt; 
&gt; This is linux-gcc.  The current directory is not in the search path for
&gt; commands unless you edit your shell startup file[s] and put it there,
&gt; (the folks who make distros think it is bad security policy to be able
&gt; to run things from your current directory without meaning to) so if you
&gt; want to run file in the current directory you must make explicit
&gt; reference to the current directory with ./file.  Of course, absolute
&gt; pathname will also work.
&gt; 

</body></email><email><emailId>20000403231653</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-04-03 23:16:53-0400</timestampReceived><subject>binutils 2.9.5.0.33 is released</subject><body>


This is the beta release of binutils 2.9.5.0.33 for Linux, which is
based on binutils 2000 0403 plus various changes. It is purely for
Linux, although it has been tested on Solaris/Sparc and Solaris/x86
from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.9.5.0.33 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.9.5.0.33.tar.gz. Source code.
2. binutils-2.9.5.0.32-2.9.5.0.33.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.5.0.33-1.i386.rpm. IA-32 binary RPM for RedHat 6.1.

There is no separate source rpm. You can do

# rpm -ta binutils-2.9.5.0.33.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
04/03/2000


</body></email><email><emailId>20000404181418</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-04-04 18:14:18-0400</timestampReceived><subject>Binutils 2.9.5.0.34 is released.</subject><body>

This is the beta release of binutils 2.9.5.0.34 for Linux, which is
based on binutils 2000 0403 plus various changes. It is purely for
Linux, although it has been tested on Solaris/Sparc and Solaris/x86
from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.9.5.0.34 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.9.5.0.34.tar.gz. Source code.
2. binutils-2.9.5.0.33-2.9.5.0.34.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.5.0.34-1.i386.rpm. IA-32 binary RPM for RedHat 6.1.

There is no separate source rpm. You can do

# rpm -ta binutils-2.9.5.0.34.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
04/04/2000


</body></email><email><emailId>20000411004840</emailId><senderName>jschlst</senderName><senderEmail>jschlst@turbolinux.com</senderEmail><timestampReceived>2000-04-11 00:48:40-0400</timestampReceived><subject>Help with GCC ASM inline code</subject><body>

Hello. I know that this is a tad off topic but I am hoping someone can
enlighten me on how to do this. I need to create a system call on a x86
one call requires 7 args, the other 8, and one 9.

I realize my problem could be avoided by using a data structure but in
order to be compatible with the API I am implementing it must use the
exact same number of args.

I have no problem implementing syscalls w/ Linux, but I have no idea how
to implment more a syscall with more than 5 args.

For example the 5 arg syscall is like such:
#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4, \
          type5,arg5) \
type name (type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5) \
{ \
long __res; \
__asm__ volatile ("int $0x80" \
        : "=a" (__res) \
        : "0" (__NR_##name),"b" ((long)(arg1)),"c" ((long)(arg2)), \
          "d" ((long)(arg3)),"S" ((long)(arg4)),"D" ((long)(arg5))); \
__syscall_return(type,__res); \
}

How would I do this for 7, 8, and 9 arguments.

Any code, hints and ideas much appreciated. Thanks.
Jay Schulist
jschlst@turbolinux.com

</body></email><email><emailId>20000412130643</emailId><senderName>"Hindu"</senderName><senderEmail>india_for_hindus@yahoo.com</senderEmail><timestampReceived>2000-04-12 13:06:43-0400</timestampReceived><subject>Indians Unite</subject><body>

This mail is being sent only to indians.if any one else receives this it is in error. \
if you would like to be removed from the list please reply with the word remove in \
the subject line. The intention of this mail is to awake the indians to the fact that \
india is in danger of being enveloped by foriegn religions. Even indian based  \
religious organisations are taking to the net to propagate such foriegn religions. We \
have identified a few such sites to be guilty of such unacceptable practises which \
are basically fanatic in nature with links to like minded sites. We solicit your \
support in banning these sites. A typical example is the following:

1. http://www.njchurch.org

read hindu philosophy and hindu literature at the following fabulous sites
1. http://www.hindulinks.org/
2. http://www.hindu.org/. Become a Hindu.


</body></email><email><emailId>20000412194142</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-04-12 19:41:42-0400</timestampReceived><subject>Binutils 2.9.5.0.35 is released.</subject><body>

This is the beta release of binutils 2.9.5.0.35 for Linux, which is
based on binutils 2000 0412 plus various changes. It is purely for
Linux, although it has been tested on Solaris/Sparc and Solaris/x86
from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.9.5.0.35 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.9.5.0.35.tar.gz. Source code.
2. binutils-2.9.5.0.34-2.9.5.0.35.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.5.0.35-1.i386.rpm. IA-32 binary RPM for RedHat 6.1.

There is no separate source rpm. You can do

# rpm -ta binutils-2.9.5.0.35.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
04/12/2000


</body></email><email><emailId>20000412203432</emailId><senderName>Eric Sorenson</senderName><senderEmail>eric@transmeta.com</senderEmail><timestampReceived>2000-04-12 20:34:32-0400</timestampReceived><subject>test, pls ignore</subject><body>

Sorry for the bogus test.

</body></email><email><emailId>20000412124427</emailId><senderName>"Hindu"</senderName><senderEmail>india_for_hindus@yahoo.com</senderEmail><timestampReceived>2000-04-12 12:44:27-0400</timestampReceived><subject>Indians Unite</subject><body>

This mail is being sent only to indians.if any one else receives this it is in error. \
if you would like to be removed from the list please reply with the word remove in \
the subject line. The intention of this mail is to awake the indians to the fact that \
india is in danger of being enveloped by foriegn religions. Even indian based  \
religious organisations are taking to the net to propagate such foriegn religions. We \
have identified a few such sites to be guilty of such unacceptable practises which \
are basically fanatic in nature with links to like minded sites. We solicit your \
support in banning these sites. A typical example is the following:

1. http://www.njchurch.org

read hindu philosophy and hindu literature at the following fabulous sites
1. http://www.hindulinks.org/
2. http://www.hindu.org/. Become a Hindu.


</body></email><email><emailId>20000414152841</emailId><senderName>"Murat Parlakisik"</senderName><senderEmail>parlak@mutek.org.tr</senderEmail><timestampReceived>2000-04-14 15:28:41-0400</timestampReceived><subject>working process's base of data</subject><body>


How can i find data's base address of working process?

i can take with nm command
but it is not proper way.

</body></email><email><emailId>20000416203411</emailId><senderName>Florian Weimer</senderName><senderEmail>fw@deneb.cygnus.argh.org</senderEmail><timestampReceived>2000-04-16 20:34:11-0400</timestampReceived><subject>Re: Latest GCC binaries for Redhat Linux</subject><body>

"Abhaya Pattanaik" &lt;abhaya@ssolinc.com&gt; writes:

&gt;     Could someone please tell me where to get the binaries for GCC,GDB and
&gt; related utilities for redhat Linux 6.2? I don't mind either downloading or
&gt; buying a commercial package.

The latest binaries for Red Hat Linux 6.2 are available at
ftp://ftp.redhat.com/.  Why do you think you need newer versions?

Of course, you can get the GCC source code from your local GNU mirror
and compile it yourself.

</body></email><email><emailId>20000417021332</emailId><senderName>"Yasar Cakmak"</senderName><senderEmail>dycakmak@hotmail.com</senderEmail><timestampReceived>2000-04-17 02:13:32-0400</timestampReceived><subject></subject><body>

Hello,
Could anyone tell me where to find proper drivers for
my video display card?? Its details are as follows

   S3 Inc Trio3D
  =20
Best regards,
Yasar Cakmak



[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;&lt;HEAD&gt;
&lt;META content="text/html; charset=iso-8859-1" http-equiv=Content-Type&gt;
&lt;META content="MSHTML 5.00.2314.1000" name=GENERATOR&gt;
&lt;STYLE&gt;&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Hello,&lt;BR&gt;Could anyone tell me where to find proper 
drivers for&lt;BR&gt;my video display card?? Its details are as 
follows&lt;BR&gt;&lt;BR&gt;   S3 Inc 
Trio3D&lt;BR&gt;   &lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Best regards,&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Yasar Cakmak&lt;BR&gt;&lt;BR&gt;&lt;/DIV&gt;&lt;/FONT&gt;&lt;/BODY&gt;&lt;/HTML&gt;


</body></email><email><emailId>20000417153028</emailId><senderName>Rafael Marco de Lucas</senderName><senderEmail>rmarco@ifca.unican.es</senderEmail><timestampReceived>2000-04-17 15:30:28-0400</timestampReceived><subject>Changing proccess owner while running</subject><body>


  Hello,

 is it possible to change the owner of a proccess while it is
 running ?  i would prefer to do it from the shell but i didnt
 found how to do it,, ie. imagine a program that does several
 tasks and each task should be done by a different user (i do
 not want to start a new shell)
   i apologise if the question is a little off-topic

best regards,
Rafa

</body></email><email><emailId>20000416175234</emailId><senderName>"Abhaya Pattanaik"</senderName><senderEmail>abhaya@ssolinc.com</senderEmail><timestampReceived>2000-04-16 17:52:34-0400</timestampReceived><subject>Latest GCC binaries for Redhat Linux</subject><body>

Hi,
    Could someone please tell me where to get the binaries for GCC,GDB =
and related utilities for redhat Linux 6.2? I don't mind either =
downloading or buying a commercial package.

I looked into "GNUPro Dev Kit v2.0 Linux". I could not get the revision =
number of GCC etc. from redhat website.
I would appriciate your help.

Thanks,
Abhaya Pattanaik


[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;&lt;HEAD&gt;
&lt;META content="text/html; charset=iso-8859-1" http-equiv=Content-Type&gt;
&lt;META content="MSHTML 5.00.2314.1000" name=GENERATOR&gt;
&lt;STYLE&gt;&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;Hi,&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;    Could someone please tell me where to get 
the binaries for GCC,GDB and related utilities for redhat Linux 6.2? I don't 
mind either downloading or buying a commercial package.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;I looked into "&lt;FONT color=#000000 
face=Helvetica,Arial&gt;&lt;STRONG&gt;GNUPro Dev Kit v2.0 Linux". &lt;/STRONG&gt;I could not 
get the revision number of GCC etc. from redhat website.&lt;/FONT&gt;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=HELVETICA size=2&gt;I would appriciate your help.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=HELVETICA size=2&gt;Thanks,&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;Abhaya Pattanaik&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt; &lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;


</body></email><email><emailId>20000419232914</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-04-19 23:29:14-0400</timestampReceived><subject>binutils 2.9.5.0.37 is released.</subject><body>

This is the beta release of binutils 2.9.5.0.37 for Linux, which is
based on binutils 2000 0418 plus various changes. It is purely for
Linux, although it has been tested on Solaris/Sparc and Solaris/x86
from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.9.5.0.37 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.9.5.0.37.tar.gz. Source code.
2. binutils-2.9.5.0.35-2.9.5.0.37.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.5.0.37-1.i386.rpm. IA-32 binary RPM for RedHat 6.1.

There is no separate source rpm. You can do

# rpm -ta binutils-2.9.5.0.37.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
04/18/2000


</body></email><email><emailId>20000420073125</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2000-04-20 07:31:25-0400</timestampReceived><subject>Re: Duplicates in 2.9.5.0.37/gas/ChangeLog</subject><body>

On Thu, Apr 20, 2000 at 03:18:59PM +1000, Alan Modra wrote:
&gt; There seems to be a large hunk of duplicate entries.  Search for
&gt; 1999-06-04
&gt; 

Ooops. I updated binutils-2.9.5.0.35-2.9.5.0.37.diff.gz and
binutils-2.9.5.0.37.tar.gz on

ftp://ftp.valinux.com/pub/support/hjl/binutils

Sorry for that.


Thanks.


H.J.

</body></email><email><emailId>20000420092437</emailId><senderName>David Kulp</senderName><senderEmail>dkulp@neomorphic.com</senderEmail><timestampReceived>2000-04-20 09:24:37-0400</timestampReceived><subject>STL maps never deallocate</subject><body>

It appears the STL maps (and probably other similar templates) never
free allocated memory.  Is there some secret "purge" routine to tell
STL to free its free store?  Perhaps more to the point, isn't this a
an STL bug?

For example, in the following code I create a map of 500K elements.
At the stub statement at (1), a simple examination of allocated memory
using top shows that about 12MB are allocated.  However, stepping
through the remaining lines as the map object is supposedly
deallocated as it's popped off the stack shows that memory is never
freed, but remains on the STL's own free store.  (This is not the
case, e.g., for vectors.)

#include &lt;map&gt;
struct intcmp
{
  bool operator()(const int i1, const int i2) const
  {
    return i1 &lt; i2;
  }
};

int
foo() {
  int i;
  map&lt;int,int,intcmp&gt; m;
  for (i=0; i&lt;500000; i++)
    m[i] = i;
  i = 0;                            &lt;--1
}                                   &lt;--2

int
main() {
  foo();
}

</body></email><email><emailId>20000423194604</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-04-23 19:46:04-0400</timestampReceived><subject>Re: BFD documents</subject><body>

&gt; Where to find programming manual for GNU GFD ?  The info files are
&gt; not for BFD newbie.

I believe there are no other manual than those. Together with the
header files, and the source code of bfd applications (e.g. objdump,
ld), you should be able to write your own bfd application. It is
probably not an easy task, though. When you are done, please consider
contributing better and more extensive documentation.

Regards,
Martin

</body></email><email><emailId>20000424060022</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-04-24 06:00:22-0400</timestampReceived><subject>Re: exception handling</subject><body>

&gt; I did some more checking after my post, and the problem is exactly what you
&gt; say, the exception gets lost when it passes c code. I tried to compile the c
&gt; code with g++ but too many errors. Can I compile the c code with egcs and
&gt; still have exception handling in it?

You can compile the C code with -fexceptions.

Regards,
Martin

</body></email><email><emailId>20000430231301</emailId><senderName></senderName><senderEmail>wnyswv</senderEmail><timestampReceived>2000-04-30 23:13:01-0400</timestampReceived><subject>fatty</subject><body>

Ever wanted to lose weight while sitting on your butt in front of the TV???


Well now you can!!     How you say?


With three powerful body organs working together to decrease metabolism, how will you \
ever lose those extra pounds? - Increase Metabolic Fat Burning! 



http://www.jumbomart.com/products/product.php/116/

Metabolic Thyrolean works on all three regulatory areas involved in metabolism. In \
the thyroid, Metabolic Thyrolean improves the conversion of thyroid hormones, which \
means that the more active hormones work for you instead of against you. It also \
fools the liver into thinking that you are storing plenty of ATP, which means that \
the liver has no reason to regulate your metabolism downward. Finally, in the brain, \
Metabolic Thyrolean provides the substrates to build neurotransmitters-without the \
need for calories. The final result is that metabolism remains elevated, with a \
positive effect on metabolism, calorie-burning and fat loss. This cutting edge \
formula takes a whole new approach to weight loss. 






1time mail of e-Fatnews. No more fat loss info will come unless you request it.
affid#1po836bbud7


</body></email><email><emailId>20000410003412</emailId><senderName>"wu_yb"</senderName><senderEmail>wu_yb@sina.com</senderEmail><timestampReceived>2000-04-10 00:34:12-0400</timestampReceived><subject>BFD documents</subject><body>

[Attachment #2 (text/plain)]

Where to find programming manual for GNU GFD ?
The info files are not for BFD newbie.

Thanks everybody !!!

[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;&lt;HEAD&gt;
&lt;META content="text/html; charset=iso-8859-1" http-equiv=Content-Type&gt;
&lt;META content="MSHTML 5.00.2614.3500" name=GENERATOR&gt;
&lt;STYLE&gt;&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT face=宋体 size=2&gt;Where to find programming manual for GNU GFD 
?&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=宋体 size=2&gt;The info files are not for BFD newbie.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=宋体 size=2&gt;Thanks everybody !!!&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;


</body></email><email><emailId>20000410152111</emailId><senderName>Eran Carmel</senderName><senderEmail>eranc@mercury.co.il</senderEmail><timestampReceived>2000-04-10 15:21:11-0400</timestampReceived><subject>exception handling</subject><body>

Hi,

Am having a problem catching exceptions.
I work with shared libraries, I throw an exception and catch it in the
same dll. The problem is that it is not caught, instead I get a
SIGABORT.
The same code works for me on other Unix platforms, using the native
compiler.
Any ideas?

Thanx

Eran

</body></email><email><emailId>20000423201853</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-04-23 20:18:53-0400</timestampReceived><subject>Re: exception handling</subject><body>

&gt; Am having a problem catching exceptions.
&gt; I work with shared libraries, I throw an exception and catch it in the
&gt; same dll. The problem is that it is not caught, instead I get a
&gt; SIGABORT.
&gt; The same code works for me on other Unix platforms, using the native
&gt; compiler.
&gt; Any ideas?

It's hard to tell, with as little information as you gave. A typical
problem is that not all code on the stack is compiled with
-fexceptions; in particular, C code is often not compiled that way.
There could be hundreds of other reasons as well, of course.

Regards,
Martin

</body></email><email><emailId>20000423205250</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-04-23 20:52:50-0400</timestampReceived><subject>RE: exception handling</subject><body>



On Mon, 24 Apr 2000, Eran Carmel wrote:

&gt; Thanx for the answer.
&gt; I did some more checking after my post, and the problem is exactly what
you
&gt; say, the exception gets lost when it passes c code. I tried to compile
the
&gt; c
&gt; code with g++ but too many errors. Can I compile the c code with egcs
and
&gt; still have exception handling in it?
&gt; Any help would be appreciated.
&gt;
&gt; Thanx
&gt;
&gt; Eran

Of course.  Martin just gave you the option to use.  Have a read of
info egcs

It is probably there.  It's in "info gcc" for gcc-2.95.1, which is only
a little newer.

egcs -fexceptions -o foo foo.c

Lawson
	  &gt;&lt; Microsoft free environment

This mail client runs on Wine.  Your mileage may vary.

---cut here---





________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000423224114</emailId><senderName>Eran Carmel</senderName><senderEmail>eranc@mercury.co.il</senderEmail><timestampReceived>2000-04-23 22:41:14-0400</timestampReceived><subject>RE: exception handling</subject><body>

Thanx for the answer.
I did some more checking after my post, and the problem is exactly what you
say, the exception gets lost when it passes c code. I tried to compile the c
code with g++ but too many errors. Can I compile the c code with egcs and
still have exception handling in it?
Any help would be appreciated.

Thanx

Eran
-----Original Message-----
From: Martin v. Loewis [mailto:martin@loewis.home.cs.tu-berlin.de]
Sent: Sunday, April 23, 2000 10:19 PM
To: eranc@mercury.co.il
Cc: linux-gcc@vger.rutgers.edu
Subject: Re: exception handling


&gt; Am having a problem catching exceptions.
&gt; I work with shared libraries, I throw an exception and catch it in the
&gt; same dll. The problem is that it is not caught, instead I get a
&gt; SIGABORT.
&gt; The same code works for me on other Unix platforms, using the native
&gt; compiler.
&gt; Any ideas?

It's hard to tell, with as little information as you gave. A typical
problem is that not all code on the stack is compiled with
-fexceptions; in particular, C code is often not compiled that way.
There could be hundreds of other reasons as well, of course.

Regards,
Martin

</body></email><email><emailId>20000515082401</emailId><senderName>Thomas_Bätzler</senderName><senderEmail>thomas.baetzler@harbinger.com</senderEmail><timestampReceived>2000-05-15 08:24:01-0400</timestampReceived><subject>RE: Strange problem</subject><body>

Hi,

&gt; Junaid Iqbal [SMTP:domdev@sat.net.pk] asked:
&gt; any idea what i m doing wrong?
&gt; 
&gt; #include &lt;stdio.h&gt;
&gt; #include &lt;string.h&gt;
&gt; int main (void){
&gt;   char User[16], Pass[16];
&gt;   GetCookie(&amp;User,&amp;Pass);
&gt; }
&gt; int GetCookie(char **User, char **Pass){
&gt;    bzero(*User,15);
&gt;    bzero(*Pass,15);
&gt;    return(1);
&gt; }
&gt; 
First, do declare the subroutine before you call it.
Either use a prototype, or put the function in the
source before main (). Second, you define main
as returning an int, but you don't return any.
Third, bzero only needs a char *:

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int GetCookie(char *User, char *Pass){
     bzero(User,15);
     bzero(Pass,15);
     return(1);
}

int main (void){
  char User[16], Pass[16];
  GetCookie(User,Pass);
  return( 0 );
}

HTH,
Thomas

</body></email><email><emailId>20000515083007</emailId><senderName>Junaid Iqbal</senderName><senderEmail>domdev@sat.net.pk</senderEmail><timestampReceived>2000-05-15 08:30:07-0400</timestampReceived><subject>Strange problem</subject><body>

Hi,
I m getting segmentaion fault while accessing Pass in the function
GetCookie.
when i try to initialize it to zero its giving seg fault. working fine
on User.
any idea what i m doing wrong?

Thanks.


#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
int main (void){
  char User[16], Pass[16];
  GetCookie(&amp;User,&amp;Pass);
}
int GetCookie(char **User, char **Pass){
   bzero(*User,15);
   bzero(*Pass,15);
   return(1);
}

</body></email><email><emailId>20000515224931</emailId><senderName></senderName><senderEmail>linas</senderEmail><timestampReceived>2000-05-15 22:49:31-0400</timestampReceived><subject>Re: Strange problem</subject><body>

It's been rumoured that Junaid Iqbal said:
&gt; 
&gt; Hi,
&gt; I m getting segmentaion fault while accessing Pass in the function
&gt; GetCookie.
&gt; when i try to initialize it to zero its giving seg fault. working fine
&gt; on User.
&gt; any idea what i m doing wrong?
&gt; 
&gt; Thanks.

You've got too many * and &amp;  
The &amp; is idempotent viz applying it 'a second time' doesn't magically
create a pointer where there is none.

try it yourself:
printf ("its %p %p %p\n", User, &amp;User, &amp;User[0]);

&gt; 
&gt; 
&gt; #include &lt;stdio.h&gt;
&gt; #include &lt;string.h&gt;
&gt; int main (void){
&gt;   char User[16], Pass[16];
&gt;   GetCookie(&amp;User,&amp;Pass);
&gt; }
&gt; int GetCookie(char **User, char **Pass){
&gt;    bzero(*User,15);
&gt;    bzero(*Pass,15);
&gt;    return(1);
&gt; }
&gt; 
&gt; 
&gt; 

</body></email><email><emailId>20000520091404</emailId><senderName>Ralf Baechle</senderName><senderEmail>ralf@uni-koblenz.de</senderEmail><timestampReceived>2000-05-20 09:14:04-0400</timestampReceived><subject>Re: Strange problem</subject><body>

On Mon, May 15, 2000 at 10:24:01AM +0200, Thomas Bätzler wrote:

&gt; First, do declare the subroutine before you call it.
&gt; Either use a prototype, or put the function in the
&gt; source before main (). Second, you define main
&gt; as returning an int, but you don't return any.
&gt; Third, bzero only needs a char *:
&gt; 
&gt; #include &lt;stdio.h&gt;
&gt; #include &lt;string.h&gt;
&gt; 
&gt; int GetCookie(char *User, char *Pass){
&gt;      bzero(User,15);
&gt;      bzero(Pass,15);
&gt;      return(1);
&gt; }
&gt; 
&gt; int main (void){
&gt;   char User[16], Pass[16];
&gt;   GetCookie(User,Pass);
&gt;   return( 0 );
&gt; }

In some C environments it's actually legal for main() to return without
a value; there the C compiler will threat this as equivalent to return 0;.
This is not true for gcc on Linux, there main() will return a random
value.

Some C compilers are fairly paranoid and will complain if you don't
properly declare the arguments for main().

Just a few notes by somebody who has been dealing with portability
problems again and again.

  Ralf

</body></email><email><emailId>20000301172753</emailId><senderName>Kurt Wall</senderName><senderEmail>kwall@hoser.dsl.xmission.com</senderEmail><timestampReceived>2000-03-01 17:27:53-0400</timestampReceived><subject>Re: Creating libraries...</subject><body>

João Borsoi Soares spake unto the assembled, saying:
% Hello list. I´m a begginer developer for Linux, and I would like to know
% if someone could give me a hand creating libraries. I want to create a
% shared library. When programming for Windows I used the _export keyword
% before the classes or functions. How should I do when programming for
% Linux? And what parameters should I pass to compiler?

Are you creating static or shared libraries?

To create a static library, compile your code to object form, then
use the 'ar' utility to create an archive.  For example:

$ gcc -c libfoo.c -o libfoo.o
$ ar rcs libfoo.a libfoo.o
$ nm libfoo.a

The last command will show you libfoo.a's symbol table.

Creating a shared library is a touch more complicated:

1. Compile to object code using gcc's -fPIC option.
2. Dont' use gcc's -fomit-frame-pointer option.
3. Use gcc's -shared and -soname options.
4. Use gcc's -Wl option to pass arguments to the linker, ld.
5. Link explicity against the C library.  

For example:

$ gcc -fPIC -g -c libfoo.c -o libfoo.o
$ gcc -g -shared -Wl,-soname,libfoo.so -o libfoo.so.1.0.0 libfoo.o -lc

This creates a shared library named libfoo.so.1.0.0.  Ideally, you
would want to create a couple of symlinks to it, one for the soname,
libfoo.so, and one for the "standard" library file, libfoo.so.1.

Kurt
-- 
No group of professionals meets except to conspire against the public at large.
		-- Mark Twain

</body></email><email><emailId>20000301195246</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-03-01 19:52:46-0400</timestampReceived><subject>binutils 2.9.5.0.29 is released.</subject><body>

This is the beta release of binutils 2.9.5.0.29 for Linux, which is
based on binutils 2000 0301 plus various changes. It is purely for
Linux, although it has been tested on Solaris/Sparc and Solaris/x86
from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.9.5.0.29 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.9.5.0.29.tar.gz. Source code.
2. binutils-2.9.5.0.27-2.9.5.0.29.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.5.0.29-1.i386.rpm. IA-32 binary RPM for RedHat 6.1.

There is no separate source rpm. You can do

# rpm -ta binutils-2.9.5.0.29.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
03/01/2000


</body></email><email><emailId>20000303163418</emailId><senderName></senderName><senderEmail>freeads78</senderEmail><timestampReceived>2000-03-03 16:34:18-0400</timestampReceived><subject>FreeOnlineads.com advertise your product, service, website for FREE.</subject><body>

Dear Sir/madam

I found your site on the internet and thought you might intrested in 
our FREE service.
Initally let me intoduce ourselves to you as www.freeonlineads.com,
we are a FREE internet Classified service.  Whether you're looking 
to promote, sell, hire or simply let the world know who you are and 
what you or your organization, club or community group is doing, 
we're sure www.freeadsonle.com will make your experience fast, 
easy, fun and absolutly free.

We hope you like the site and find it useful to your business.

Best regards

Sam Lunar
www.freeonlineads.com

</body></email><email><emailId>20000311115254</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-03-11 11:52:54-0400</timestampReceived><subject>Re: Unterminated string or character constant</subject><body>

&gt; Issuing a second make solve the problem, gcc compile the
&gt; file without problem.
&gt; 
&gt; Is this hardware or software problem?

Software is normally deterministic; doing same same thing again and
again should always give the same answer.

That assumption partially relies on the assumption that hardware is
always deterministic. So if you see that doing the same thign a second
time gives a different answer, it could be a hardware problem - gcc
will not, on its own, decide to do something else.

Of course, it might also be a problem of the operating system. For
example, if the file system returns a different file contents the
second time due to a bug in the caching system, the same effect could
occur. If you are using standard, well-tested file systems
(e.g. ext2), this is rather unlikely.

Martin

</body></email><email><emailId>20000313023347</emailId><senderName></senderName><senderEmail>linas</senderEmail><timestampReceived>2000-03-13 02:33:47-0400</timestampReceived><subject>Re: How to create a new directory on c/c++?</subject><body>

It's been rumoured that Fenglou Mao said:
&gt; 
&gt; How to create a new directory on c/c++?

man 2 mkdir
MKDIR(2)            Linux Programmer's Manual            MKDIR(2)

NAME
       mkdir - create a directory

SYNOPSIS
       #include &lt;sys/stat.h&gt;
       #include &lt;sys/types.h&gt;
       #include &lt;fcntl.h&gt;
       #include &lt;unistd.h&gt;

       int mkdir(const char *pathname, mode_t mode);

DESCRIPTION
       mkdir attempts to create a directory named pathname.

&gt; Thanks!
&gt; 
&gt; Sincerely Yours,
&gt; 
&gt; FengLou Mao
&gt; *******************************
&gt; ADD:Mr. FengLou Mao
&gt;     Institute of Physical Chemistry
&gt;     Peking University
&gt;     BeiJing
&gt;     P.R.China
&gt; Tel:86-10-62756833
&gt; Fax:86-10-62751725
&gt; 

</body></email><email><emailId>20000313064129</emailId><senderName>Fenglou Mao</senderName><senderEmail>mao@linux2.ipc.pku.edu.cn</senderEmail><timestampReceived>2000-03-13 06:41:29-0400</timestampReceived><subject>stl question?</subject><body>

Dear all,
     I use STL "set" to store my data(double type), 
I have so many data, I have to out put the data to
 a file when the set reach to 1000000 elements,
then I use the function erase() to clear the set,
but it seemed that the program did not release
the memory it used, who can tell me what's the
problem?

Sincerely Yours,

FengLou Mao
*******************************
ADD:Mr. FengLou Mao
    Institute of Physical Chemistry
    Peking University
    BeiJing
    P.R.China
Tel:86-10-62756833
Fax:86-10-62751725

</body></email><email><emailId>20000313204129</emailId><senderName>"H. Peter Anvin"</senderName><senderEmail>hpa@transmeta.com</senderEmail><timestampReceived>2000-03-13 20:41:29-0400</timestampReceived><subject>Re: Frame/Linux on FreeBSD?</subject><body>

Followup to:  &lt;8aiq4a$98d$1@news.ox.ac.uk&gt;
By author:    njh@physiol.ox.ac.uk (Neil Hoggarth)
In newsgroup: bofh.general
&gt; &gt; 
&gt; &gt; That is slightly incomprehensible. After all, there's usually an ELF  
&gt; &gt; .interp section pointing out which loader to use, and for Linux  
&gt; &gt; executables that's something like (currently) /lib/ld-linux.so.2 -  
&gt; &gt; whatever *BSD has there, I imagine it's different.
&gt; 
&gt; I suspect that we're seeing elements of the "Cathedral vs. Bazaar"
&gt; culture clash here.
&gt; 
&gt; I'm not involved in BSD development (other than as a contented end
&gt; user) but I venture to suggest that "usually" and "something like
&gt; (currently)" are probably not concepts that the FreeBSD architects are
&gt; going to be comfortable basing a solution on.
&gt; 

Perhaps, but it's still better that ALWAYS FAIL.  However, FreeBSD
isn't the only OS that has these problems.  Linux has these problems
in dealing with libc5 vs libc6 binaries, for example, which was the
main reason the libc5-&gt;6 jump was a *much* bigger mess than the
libc4-&gt;5 one was (there libraries were clearly partitioned by file
format.)

We probably should have something like a .system section that would
unambiguously resolve these kinds of things, even for libraries (which
obviously don't have .interp) and static binaries.  Although it's not
going to happen overnight, getting this into binutils now should avoid
yet another mess next time something like this needs to happen.

	  -hpa
-- 
&lt;hpa@transmeta.com&gt; at work, &lt;hpa@zytor.com&gt; in private!
"Unix gives you enough rope to shoot yourself in the foot."

</body></email><email><emailId>20000310105106</emailId><senderName>"Gabor Z. Papp"</senderName><senderEmail>gzp@gmx.net</senderEmail><timestampReceived>2000-03-10 10:51:06-0400</timestampReceived><subject>Unterminated string or character constant</subject><body>

When I run more than 2-3 gcc paralell on my i486
Linux 2.3.42
glibc 2.1.2
gcc 2.95.2

I often receive this error:

gcc -Wall -c -s -O3 -fomit-frame-pointer -fstrength-reduce -fPIC -DUNIX -DHAS_POPEN  date2bin.c
In file included from /usr/include/bits/string2.h:1025,
                 from /usr/include/string.h:346,
                 from date2bin.c:21:
/usr/include/stdlib.h:664: unterminated string or character constant
/usr/include/stdlib.h:664: possible real start of unterminated constant
/usr/include/stdlib.h:644: unterminated `#if' conditional
make: *** [date2bin.o] Error 1

Issuing a second make solve the problem, gcc compile the
file without problem.

Is this hardware or software problem?

</body></email><email><emailId>20000314082102</emailId><senderName>Thomas_Bätzler</senderName><senderEmail>thomas.baetzler@harbinger.com</senderEmail><timestampReceived>2000-03-14 08:21:02-0400</timestampReceived><subject>RE: running multiple files simultaneously</subject><body>

Hi,

you wrote:
&gt;   I was given a unique,yet seemingly simple problem by my friend &amp; it goes
&gt; 
&gt; 
Your friend, the lecturer? :-)

&gt; this way- Create multiple files using C each of which will either read or 
&gt; write data into a common data file.This data file will be accessed by
&gt; these 
[...]
&gt; segmentation fault.How can I overcome this?
&gt; 
W. Richard Stevens, Unix Network Programming. Chapter 3 should have
all you need :-)

HTH,
Thomas

</body></email><email><emailId>20000314144644</emailId><senderName>"Davide Libenzi"</senderName><senderEmail>davidel@maticad.it</senderEmail><timestampReceived>2000-03-14 14:46:44-0400</timestampReceived><subject>Re: Inline assembly for x86?</subject><body>

This is a good doc about gcc asm inlining.


Davide.

--
Feel free, feel Debian !



["gcc-asm.txt" (text/plain)]

        A Brief Tutorial on GCC inline asm (x86 biased)
                colin@nyx.net, 20 April 1998

I am a great fan of GCC's inline asm feature, because there is no need to
second-guess or outsmart the compiler.  You can tell the compiler what
you are doing and what you expect of it, and it can work with it and
optimize your code.

However, on a convoluted processor like the x86, describing just what is
going on can be quite a complex job.  In the interest of a faster kernel
through appropriate usage of this powerful tool, here is an introduction
to its use.

* Extended asm, an introduction.

In a nice clean register-register RISC architecture, accessing an
occasional "foo" instruction is quite simple.  You just write:

  asm("foo %1,%2,%0" : "=r" (output) : "r" (input1), "r" (input2));

The part before the first colon is very much line the semi-standard
asm() feature that has been in many C compilers since the K&amp;R days.
The string is pasted into the compiler's assembly output at the
current location.

However, GCC is rather cleverer.  What will actually appear in the output
of "gcc -O -S foo.c" (a file named "foo.s") is:

#APP
        foo r17,r5,r9
#NO_APP

The "#APP" and "#NO_APP" parts are instructions to the assembler that
briefly put it into normal operating mode, as opposed to the special
high-speed "compiler output" mode that turns off every feature that
the compiler doesn't use as well as a lot of error-checking.  For our
purposes, it's convenient becuase it highlights the part of the code
we're interested in.

Between, you will see that the "%1" and so forth have turned into
registers.  This is because GCC replaced "%0", "%1" and "%2"
with registers holding the first three arguments after the colon.

That is, r17 holds input1, r5 holds input2, and r9 holds output.

It's perfectly legal to use more complex expressions like:

  asm("foo %1,%2,%0" : "=r" (ptr-&gt;vtable[3](a,b,c)-&gt;foo.bar[baz]) :
      : "r" (gcc(is) + really(damn-&gt;cool)), "r" (42));

GCC will treat this just like:

register int t0, t1, t2;

  t1 = gcc(is) + really(damn-&gt;cool);
  t2 = 42;
  asm("foo %1,%2,%0" : "=r" (t0) : "r" (t1), "r" (t2));
  ptr-&gt;vtable[3](a,b,c)-&gt;foo.bar[baz] = t0;

The general form of an asm() is

  asm( "code" : outputs : inputs : clobbers);

Within the "code", %0 refers to the first argument (usually an
output, unless there are no outputs), %1 to the second, and
so forth.  It only goes up to %9.  Note that GCC prepends a
tab and appends a newline to the code, so if you want to include
multi-line asm (which is legal) and you want it to look nice
in the asm output, you should separate lines with "\n\t".
(You'll see lots of examples of this in the Linux source.)
It's also legal to use ";" as a separator to put more than one
asm statement on a line.

There are option letters that you can put between the % and the digit
to print the operand specially; more on this later.

Each output or input in the comma-separated list has two parts,
"constraints" and (value).  The (value) part is pretty straightforward.
It's an expression.  For outputs, it must be an lvalue, i.e. something
that is legal to have on the left side of an assignment.

The constraints are more interesting.  All outputs must be marked with
"=", which says that this operand is assigned to.  I'm not sure why this
is necessary, since you also have to divide up outputs and inputs with
the colon, but I'm not inclined to make a fuss about it, since it's easy
to do once you know.

The letters that come after that give permitted operands.
There are more choices than you might think.  Some depend on the
processor, but there are a few that are generic.

"r", as example "rm" means a register or memory.  "ri" means
a register or an immediate value.  "g" is "general"; it can be
anything at all.  It's usually equivalent to "rim", but your
processor may have even more options that are included.
"o" is like "m", but "offsettable", meaning that you can add a small
offset to it.  On the x86, all memory operands are offsettable, but
some machines don't support indexing and displacement at the same
time, or have something like the 680x0's autoincrement addressing
mode that doesn't support a displacement.

Capital letters starting with "I" are usually assigned to immediate
values in a certain range.  For example, a lot of RISC machines
allow either a register or a short immediate value.  If our machine
is like the DEC Alpha, and allows a register or a 16-bit immediate,
you could write

  asm("foo %1,%2,%0" : "=r" (output) : "r" (input1), "rI" (input2));

and if input2 were, say, 42, the compiler would use an immediate
constant in the instruction.

The x86-specific constraints are defined later.

* A few notes about inputs

An input may be a temporary copy, but it may not be.  Unless you
tell GCC that you are going to modify that location (described later
in "equivalence constraints"), you must not alter any inputs.

GCC may, however, elect to place an output in the same register as an
input if it doesn't need the input value any more.  You must not make
assumptions either way.  If you need to have it one way or the other,
there are ways (described later) to tell GCC what you need.

The rule in GCC's inline asm is, say what you need and then get out
of the optimizer's way.

* x86 assembly code

The GNU tools used in Linux use an AT&amp;T-developed assembly syntax that
is different from the Intel-developed one that you see in a lot of
example code.  It's a lot simpler, actually.  It doesn't have any of
the DWORD PTR stuff that the Intel syntax requires.

The most significant difference, however, is a major one and easy to get
confused by.  While Intel uses "op dest,src", AT&amp;T syntax uses
"op src,dest".  DON'T FORGET THIS.  If you're used to Intel syntax,
this can take quite a while to get used to.

The easy way to know which flavour of asm syntax you're reading is to
look for all the % synbols.  AT&amp;T names the registers %eax, %ebx, etc.
This avoids the need for a kludge like putting _ in front of all the
function and variable names to avoid using perfectly good C names
like esp.  It's easy enough to read, but don't forget it when writing.

The other major difference is that the operand size is clear from the
instruction.  You don't have just "inc", you have "incb", "incw" and
"incl" to increment 8, 16 or 32 bits.  If the size is clear from the
operands, you can just write "inc", (e.g. "inc %eax"), but if it's a
memory operand, rather than writing "inc DWORD PTR foo" you just wrote
"incl foo".  "inc foo" is an error; the assembler doesn't try to keep
track of the type of anything.  Writing "incl %al" is an error which
the assembler catches.

Immediate values are written with a leading $.  Thus, "movl foo,%eax"
copies the contents of memory location foo into %eax.  "movl $foo,%eax"
copies the address of foo.  "movl 42,%eax" is a fetch from an absolute
address.  "movel $42,%eax" is an immediate load.

Addressing modes are written offset(base,index,scale).  You may leave
out anything irrelevant.  So (%ebx) is legal, as is -44(%ebx,%eax),
which is equivalent to -44(%ebx,%eax,1).  Legal scales are 1, 2 4 and 8.

* Equivalence constraints

Sometimes, especially on two-address machines like the x86, you need to
use the same register for output and for input.  Although if you look
into the GCC documentation, you'll see a useful-looking "+" constraint
character, this isn't available to inline asm.  What you have to do
instead is to use a special constraint like "0":

  asm("foo %1,%0" : "=r" (output) : "r" (input1), "0" (input2));

This says that input2 has to go in the same place as the output, so %2
and %0 are the same thing.  (Which is why %2 isn't actually mentioned
anywhere.)  Note that it is perfectly legal to have different variables
for input and output even though they both use the same register.  GCC
will do any necessary copying to temporary registers for you.

* Constraints on the x86

The i386 has *lots* of register classes, designed for anything remotely
useful.  Common ones are defined in the "constraints" section of the
GCC manual.  Here are the most useful:

g - general effective address
m - memory effective address
r - register
i - immediate value, 0..0xffffffff
n - immediate value known at compile time.
    ("i" would allow an address known only at link time)

But there are some i386-specific ones described in the processor-specific
part of the manual and in more detail in GCC's i386.h:

q - byte-addressible register (eax, ebx, ecx, edx)
A - eax or edx
a, b, c, d, S, D - eax, ebx, ..., esi, edi only

I - immediate 0..31
J - immediate 0..63
K - immediate 255
L - immediate 65535
M - immediate 0..3 (shifts that can be done with lea)
N - immediate 0..255 (one-byte immediate value)
O - immedaite 0..32

There are some more for floating-point registers, but I won't go into
those.  The very special cases like "K" are mostly used inside GCC in
alternative code sequences, providing a special-case way to do something
like ANDing with 255.

But something like "I" is useful, for example the x86 rotate left:

  asm("roll %1,%0" : "=g" (result) : "cI" (rotate), "0" (input));

(See the section on "x86 assembly syntax" if you wonder why the extra
"l" is on "rol".)

* Advanced constraints

In the GCC manual, constraints and so on are described in most detail
in the section on writing machine descriptions for ports.  GCC, not
surprisingly, uses the same constaints mechanism internally to compile
C code.  Here's a summary.

= has already been discussed, to mark an output.  No, I don't know why
  it's needed in inline asm, but it's not worth "fixing".

+ is described in the gcc manual, but is not legal in inline
  asm.  Sorry.

% says that this operand and the next one may be switched at the
  compiler's convenience; the arguments are commutative.  Many operations
  (+, *, &amp;, |, ^) have this property, but the options permitted in the
  instruction set may not be as general.  For example, on a RISC machine
  which lets the second operand be an immediate value (in the "I" range),
  you could specify an add instruction like:

    asm("add %1,%2,%0" : "=r" (output) : "%r" (input1), "rI" (input2));

, separates a list of alternative constraints.  Each input and output
  must have the same length list of alternatives, and one element of
  the list is chosen.  For example, the x86 permits register-memory and
  memory-register operations, but not memory-memory.  So an add could
  be written as:

    asm("add %1,%0" : "=r,rm" (output) : "%g,ri" (input1), "0,0" (input2));

  This says that if the output is a register, input1 may be anything,
  but if the output is memory, the input may only be a register or an
  immediate value.  And input2 must be in the same place as the output,
  although you can swap things and place input1 there instead.

  If there are multiple options listed and the compiler has no preference,
  it will choose the first one.  Thus, if there's a minor difference
  in timing or some such, list the faster one first.

? in one alternative says that an alternative is discouraged.  This is
  important for compiler-writers who want to encourage the fastest code,
  but is getting pretty esoteric for inline asm.

&amp; says that an output operand is written to before the inputs are
  read, so this output must not be the same register as any input.
  Without this, gcc may place an output and an input in the same register
  even if not required by a "0" constraint.  This is very useful, but
  is mentioned here because it's specific to an alternative.  Unlike
  = and %, but like ?, you have to include it with each alternative to
  which it applies.

  Note that there is no way to encode more complex information, like
  "this output may not be in the same place as *that* input, but may
  share a ragiater with that *other* input".  Each output either may
  share a register with any input, or with none.

  In inline asm, you usually specify this with every alternative, since
  you can't chnage the order of operations depending on the option selected.
  In GCC's internal code generation, there are provisions for producing
  different code depending on the register alternative chosen, but you
  can't do that with inline asm.

  One place you might use it is when you have the possibility of the
  output overlapping with input two, but not input one.  E.g.

    asm("foo %1,%0; bar %2,%0" : "=r,&amp;r" (out) : "r,r" (in1), "0,r" (in2));

  This says that either in2 is in the same register as out, or nothing is.
  However, with more operands, the number of possibilities quickly
  mushrooms and GCC doesn't cope gracefully with large numbers of
  alternatives.

* Clobbers

Sometimes an instruction knocks out certain specific registers.
The most common example of this is a function call, where the called
function is allowed to do whatever it likes with some registers.

If this is the case, you can list specific registers that get
clobbered by an operation after the inputs.  The syntax is
not like constraints, you just provide a comma-separated list of
registers in string form.  On the 80x86, they're "ax", "bx",
"si" "di", etc.

There are two special cases for clobbered values.  One is "memory",
meaning that this instruction writes to some memory (other than a
listed output) and GCC shouldn't cache memory values in registers across
this asm.  An asm memcpy() implementation would need this.
You do *not* need to list "memory" just because outputs are in
memory; gcc understands that.

The second is "cc".  It's not necessary on all machines, and I havem't
figured it out for the x86 (I don't think it is), but it's always legal
to specify, and means that the instructions mess up the condition codes.

Note that GCC will not use a clobbered register for inputs or outputs.
GCC 2.7 would let you do it anyway, specifying an input in class
"a" and saying that "ax" is clobbered.  GCC 2.8 and egcs are getting
pickeri, and complaining that there are no free registers in class
"a" available.  This is not the way to do it.  If you corrput an input
register, include a dummy output in the same register, the value of which
is never used.  E.g.

  int dummy;
  asm("munge %0" : "=r" (dummy) : "0" (input));

* Temporary registers

People also sometimes erroneously use clobbers for temporary registers.
The right way is to make up a dummy output, and use "=r" or "=&amp;r"
depending on the permitted overlap with the inputs.  GCC allocates a
register for the dummy value.  The difference is that GCC can pick a
convenient register, so it has more flexibility.

* const and volatile

There are two optimization hints that you can give to an asm statement.

asm volatile(...) statements may not be deleted or significantly reordered;
the volatile keyword says that they do something magic that the compiler
shouldn't play with too much.

GCC will delete ordinary asm() blocks if the outputs are not used,
and will reorder them slightly to be convenient to where the outputs
are.
(asm blocks with no outputs are assumed to be volatile by default.)

asm const() statements are assumed to produce outputs that depend only on
the inputs, and thus can be subject to common subexpression optimization
and can be hoisted out of loops.  The most common example of an output
that does *not* depend only on an input is a pointer that is fetched.
*p may change from time to time even if p does not change.  Thus, an
asm block that fetches from a pointer should not include a const.

An example of something that is good is a coprocessor instruction to
compute sin(x).  If GCC knows that two calls have the same value of
x, it can compute sin(x) only once.

For example, compare:

  int foo(int x);
  {
    int i, y, total;

    total = 0;
    for (i = 0; i &lt; 100; i++) {
      asm volatile("foo %1,%0" : "=r" (y) : "g" (x));
      total += y;
    }
    return total;
  }

then try changing that to "const" after the asm.
The code (on an x86) looks like:

func1:
        xorl %ecx,%ecx
        pushl %ebx
        movl %ecx,%edx
        movl 8(%esp),%ebx
        .align 4
.L7:
#APP
        foo %ebx,%eax
#NO_APP
        addl %eax,%ecx
        incl %edx
        cmpl $99,%edx
        jle .L7
        movl %ecx,%eax
        popl %ebx
        ret

which then changes to (in the const case):

func2:
        xorl %edx,%edx
#APP
        foo 4(%esp),%ecx
#NO_APP
        movl %edx,%eax
        .align 4
.L13:
        addl %ecx,%edx
        incl %eax
        cmpl $99,%eax
        jle .L13
        movl %edx,%eax
        ret

I'm still not completely thrilled with the code (why put the loop
counter in %eax instead of total, which gets returned), but you can
see how it improves.

* Alternate keywords

__asm__() is a legal alias for asm(), and it is legal (and produces no
warnings) even when in strict-ANSI mode or when warning about non-portable
constructs.  Otherwise, it is equivalent.

* Output substitutions

Sometimes you want to include a value in an asm statement in an unusual way.
For example, you could use the lea instruction to do something hairy like

  asm("lea %1(%2,%3,1&lt;&lt;%4),%0" : "=r" (out)
      : "%i" (in1), "r" (in2), "r" (in3), "M" (logscale));

this looks like a way to generate a legal lea instruction with all the
possible bells and whistles.  There's only one problem.  When GCC
substitutes the immedaites "in1" and "logscale", it's going to produce
something like:

        lea $-44(%ebx,%eax,1&lt;&lt;$2),%ecx

which is a syntax error.  The $ on the constants are not useful in
this context.  So there are modifier characters.  The one
applicable in this context is "c", which means to omit the usual
immediate value information.  The correct asm is

  asm("lea %c1(%2,%3,1&lt;&lt;%c4),%0" : "=r" (out)
      : "%i" (in1), "r" (in2), "r" (in3), "M" (logscale));

which will produce

        lea -44(%ebx,%eax,1&lt;&lt;2),%ecx

as desired.  There are a few others mentioned in the GCC manual as generic:

%c0 substitutes the immediate value %0, but without the immediate syntax.
%n0 substitutes like %c0, but the negated value.
%l0 substitutes lile %c0, but with the syntax expected of a jump target.
    (This is usually the same as %c0.)

And then there are the x86-specific ones.  These are, unfortunately, only
listed in the i386.h header file in the GCC source (config/i386/i386.h),
so you havr to dig a bit for them.

%k0 prints the 32-bit form of an operand.  %eax, etc.
%w0 prints the 16-bit form of an operand.  %ax, etc.
%b0 prints the 8-bit form of an operand.  %al, etc.
%h0 prints the high 8-bit form of a register.  %ah, etc.
%z0 print opcode suffix coresponding to the operand type, b, w or l.

By default, when %0 prints a register in the form corresponding to
the argument size.  E.g. asm("inc %0" : "=r" (out) : "0" (in))
will print as "inc %al", "inc %ax" or "inc %eax" depending
on the type of "out".

For example, byte-swapping on a non-486:

  asm("xchg %b0,%h0; roll $16,%0; xchg %b0,%h0" : "=q" (x) : "=" (x));

This says that x must be in a byte-addressible register and proceeds
to swap the bytes to big-endian form.

It's legal to use the %w and %b forms on objects that aren't
registers, it just makes no difference.  Using %b and %h on
non-byte addressible registers tends to make the compiler abort,
so don't do that.

%z is rather cool.  For example, consider the following code:
  #define xchg(m, in, out)      \
    asm("xchg%z0 %2,%0" : "=g" (*(m)), "=r" (out) : "1" (in))

  int
  bar(void *m, int x)
  {
    xchg((char *)m, (char)x, x);
    xchg((short *)m, (short)x, x);
    xchg((int *)m, (int)x, x);
    return x;
  }

This produces, as assembly output,

.globl bar
        .type    bar,@function
bar:
        movl 4(%esp),%eax
        movb 8(%esp),%dl
#APP
        xchgb %dl,(%eax)
        xchgw %dx,(%eax)
        xchgl %edx,(%eax)
#NO_APP
        movl %edx,%eax
        ret

(Re-using x is a way to make sure that nothing got optimized away.)

It's not really needed here because the size of the %2 register
lets you get away with just "xchg", but there are situations
where it's nice to have an operand size.

* Extra % patterns

Some % substitutions don't specify an argument.  The most common
one is %%, which comes out as a single %.

The second is %=, which generates a unique number for each asm()
block.  (Each time it is used if inlined or used in a macro.)
This can be used for temporary labels and so on.

* Examples

Some code that was in include/asm-i386/system.h:

#define _set_tssldt_desc(n,addr,limit,type) \
__asm__ __volatile__ ("movw %3,0(%2)\n\t" \
        "movw %%ax,2(%2)\n\t" \
        "rorl $16,%%eax\n\t" \
        "movb %%al,4(%2)\n\t" \
        "movb %4,5(%2)\n\t" \
        "movb $0,6(%2)\n\t" \
        "movb %%ah,7(%2)\n\t" \
        "rorl $16,%%eax" \
        : "=m"(*(n)) : "a" (addr), "r"(n), "ri"(limit), "i"(type))

It's obvious that the writer didn't know how to take optimal advantage of
this (admittedly complex, but x86 addressing *is* complex) facility.
This could be rewritten to use any register instead of %eax:

#define _set_tssldt_desc(n,addr,limit,type) \
__asm__ __volatile__ ("movw %w3,0(%2)\n\t" \
        "movw %w1,2(%2)\n\t" \
        "rorl $16,%1\n\t" \
        "movb %b1,4(%2)\n\t" \
        "movb %4,5(%2)\n\t" \
        "movb $0,6(%2)\n\t" \
        "movb %h1,7(%2)\n\t" \
        "rorl $16,%1" \
        : "=m"(*(n)) : "q" (addr), "r"(n), "ri"(limit), "ri"(type))

You notice here that *n is listed as an output, so GCC knows that it's
modified, but actually addressing it is done relative to n as an
input register everywhere because of the need to compute an offset.

The problem is that there is no syntactic way to encode an
offset from a given address.  If the address is "40(%eax)" then
an offset of 2 can be made by prepending "2+" to it.  But if
the address is "(%eax)" then "2+(%eax)" is not valid.
Tricks like "2+0" fall flat because "040" is taken as octal
and gets translated into 32.

BUT THERE'S NEWS (19 April 1998): gas will actually Do The Right Thing
with "2+(%eax)", just emit a warning.  Having seen this, a gas maintainer
(Alan Modra) decided to make the warning go away in this case, so in
some near future version you will be able to do it.

With this fix (or putting up with the warning), you could
write the above as:

#define _set_tssldt_desc(n,addr,limit,type) \
__asm__ __volatile__ ("movw %w2,%0\n\t" \
        "movw %w1,2+%0\n\t" \
        "rorl $16,%1\n\t" \
        "movb %b1,4+%0\n\t" \
        "movb %3,5+%0\n\t" \
        "movb $0,6+%0\n\t" \
        "movb %h1,7+%0\n\t" \
        "rorl $16,%1" \
        : "=o"(*(n)) : "q" (addr), "ri"(limit), "i"(type))

The "o" constraint is just like "m", except that it's "offstable";
adding a small value to it leaves a valid address.  On the x86,
there is no distinction, so it's not really necessary, but on the
68000, for example, you can't add an offset to a postincrement
addressing mode.

If neither the warning nor waiting is acceptable, a fix is to list each
possible offset as a different output (here we're using the fact that
n is a char *):

__asm__ __volatile__ ("movw %w7,%0\n\t" \
        "movw %w6,%1\n\t" \
        "rorl $16,%6\n\t" \
        "movb %b6,%2\n\t" \
        "movb %b8,%3\n\t" \
        "movb $0,%4\n\t" \
        "movb %h6,%5\n\t" \
        "rorl $16,%6" \
        : "=m"(*(n)), \
          "=m"((n)[2]), \
          "=m"((n)[4]), \
          "=m"((n)[5]), \
          "=m"((n)[6]), \
          "=m"((n)[7]) \
       : "q" (addr), "g"(limit), "iqm"(type))

Although, as you can see, this gets a bit ugly when you have lots of offsets,
but it works just the same.

* Conclusion

I hope this has been of use to some folks.  GCC's inline asm features
are really cool becuase you can just do the little bit that you want
and let the compiler optimize the rest.

This has the unfortunate side effect that you have to learn how to
explain to the compiler what's going on.  But it's worth it, really!



</body></email><email><emailId>20000312002651</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-03-12 00:26:51-0400</timestampReceived><subject>Re: How to create a new directory on c/c++?</subject><body>



On Sun, 12 Mar 2000, Fenglou Mao wrote:

&gt; How to create a new directory on c/c++?
&gt; Thanks!
&gt; 
&gt; Sincerely Yours,
&gt; 
&gt; FengLou Mao
&gt; *******************************
&gt; ADD:Mr. FengLou Mao
&gt;     Institute of Physical Chemistry
&gt;     Peking University
&gt;     BeiJing
&gt;     P.R.China
&gt; Tel:86-10-62756833
&gt; Fax:86-10-62751725
&gt; 
MKDIR(2)	    Linux Programmer's Manual		 MKDIR(2)


NAME
       mkdir - create a directory

SYNOPSIS
       #include &lt;sys/stat.h&gt;
       #include &lt;sys/types.h&gt;
       #include &lt;fcntl.h&gt;
       #include &lt;unistd.h&gt;

       int mkdir(const char *pathname, mode_t mode);

DESCRIPTION
       mkdir attempts to create a directory named pathname.


man 2 mkdir

to see how it ends.  I _will_ get you to read the fine manual :-).

If you have pinfo, it does a nice job showing libc.info, which has a
fine description also.  info libc will do in a pinch :-)

http://aptiva.caltech.edu/links/rpm/redhat-6.0/RPMS/i386/pinfo-0.5.9-1.i386.rpm
or contrib at any slackware mirror. 
 
Lawson

Installation is performed in the reverse order of removal.
                    - British Leyland shop manual
 




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000313073804</emailId><senderName>"Hari Kesavan"</senderName><senderEmail>c_hari_sma@hotmail.com</senderEmail><timestampReceived>2000-03-13 07:38:04-0400</timestampReceived><subject>running multiple files simultaneously</subject><body>



Dear all,
  I was given a unique,yet seemingly simple problem by my friend &amp; it goes 
this way- Create multiple files using C each of which will either read or 
write data into a common data file.This data file will be accessed by these 
files. Depending on the data read,each of the files should obtain an output 
for the next frame.This output should then be stored back in the data file 
for the next frame to be processed.
   I used 'fread', 'fwrite','fopen', 'fclose' for basic input/output 
operations.I created 4 such files &amp; a data file.Each file was compiled on a 
different terminal in Linux 6.1.When I executed it I was faced with a 
segmentation fault.How can I overcome this?
Yours truly,
Hari
______________________________________________________
Get Your Private, Free Email at http://www.hotmail.com

</body></email><email><emailId>20000311203624</emailId><senderName></senderName><senderEmail>ddade</senderEmail><timestampReceived>2000-03-11 20:36:24-0400</timestampReceived><subject>Inline assembly for x86?</subject><body>

Hello all,

Does anyone know if gcc supports in-line assembly, and if so, give a
pointer to some documentation?

Thank you,

Don

</body></email><email><emailId>20000314033649</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-03-14 03:36:49-0400</timestampReceived><subject>Re: Inline assembly for x86?</subject><body>

Yes, it does.  info gcc -&gt; C language extensions -&gt; extended asm
info -f as should be helpful, too:  as is the program that is actually
going to assemble your inline assembly coding.

On Sat, 11 Mar 2000 ddade@digitalstatecraft.com wrote:

&gt; Hello all,
&gt; 
&gt; Does anyone know if gcc supports in-line assembly, and if so, give a
&gt; pointer to some documentation?
&gt; 
&gt; Thank you,
&gt; 
&gt; Don
&gt; 
Lawson
	  &gt;&lt; Microsoft free environment

This mail client runs on Wine.  Your mileage may vary.

---cut here---





________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000314104200</emailId><senderName>Qazi Sami ur Rahman</senderName><senderEmail>qsami@brain.net.pk</senderEmail><timestampReceived>2000-03-14 10:42:00-0400</timestampReceived><subject>Re: Inline assembly for x86?</subject><body>

ddade@digitalstatecraft.com wrote:
&gt; 
&gt; Hello all,
&gt; 
&gt; Does anyone know if gcc supports in-line assembly, and if so, give a
&gt; pointer to some documentation?
&gt; 
&gt; Thank you,
&gt; 
&gt; Don

Try	http://www.rt.e-technik.tu-darmstadt.de/~georg/djgpp/djgpp_asm.html
-- 
Qazi Sami ur Rahman &lt;qsami@brain.net.pk&gt;
---

</body></email><email><emailId>20000314104532</emailId><senderName>Qazi Sami ur Rahman</senderName><senderEmail>qsami@brain.net.pk</senderEmail><timestampReceived>2000-03-14 10:45:32-0400</timestampReceived><subject>Re: Inline assembly for x86?</subject><body>

ddade@digitalstatecraft.com wrote:
&gt; 
&gt; Hello all,
&gt; 
&gt; Does anyone know if gcc supports in-line assembly, and if so, give a
&gt; pointer to some documentation?
&gt; 
&gt; Thank you,
&gt; 
&gt; Don
Sorry my send button is a little quicker. Try this one too:
http://www.castle.net/~avly/djasm.html

Bye.
-- 
Qazi Sami ur Rahman &lt;qsami@brain.net.pk&gt;
---

</body></email><email><emailId>20000314012100</emailId><senderName>Kurt Wall</senderName><senderEmail>kwall@xmission.com</senderEmail><timestampReceived>2000-03-14 01:21:00-0400</timestampReceived><subject>Re: running multiple files simultaneously</subject><body>

Hari Kesavan spake unto the assembled, saying:
% 
% Dear all,
%   I was given a unique,yet seemingly simple problem by my friend &amp; it goes 
% this way- Create multiple files using C each of which will either read or 
% write data into a common data file.This data file will be accessed by these 
% files. Depending on the data read,each of the files should obtain an output 
% for the next frame.This output should then be stored back in the data file 
% for the next frame to be processed.
%    I used 'fread', 'fwrite','fopen', 'fclose' for basic input/output 
% operations.I created 4 such files &amp; a data file.Each file was compiled on a 
% different terminal in Linux 6.1.When I executed it I was faced with a 
% segmentation fault.How can I overcome this?

Post the smallest possible compilable program that illustrates the
problem.  How can we solve a problem like this without any code?
In the meantime, look for buffer overflows and accesses of uninitialized
pointers.

Kurt
-- 
You will lose an important tape file.

</body></email><email><emailId>20000314035040</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-03-14 03:50:40-0400</timestampReceived><subject>Re: running multiple files simultaneously</subject><body>

There is no magic fix for a segment fault.  In this case it is caused by
a program error(s), and the way to overcome it is to remove the error(s)
from the program(s).  You might find gdb helpful in finding where the
program is erring.  I can't tell what you are trying to do, or why you
are trying to do it, but if you expect that a shared file has any
attributes of its own such as file position, you are going to be
disappointed with fread and fwrite.  Each program has its own idea of
what is the current position of a file it accesses.  Of course, another
program that writes to that file might disrupt that somewhat, but
usually not in any constructive or useful way.

On Mon, 13 Mar 2000, Hari Kesavan wrote:

&gt; 
&gt; 
&gt; Dear all,
&gt;   I was given a unique,yet seemingly simple problem by my friend &amp; it
goes 
&gt; this way- Create multiple files using C each of which will either read
or 
&gt; write data into a common data file.This data file will be accessed by
these 
&gt; files. Depending on the data read,each of the files should obtain an
output 
&gt; for the next frame.This output should then be stored back in the data
file 
&gt; for the next frame to be processed.
&gt;    I used 'fread', 'fwrite','fopen', 'fclose' for basic input/output 
&gt; operations.I created 4 such files &amp; a data file.Each file was compiled
on a 
&gt; different terminal in Linux 6.1.When I executed it I was faced with a 
&gt; segmentation fault.How can I overcome this?
&gt; Yours truly,
&gt; Hari
&gt; ______________________________________________________
&gt; Get Your Private, Free Email at http://www.hotmail.com
&gt; 
Lawson
	  &gt;&lt; Microsoft free environment

This mail client runs on Wine.  Your mileage may vary.

---cut here---





________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagh.

</body></email><email><emailId>20000312035314</emailId><senderName>Fenglou Mao</senderName><senderEmail>mao@linux2.ipc.pku.edu.cn</senderEmail><timestampReceived>2000-03-12 03:53:14-0400</timestampReceived><subject>How to create a new directory on c/c++?</subject><body>

How to create a new directory on c/c++?
Thanks!

Sincerely Yours,

FengLou Mao
*******************************
ADD:Mr. FengLou Mao
    Institute of Physical Chemistry
    Peking University
    BeiJing
    P.R.China
Tel:86-10-62756833
Fax:86-10-62751725

</body></email><email><emailId>20000314014228</emailId><senderName>Fenglou Mao</senderName><senderEmail>mao@linux2.ipc.pku.edu.cn</senderEmail><timestampReceived>2000-03-14 01:42:28-0400</timestampReceived><subject>where is ifstream man pages in linux?</subject><body>

man ifstream no use.

Sincerely Yours,

FengLou Mao
*******************************
ADD:Mr. FengLou Mao
    Institute of Physical Chemistry
    Peking University
    BeiJing
    P.R.China
Tel:86-10-62756833
Fax:86-10-62751725

</body></email><email><emailId>20000328132413</emailId><senderName>Jens</senderName><senderEmail>axon@isl.is</senderEmail><timestampReceived>2000-03-28 13:24:13-0400</timestampReceived><subject>template problem</subject><body>

Hi

I'll keep this brief for now as this should be trivial to solve (I
hope). If this is in a FAQ please point me to it.

I'm having trouble linking my code if I use templates. I get undefined
references to the methods I use from the template.

What am I missing? An example that works (and links) would be nice.

I'm using egcs 2.91.66

Thanks,
Jens
axon@isl.is

</body></email><email><emailId>20000314235628</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-03-14 23:56:28-0400</timestampReceived><subject>Re: where is ifstream man pages in linux?</subject><body>

&gt; man ifstream no use.

read stroustrup.

Martin

</body></email><email><emailId>20000314231742</emailId><senderName>root</senderName><senderEmail>rosen054@tc.umn.edu</senderEmail><timestampReceived>2000-03-14 23:17:42-0400</timestampReceived><subject>ld error</subject><body>

On an Alpha LX164, 600mhz, RedHat6.0 with rawhide "enhancements", and
with egcs-1.1.2-30, binutils-2.9.5.0.29, glibc-2.1.3-14, I  now get
errors of the form " /usr/bin/ld can"t find __start, defaulting to ..."
when compiling kernels, binutils, Xfree.  Same when I downgrade to the
tools on the distribution cd.  What is happening, and what can I do to
correct?
Thanks,
Martin Rosenstein

</body></email><email><emailId>20000315174909</emailId><senderName>"T. Warner"</senderName><senderEmail>tw@dma.org</senderEmail><timestampReceived>2000-03-15 17:49:09-0400</timestampReceived><subject>Re: where is ifstream man pages in linux?</subject><body>

On Wed, 15 Mar 2000, Martin v. Loewis wrote:

&gt; &gt; man ifstream no use.
&gt; 
&gt; read stroustrup.

And read his Errata for that book. Martin can attest to my misdirected
questions due to errors in the book. They can be downloaded from his
website.

C++ man pages are a great idea though... ! If only I had more time...
*sigh* Hmm... another colaborative project idea!

&gt; 
&gt; Martin
&gt; 

-- 
Todd Warner
====================================================
            mailto:taw@pobox.com               
==================================================== 

</body></email><email><emailId>20000328111014</emailId><senderName>Florian Weimer</senderName><senderEmail>florian.weimer@rus.uni-stuttgart.de</senderEmail><timestampReceived>2000-03-28 11:10:14-0400</timestampReceived><subject>backtrace_symbols</subject><body>

Is it true that backtrace_symbols returns symbols only for functions
exported by shared libraries? (glibc 2.1.3 on Linux)

Is there similar functionality which could be used for other functions
for which debugging information exists but whch aren't exportet?

-- 
Florian Weimer 	                  Florian.Weimer@RUS.Uni-Stuttgart.DE
University of Stuttgart           http://cert.uni-stuttgart.de/
RUS-CERT                          +49-711-685-5973/fax +49-711-685-5898
http://ca.uni-stuttgart.de:11371/pks/lookup?op=get&amp;search=0xC06EC3B5

</body></email><email><emailId>20000328135537</emailId><senderName></senderName><senderEmail>raybry</senderEmail><timestampReceived>2000-03-28 13:55:37-0400</timestampReceived><subject>query on documentation</subject><body>



Is there somehwere that the various gcc __builtin functions are documented?

There is no info in "info gcc" about them as near as I can tell.

Best Regards,

Ray Bryant
IBM Linux Technology Center
raybry@us.ibm.com
512-838-8538

</body></email><email><emailId>20000328142107</emailId><senderName>Kurt Wall</senderName><senderEmail>kwall@xmission.com</senderEmail><timestampReceived>2000-03-28 14:21:07-0400</timestampReceived><subject>Re: query on documentation</subject><body>

On Tue, Mar 28, 2000 at 07:55:37AM -0600, raybry@us.ibm.com wrote:
&gt; 
&gt; 
&gt; Is there somehwere that the various gcc __builtin functions are documented?
&gt; 
&gt; There is no info in "info gcc" about them as near as I can tell.

From `info gcc', in the Index:

* __builtin_apply:                       Constructing Calls.
* __builtin_apply_args:                  Constructing Calls.
* __builtin_args_info:                   Varargs.
* __builtin_classify_type:               Varargs.
* __builtin_next_arg:                    Varargs.
* __builtin_return:                      Constructing Calls.
* __builtin_saveregs:                    Varargs.


Kurt

</body></email><email><emailId>20000328170342</emailId><senderName></senderName><senderEmail>raybry</senderEmail><timestampReceived>2000-03-28 17:03:42-0400</timestampReceived><subject>Re: query on documentation</subject><body>



You,re right -- I missed those in "info gcc".  But it doesn't appear to be
a full list.
For example, __builtin_constant_p and __builtin_return_address aren't
there.
(The list in info gcc appears to be related to var args processing.)

There must be a list somwhere (yeah, I know, "Use the source, Luke") but
that
is a pretty painful way to find such.

Best Regards,

Ray Bryant
IBM Linux Technology Center
raybry@us.ibm.com
512-838-8538

</body></email><email><emailId>20000330142113</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-03-30 14:21:13-0400</timestampReceived><subject>Re: query on documentation</subject><body>

&gt; For example, __builtin_constant_p and __builtin_return_address
&gt; aren't there.

In my copy of the GCC manual, __builtin_constant_p is listed in the
function index, and explained in (gcc)Other Builtins;
__builtin_return_address is explained in (gcc)Return Address.

&gt; There must be a list somwhere (yeah, I know, "Use the source, Luke")
&gt; but that is a pretty painful way to find such.

The exact list certainly depends on the compiler version; I'll include
the contents of builtins.def from the current gcc cvs below.

Regards,
Martin

DEF_BUILTIN(BUILT_IN_ALLOCA)
DEF_BUILTIN(BUILT_IN_ABS)
DEF_BUILTIN(BUILT_IN_FABS)
DEF_BUILTIN(BUILT_IN_LABS)
DEF_BUILTIN(BUILT_IN_FFS)
DEF_BUILTIN(BUILT_IN_DIV)
DEF_BUILTIN(BUILT_IN_LDIV)
DEF_BUILTIN(BUILT_IN_FFLOOR)
DEF_BUILTIN(BUILT_IN_FCEIL)
DEF_BUILTIN(BUILT_IN_FMOD)
DEF_BUILTIN(BUILT_IN_FREM)
DEF_BUILTIN(BUILT_IN_MEMCPY)
DEF_BUILTIN(BUILT_IN_MEMCMP)
DEF_BUILTIN(BUILT_IN_MEMSET)
DEF_BUILTIN(BUILT_IN_BZERO)
DEF_BUILTIN(BUILT_IN_BCMP)
DEF_BUILTIN(BUILT_IN_STRCPY)
DEF_BUILTIN(BUILT_IN_STRCMP)
DEF_BUILTIN(BUILT_IN_STRLEN)
DEF_BUILTIN(BUILT_IN_FSQRT)
DEF_BUILTIN(BUILT_IN_SIN)
DEF_BUILTIN(BUILT_IN_COS)
DEF_BUILTIN(BUILT_IN_GETEXP)
DEF_BUILTIN(BUILT_IN_GETMAN)
DEF_BUILTIN(BUILT_IN_SAVEREGS)
DEF_BUILTIN(BUILT_IN_CLASSIFY_TYPE)
DEF_BUILTIN(BUILT_IN_NEXT_ARG)
DEF_BUILTIN(BUILT_IN_ARGS_INFO)
DEF_BUILTIN(BUILT_IN_CONSTANT_P)
DEF_BUILTIN(BUILT_IN_FRAME_ADDRESS)
DEF_BUILTIN(BUILT_IN_RETURN_ADDRESS)
DEF_BUILTIN(BUILT_IN_AGGREGATE_INCOMING_ADDRESS)
DEF_BUILTIN(BUILT_IN_APPLY_ARGS)
DEF_BUILTIN(BUILT_IN_APPLY)
DEF_BUILTIN(BUILT_IN_RETURN)
DEF_BUILTIN(BUILT_IN_SETJMP)
DEF_BUILTIN(BUILT_IN_LONGJMP)
DEF_BUILTIN(BUILT_IN_TRAP)

  /* ISO C99 floating point unordered comparisons.  */
DEF_BUILTIN(BUILT_IN_ISGREATER)
DEF_BUILTIN(BUILT_IN_ISGREATEREQUAL)
DEF_BUILTIN(BUILT_IN_ISLESS)
DEF_BUILTIN(BUILT_IN_ISLESSEQUAL)
DEF_BUILTIN(BUILT_IN_ISLESSGREATER)
DEF_BUILTIN(BUILT_IN_ISUNORDERED)

  /* Various hooks for the DWARF 2 __throw routine.  */
DEF_BUILTIN(BUILT_IN_UNWIND_INIT)
DEF_BUILTIN(BUILT_IN_DWARF_CFA)
DEF_BUILTIN(BUILT_IN_DWARF_FP_REGNUM)
DEF_BUILTIN(BUILT_IN_INIT_DWARF_REG_SIZES)
DEF_BUILTIN(BUILT_IN_FROB_RETURN_ADDR)
DEF_BUILTIN(BUILT_IN_EXTRACT_RETURN_ADDR)
DEF_BUILTIN(BUILT_IN_EH_RETURN)

DEF_BUILTIN(BUILT_IN_VARARGS_START)
DEF_BUILTIN(BUILT_IN_STDARG_START)
DEF_BUILTIN(BUILT_IN_VA_END)
DEF_BUILTIN(BUILT_IN_VA_COPY)

  /* C++ extensions */
DEF_BUILTIN(BUILT_IN_NEW)
DEF_BUILTIN(BUILT_IN_VEC_NEW)
DEF_BUILTIN(BUILT_IN_DELETE)
DEF_BUILTIN(BUILT_IN_VEC_DELETE)

</body></email><email><emailId>20000331002555</emailId><senderName></senderName><senderEmail>raybry</senderEmail><timestampReceived>2000-03-31 00:25:55-0400</timestampReceived><subject>Re: query on documentation</subject><body>



Martin,

Thanks for your response -- I guess know I need to what is mean by the "GCC
manual".
Is this a printed document of some kind?  Info certainly doesn't document
all of these
__bulitin functions, although several of them are there.

If the "GCC manual" is something I can get online, where do I look?

Thanks,

Ray Bryant
IBM Linux Technology Center
raybry@us.ibm.com
512-838-8538

</body></email><email><emailId>20000330143219</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-03-30 14:32:19-0400</timestampReceived><subject>Re: backtrace_symbols</subject><body>

&gt; Is it true that backtrace_symbols returns symbols only for functions
&gt; exported by shared libraries?

It appears that way. At least, I could not make the following program
work.

#include &lt;stdio.h&gt;

void foo(){
  void *buf[10];
  int count = backtrace(buf,10);
  char **s = backtrace_symbols(buf,count);
  int i;
  for(i=0;i&lt;count;i++)
    puts(s[i]);
}

void bar(){
  foo();
}

int main()
{
  bar();
}

it would not even work with --export-dynamic, i.e. when the symbols
were exported from the executable.

&gt; Is there similar functionality which could be used for other
&gt; functions for which debugging information exists but whch aren't
&gt; exportet?

I guess you can extract that function from binutils. When you are
done, please make sure to submit it for inclusion into glibc :-)

Regards,
Martin

</body></email><email><emailId>20000321170123</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-03-21 17:01:23-0400</timestampReceived><subject>Binutils 2.9.5.0.31 is released.</subject><body>

This is the beta release of binutils 2.9.5.0.31 for Linux, which is
based on binutils 2000 0319 plus various changes. It is purely for
Linux, although it has been tested on Solaris/Sparc and Solaris/x86
from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.9.5.0.31 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.9.5.0.31.tar.gz. Source code.
2. binutils-2.9.5.0.29-2.9.5.0.31.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.5.0.31-1.i386.rpm. IA-32 binary RPM for RedHat 6.1.

There is no separate source rpm. You can do

# rpm -ta binutils-2.9.5.0.31.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
03/20/2000


</body></email><email><emailId>20000321220639</emailId><senderName>"William Scott Lockwood III"</senderName><senderEmail>scottlockwood@hotmail.com</senderEmail><timestampReceived>2000-03-21 22:06:39-0400</timestampReceived><subject>Re: Fw: Important - Pleeeeeeeze Read!!!!!]</subject><body>

This is TOTAL bullshit!  DO NOT send me this fucking spam again!  I'll 
happily report you to your ISP next time you send me bullshit like this, and 
have your account CLOSED!

TO everyone else unfortunate enough to recieve this email:  It's crap.  
There is no beta test.  There is no money.  Sending this to people will only 
CLOG thier inbox with unwanted SPAM - so do yourself and the rest of us a 
favor - DON'T pass it on!

&gt;From: "peruzzi" &lt;peruzzi@cconnect.net&gt;
&gt;To: "stephen hill" &lt;hitmanhill@yahoo.com&gt;, "shawna errigo" 
&gt;&lt;tuba_player@gurlmail.com&gt;, "Sarah" &lt;CryingAngel17@webtv.net&gt;, "Natalie 
&gt;Orr" &lt;Gangrel2nd@webtv.net&gt;, "Melissa Davis" &lt;just_sweetness@hotmail.com&gt;, 
&gt;&lt;Love_Toy_4_U@excite.com&gt;, &lt;LittleBitt1917@aol.com&gt;, "Holly Doornbos" 
&gt;&lt;lighthous_21@hotmail.com&gt;, "Daniel Whalen" &lt;dingo37@hotmail.com&gt;, "chris 
&gt;everett" &lt;x2cever@music.stlawu.edu&gt;, "Amanda Fosmire" 
&gt;&lt;amanda747@hotmail.com&gt;
&gt;CC: &lt;abuseicq@yahoo.com&gt;, &lt;linux-gcc@vger.rutgers.edu&gt;, 
&gt;&lt;stormkeeper@softhome.net&gt;, &lt;amu@MIT.EDU&gt;, &lt;guerreroma@2mawcp.usmc.mil&gt;, 
&gt;&lt;hernendezaz@2mawcp.usmc.mil&gt;, &lt;mbwelker@hotmail.com&gt;, 
&gt;&lt;errigo@hotmail.com&gt;, &lt;peruzzi@telenet.net&gt;, &lt;peruzzi@gateway.net&gt;, 
&gt;&lt;peruzzi62@potsdam.edu&gt;, &lt;JoeKraus@Registration-Excite.com&gt;, 
&gt;&lt;verges37@hotmail.com&gt;, &lt;peruzzijl@2mawcp.usmc.mil&gt;
&gt;Subject: Fw: Important - Pleeeeeeeze Read!!!!!]
&gt;Date: Tue, 21 Mar 2000 17:07:42 -0800
&gt;
&gt;
&gt;----- Original Message -----
&gt;From: Laurie Youngs
&gt;To: Zac ; Williard ; Vicki ; That Ugly Guy ; Tanya ; Stover ; Stoney ; 
&gt;Steve ; Spo ; Simone ; Shawna ; Shaun ; Sean ; Scotty ; Scott ; Schaefer ; 
&gt;Sarah ; Ryan ; Rocca ; Rob D. ; Rob ; Rick ; Rich ; Raelee ; Pete ; Pat ; 
&gt;Oriana ; No COD's on a PPR ; Nicole ; Nick ; N. Speno ; Morrin ; Mom ; 
&gt;Mocko ; Mikey ; Mike W. ; Mel ; Marlie ; Marin ; Luis ; Liz ; Leah ; Laurie 
&gt;Youngs ; Lauren ; Kirstyn ; Kim ; Kellen ; Kate ; Karen ; Julie ; Julia ; 
&gt;Josh ; Jordan ; Jodi ; Jo and Jay ; Jessie ; Jeffrey ; Jeff M. ; Jeff ; 
&gt;Jason R. ; Jamie ; Jackie ; J. Speno ; Harris ; Grillone ; GI Jay ; Erik ; 
&gt;Erich ; Eric ; Emmy ; Emily ; Dennis ; Dave ; Cordell ; Cooks ; Clark's ; 
&gt;Chris S. ; Chris Everett ; Chris ; Chesa ; Bub ; Bill S. ; Bill ; Big Mike 
&gt;; Becky ; Bart ; Avard ; Aunt Susie ; Aunt Jo ann and Uncle Mike ; April ; 
&gt;Anessa ; Andy ; Amy ; Alyson
&gt;Sent: Tuesday, March 21, 2000 7:24 AM
&gt;Subject: Fw: Important - Pleeeeeeeze Read!!!!!]
&gt;
&gt;
&gt; &gt; &gt;why not try it?
&gt; &gt; &gt;I never even read these but thought i would because I received it from
&gt; &gt; &gt;a friend that never sends these to me.
&gt; &gt; &gt;
&gt; &gt; -------------------------------------------------------------
&gt; &gt;
&gt; &gt;  &gt; &gt;&gt; &gt;  This is not a joke. I am forwarding this because the person who
&gt; &gt; sent it to me is a good friend and does not send me junk.
&gt; &gt;
&gt; &gt; Intel and AOL are now discussing a merger which would make them the
&gt; &gt; largest Internet company and in an effort make sure that AOL remains the
&gt; &gt; most widely used program, Intel and AOL are running an e-mail beta
&gt; &gt; test.
&gt; &gt; When you forward this e-mail to friends, Intel can and will track it (if
&gt; &gt;
&gt; &gt; you are a Microsoft Windows user) for a two week time period. For every
&gt; &gt;
&gt; &gt; person that you forward this e-mail to, Microsoft will pay you
&gt; &gt;
&gt; &gt; $203.15, for every person that you sent it to that forwards it on,
&gt; &gt; Microsoft will pay you $156.29 and for every third person that  receives
&gt; &gt; it, you will be paid $17.65. Within two weeks,Intel will contact you for
&gt; &gt; your address and then send you a check.
&gt; &gt;  &gt; &gt;&gt;
&gt; &gt; I thought this was a scam myself, but a friend of my good
&gt; &gt;
&gt; &gt; friend's Aunt Patricia, who works at Intel actually got a check for
&gt; &gt; $4,543.23 by forwarding this e-mail.  Try it, what have you got to
&gt; &gt; lose????
&gt; &gt; &gt;&gt;
&gt;

______________________________________________________
Get Your Private, Free Email at http://www.hotmail.com

</body></email><email><emailId>20000322010742</emailId><senderName>"peruzzi"</senderName><senderEmail>peruzzi@cconnect.net</senderEmail><timestampReceived>2000-03-22 01:07:42-0400</timestampReceived><subject>Fw: Important - Pleeeeeeeze Read!!!!!]</subject><body>

----- Original Message ----- 
From: Laurie Youngs 
To: Zac ; Williard ; Vicki ; That Ugly Guy ; Tanya ; Stover ; Stoney ; Steve ; Spo ; \
Simone ; Shawna ; Shaun ; Sean ; Scotty ; Scott ; Schaefer ; Sarah ; Ryan ; Rocca ; \
Rob D. ; Rob ; Rick ; Rich ; Raelee ; Pete ; Pat ; Oriana ; No COD's on a PPR ; \
Nicole ; Nick ; N. Speno ; Morrin ; Mom ; Mocko ; Mikey ; Mike W. ; Mel ; Marlie ; \
Marin ; Luis ; Liz ; Leah ; Laurie Youngs ; Lauren ; Kirstyn ; Kim ; Kellen ; Kate ; \
Karen ; Julie ; Julia ; Josh ; Jordan ; Jodi ; Jo and Jay ; Jessie ; Jeffrey ; Jeff \
M. ; Jeff ; Jason R. ; Jamie ; Jackie ; J. Speno ; Harris ; Grillone ; GI Jay ; Erik \
; Erich ; Eric ; Emmy ; Emily ; Dennis ; Dave ; Cordell ; Cooks ; Clark's ; Chris S. \
; Chris Everett ; Chris ; Chesa ; Bub ; Bill S. ; Bill ; Big Mike ; Becky ; Bart ; \
Avard ; Aunt Susie ; Aunt Jo ann and Uncle Mike ; April ; Anessa ; Andy ; Amy ; \
                Alyson 
Sent: Tuesday, March 21, 2000 7:24 AM
Subject: Fw: Important - Pleeeeeeeze Read!!!!!]


&gt; &gt; why not try it?
&gt; &gt; I never even read these but thought i would because I received it from
&gt; &gt; a friend that never sends these to me.
&gt; &gt; 
&gt; -------------------------------------------------------------
&gt; 
&gt; &gt; &gt; &gt; &gt; This is not a joke. I am forwarding this because the person who
&gt; sent it to me is a good friend and does not send me junk.  
&gt; 
&gt; Intel and AOL are now discussing a merger which would make them the 
&gt; largest Internet company and in an effort make sure that AOL remains the 
&gt; most widely used program, Intel and AOL are running an e-mail beta
&gt; test.  
&gt; When you forward this e-mail to friends, Intel can and will track it (if
&gt; 
&gt; you are a Microsoft Windows user) for a two week time period. For every
&gt; 
&gt; person that you forward this e-mail to, Microsoft will pay you
&gt; 
&gt; $203.15, for every person that you sent it to that forwards it on, 
&gt; Microsoft will pay you $156.29 and for every third person that  receives 
&gt; it, you will be paid $17.65. Within two weeks,Intel will contact you for 
&gt; your address and then send you a check.
&gt; &gt; &gt; &gt; 
&gt; I thought this was a scam myself, but a friend of my good
&gt; 
&gt; friend's Aunt Patricia, who works at Intel actually got a check for 
&gt; $4,543.23 by forwarding this e-mail.  Try it, what have you got to 
&gt; lose????
&gt; &gt; &gt; 


[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;&lt;HEAD&gt;
&lt;META content="text/html; charset=iso-8859-1" http-equiv=Content-Type&gt;
&lt;META content="MSHTML 5.00.3013.2600" name=GENERATOR&gt;
&lt;STYLE&gt;&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt; &lt;/DIV&gt;
&lt;DIV style="FONT: 10pt arial"&gt;----- Original Message ----- 
&lt;DIV style="BACKGROUND: #e4e4e4; font-color: black"&gt;&lt;B&gt;From:&lt;/B&gt; &lt;A 
href="mailto:youngsle@clarkson.edu" title=youngsle@clarkson.edu&gt;Laurie 
Youngs&lt;/A&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;B&gt;To:&lt;/B&gt; &lt;A href="mailto:zedpearson99@hotmail.com" 
title=zedpearson99@hotmail.com&gt;Zac&lt;/A&gt; ; &lt;A href="mailto:imlard420@aol.com" 
title=imlard420@aol.com&gt;Williard&lt;/A&gt; ; &lt;A href="mailto:NURSY111@aol.com" 
title=NURSY111@aol.com&gt;Vicki&lt;/A&gt; ; &lt;A href="mailto:rauschnr@clarkson.edu" 
title=rauschnr@clarkson.edu&gt;That Ugly Guy&lt;/A&gt; ; &lt;A 
href="mailto:tmarie8826@hotmail.com" title=tmarie8826@hotmail.com&gt;Tanya&lt;/A&gt; ; &lt;A 
href="mailto:WrestlePSU@aol.com" title=WrestlePSU@aol.com&gt;Stover&lt;/A&gt; ; &lt;A 
href="mailto:Stoney7716@aol.com" title=Stoney7716@aol.com&gt;Stoney&lt;/A&gt; ; &lt;A 
href="mailto:wendtsa@clarkson.edu" title=wendtsa@clarkson.edu&gt;Steve&lt;/A&gt; ; &lt;A 
href="mailto:Sposatmj@clarkson.edu" title=Sposatmj@clarkson.edu&gt;Spo&lt;/A&gt; ; &lt;A 
href="mailto:scalicsb@clarkson.edu" title=scalicsb@clarkson.edu&gt;Simone&lt;/A&gt; ; &lt;A 
href="mailto:EmeraldDS@aol.com" title=EmeraldDS@aol.com&gt;Shawna&lt;/A&gt; ; &lt;A 
href="mailto:skeeble1@rochester.rr.com" 
title=skeeble1@rochester.rr.com&gt;Shaun&lt;/A&gt; ; &lt;A href="mailto:dotysm@clarkson.edu" 
title=dotysm@clarkson.edu&gt;Sean&lt;/A&gt; ; &lt;A href="mailto:ssmithss@hotmail.com" 
title=ssmithss@hotmail.com&gt;Scotty&lt;/A&gt; ; &lt;A href="mailto:vannscott@hotmail.com" 
title=vannscott@hotmail.com&gt;Scott&lt;/A&gt; ; &lt;A href="mailto:waywayoutthere@aol.com" 
title=waywayoutthere@aol.com&gt;Schaefer&lt;/A&gt; ; &lt;A 
href="mailto:Dupuissl@clarkson.edu" title=Dupuissl@clarkson.edu&gt;Sarah&lt;/A&gt; ; &lt;A 
href="mailto:beginrr@clarkson.edu" title=beginrr@clarkson.edu&gt;Ryan&lt;/A&gt; ; &lt;A 
href="mailto:larocca41@yahoo.com" title=larocca41@yahoo.com&gt;Rocca&lt;/A&gt; ; &lt;A 
href="mailto:rdelamar@vtc.vsc.edu" title=rdelamar@vtc.vsc.edu&gt;Rob D.&lt;/A&gt; ; &lt;A 
href="mailto:zinsmera@clarkson.edu" title=zinsmera@clarkson.edu&gt;Rob&lt;/A&gt; ; &lt;A 
href="mailto:sprattre@clarkson.edu" title=sprattre@clarkson.edu&gt;Rick&lt;/A&gt; ; &lt;A 
href="mailto:greenwrp@polaris.clarkson.edu" 
title=greenwrp@polaris.clarkson.edu&gt;Rich&lt;/A&gt; ; &lt;A 
href="mailto:grimmrj@clarkson.edu" title=grimmrj@clarkson.edu&gt;Raelee&lt;/A&gt; ; &lt;A 
href="mailto:qtip_89tsi@hotmail.com" title=qtip_89tsi@hotmail.com&gt;Pete&lt;/A&gt; ; &lt;A 
href="mailto:patrick_donnelly@hotmail.com" 
title=patrick_donnelly@hotmail.com&gt;Pat&lt;/A&gt; ; &lt;A 
href="mailto:cortesoy@clarkson.edu" title=cortesoy@clarkson.edu&gt;Oriana&lt;/A&gt; ; &lt;A 
href="mailto:odonoghr@clarkson.edu" title=odonoghr@clarkson.edu&gt;No COD's on a 
PPR&lt;/A&gt; ; &lt;A href="mailto:berneynm@clarkson.edu" 
title=berneynm@clarkson.edu&gt;Nicole&lt;/A&gt; ; &lt;A href="mailto:beginn@clarkson.edu" 
title=beginn@clarkson.edu&gt;Nick&lt;/A&gt; ; &lt;A href="mailto:nspeno15@hotmail.com" 
title=nspeno15@hotmail.com&gt;N. Speno&lt;/A&gt; ; &lt;A 
href="mailto:mattymic8833@hotmail.com" title=mattymic8833@hotmail.com&gt;Morrin&lt;/A&gt; 
; &lt;A href="mailto:vyoungs@flare.net" title=vyoungs@flare.net&gt;Mom&lt;/A&gt; ; &lt;A 
href="mailto:mockorp@clarkson.edu" title=mockorp@clarkson.edu&gt;Mocko&lt;/A&gt; ; &lt;A 
href="mailto:KingPin726@aol.com" title=KingPin726@aol.com&gt;Mikey&lt;/A&gt; ; &lt;A 
href="mailto:mikewoodard@hotmail.com" title=mikewoodard@hotmail.com&gt;Mike W.&lt;/A&gt; 
; &lt;A href="mailto:dunphy@oswego.edu" title=dunphy@oswego.edu&gt;Mel&lt;/A&gt; ; &lt;A 
href="mailto:marlie_1@hotmail.com" title=marlie_1@hotmail.com&gt;Marlie&lt;/A&gt; ; &lt;A 
href="mailto:marin007@aol.com" title=marin007@aol.com&gt;Marin&lt;/A&gt; ; &lt;A 
href="mailto:Macdaddyluis@aol.com" title=Macdaddyluis@aol.com&gt;Luis&lt;/A&gt; ; &lt;A 
href="mailto:breenee@clarkson.edu" title=breenee@clarkson.edu&gt;Liz&lt;/A&gt; ; &lt;A 
href="mailto:leahking@hotmail.com" title=leahking@hotmail.com&gt;Leah&lt;/A&gt; ; &lt;A 
href="mailto:youngsle@clarkson.edu" title=youngsle@clarkson.edu&gt;Laurie 
Youngs&lt;/A&gt; ; &lt;A href="mailto:clarkla@clarkson.edu" 
title=clarkla@clarkson.edu&gt;Lauren&lt;/A&gt; ; &lt;A href="mailto:whitekr@clarkson.edu" 
title=whitekr@clarkson.edu&gt;Kirstyn&lt;/A&gt; ; &lt;A href="mailto:binky22731@yahoo.com" 
title=binky22731@yahoo.com&gt;Kim&lt;/A&gt; ; &lt;A href="mailto:klabell1@ic3.ithaca.edu" 
title=klabell1@ic3.ithaca.edu&gt;Kellen&lt;/A&gt; ; &lt;A 
href="mailto:kate13_2000_1999@yahoo.com" 
title=kate13_2000_1999@yahoo.com&gt;Kate&lt;/A&gt; ; &lt;A href="mailto:keo2@geneseo.edu" 
title=keo2@geneseo.edu&gt;Karen&lt;/A&gt; ; &lt;A href="mailto:drummer@primelink1.net" 
title=drummer@primelink1.net&gt;Julie&lt;/A&gt; ; &lt;A href="mailto:santogjm@clarkson.edu" 
title=santogjm@clarkson.edu&gt;Julia&lt;/A&gt; ; &lt;A href="mailto:Hotalijm@clarkson.edu" 
title=Hotalijm@clarkson.edu&gt;Josh&lt;/A&gt; ; &lt;A href="mailto:jgilels@hotmail.com" 
title=jgilels@hotmail.com&gt;Jordan&lt;/A&gt; ; &lt;A href="mailto:olinskja@clarkson.edu" 
title=olinskja@clarkson.edu&gt;Jodi&lt;/A&gt; ; &lt;A href="mailto:JJK520@flare.net" 
title=JJK520@flare.net&gt;Jo and Jay&lt;/A&gt; ; &lt;A href="mailto:judgejl@clarkson.edu" 
title=judgejl@clarkson.edu&gt;Jessie&lt;/A&gt; ; &lt;A 
href="mailto:jmooney1@rochester.rr.com" 
title=jmooney1@rochester.rr.com&gt;Jeffrey&lt;/A&gt; ; &lt;A 
href="mailto:marshje@clarkson.edu" title=marshje@clarkson.edu&gt;Jeff M.&lt;/A&gt; ; &lt;A 
href="mailto:sherfjs@clarkson.edu" title=sherfjs@clarkson.edu&gt;Jeff&lt;/A&gt; ; &lt;A 
href="mailto:rodrigjm@clarkson.edu" title=rodrigjm@clarkson.edu&gt;Jason R.&lt;/A&gt; ; 
&lt;A href="mailto:jrmm1_1@hotmail.com" title=jrmm1_1@hotmail.com&gt;Jamie&lt;/A&gt; ; &lt;A 
href="mailto:toner@HWS.EDU" title=toner@HWS.EDU&gt;Jackie&lt;/A&gt; ; &lt;A 
href="mailto:jspeno8@hotmail.com" title=jspeno8@hotmail.com&gt;J. Speno&lt;/A&gt; ; &lt;A 
href="mailto:harris69@gateway.net" title=harris69@gateway.net&gt;Harris&lt;/A&gt; ; &lt;A 
href="mailto:mg1136@aol.com" title=mg1136@aol.com&gt;Grillone&lt;/A&gt; ; &lt;A 
href="mailto:welchje@clarkson.edu" title=welchje@clarkson.edu&gt;GI Jay&lt;/A&gt; ; &lt;A 
href="mailto:hallgres@clarkson.edu" title=hallgres@clarkson.edu&gt;Erik&lt;/A&gt; ; &lt;A 
href="mailto:elabour@aol.com" title=elabour@aol.com&gt;Erich&lt;/A&gt; ; &lt;A 
href="mailto:schlobem@clarkson.edu" title=schlobem@clarkson.edu&gt;Eric&lt;/A&gt; ; &lt;A 
href="mailto:hookel@clarkson.edu" title=hookel@clarkson.edu&gt;Emmy&lt;/A&gt; ; &lt;A 
href="mailto:lazzareb@clarkson.edu" title=lazzareb@clarkson.edu&gt;Emily&lt;/A&gt; ; &lt;A 
href="mailto:jenninda@clarkson.edu" title=jenninda@clarkson.edu&gt;Dennis&lt;/A&gt; ; &lt;A 
href="mailto:kellerdc@clarkson.edu" title=kellerdc@clarkson.edu&gt;Dave&lt;/A&gt; ; &lt;A 
href="mailto:cordell_pearce@hotmail.com" 
title=cordell_pearce@hotmail.com&gt;Cordell&lt;/A&gt; ; &lt;A href="mailto:jjcook@flare.net" 
title=jjcook@flare.net&gt;Cooks&lt;/A&gt; ; &lt;A href="mailto:mclark1@rochester.rr.com" 
title=mclark1@rochester.rr.com&gt;Clark's&lt;/A&gt; ; &lt;A 
href="mailto:steiner30@hotmail.com" title=steiner30@hotmail.com&gt;Chris S.&lt;/A&gt; ; 
&lt;A href="mailto:x2cever@music.stlawu.edu" title=x2cever@music.stlawu.edu&gt;Chris 
Everett&lt;/A&gt; ; &lt;A href="mailto:strquest@rochester.rr.com" 
title=strquest@rochester.rr.com&gt;Chris&lt;/A&gt; ; &lt;A href="mailto:ecstasyrr@yahoo.com" 
title=ecstasyrr@yahoo.com&gt;Chesa&lt;/A&gt; ; &lt;A href="mailto:bubjh@aol.com" 
title=bubjh@aol.com&gt;Bub&lt;/A&gt; ; &lt;A href="mailto:sheldowt@clarkson.edu" 
title=sheldowt@clarkson.edu&gt;Bill S.&lt;/A&gt; ; &lt;A 
href="mailto:wc3722@cnsvax.albany.edu" title=wc3722@cnsvax.albany.edu&gt;Bill&lt;/A&gt; ; 
&lt;A href="mailto:gomezmr@clarkson.edu" title=gomezmr@clarkson.edu&gt;Big Mike&lt;/A&gt; ; 
&lt;A href="mailto:beckystrohm@hotmail.com" title=beckystrohm@hotmail.com&gt;Becky&lt;/A&gt; 
; &lt;A href="mailto:bartman0525@hotmail.com" 
title=bartman0525@hotmail.com&gt;Bart&lt;/A&gt; ; &lt;A href="mailto:brannaf@clarkson.edu" 
title=brannaf@clarkson.edu&gt;Avard&lt;/A&gt; ; &lt;A href="mailto:sward@flare.net" 
title=sward@flare.net&gt;Aunt Susie&lt;/A&gt; ; &lt;A href="mailto:jcullina@mail.nysed.gov" 
title=jcullina@mail.nysed.gov&gt;Aunt Jo ann and Uncle Mike&lt;/A&gt; ; &lt;A 
href="mailto:jonesa@clarkson.edu" title=jonesa@clarkson.edu&gt;April&lt;/A&gt; ; &lt;A 
href="mailto:arcianca@syr.edu" title=arcianca@syr.edu&gt;Anessa&lt;/A&gt; ; &lt;A 
href="mailto:mcdermaj@clarkson.edu" title=mcdermaj@clarkson.edu&gt;Andy&lt;/A&gt; ; &lt;A 
href="mailto:jwade@icon.net" title=jwade@icon.net&gt;Amy&lt;/A&gt; ; &lt;A 
href="mailto:knappar@clarkson.edu" title=knappar@clarkson.edu&gt;Alyson&lt;/A&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;B&gt;Sent:&lt;/B&gt; Tuesday, March 21, 2000 7:24 AM&lt;/DIV&gt;
&lt;DIV&gt;&lt;B&gt;Subject:&lt;/B&gt; Fw: Important - Pleeeeeeeze Read!!!!!]&lt;/DIV&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;BR&gt;&lt;/DIV&gt;&gt; &gt;why not try it?&lt;BR&gt;&gt; &gt;I never even read these but 
thought i would because I received it from&lt;BR&gt;&gt; &gt;a friend that never sends 
these to me.&lt;BR&gt;&gt; &gt;&lt;BR&gt;&gt; 
-------------------------------------------------------------&lt;BR&gt;&gt; 
&lt;BR&gt;&gt;  &gt; &gt;&gt; &gt;  This is not a joke. I am forwarding this 
because the person who&lt;BR&gt;&gt; sent it to me is a good friend and does not send 
me junk.  &lt;BR&gt;&gt; &lt;BR&gt;&gt; Intel and AOL are now discussing a merger which 
would make them the &lt;BR&gt;&gt; largest Internet company and in an effort make sure 
that AOL remains the &lt;BR&gt;&gt; most widely used program, Intel and AOL are 
running an e-mail beta&lt;BR&gt;&gt; test.  &lt;BR&gt;&gt; When you forward this e-mail 
to friends, Intel can and will track it (if&lt;BR&gt;&gt; &lt;BR&gt;&gt; you are a Microsoft 
Windows user) for a two week time period. For every&lt;BR&gt;&gt; &lt;BR&gt;&gt; person that 
you forward this e-mail to, Microsoft will pay you&lt;BR&gt;&gt; &lt;BR&gt;&gt; $203.15, for 
every person that you sent it to that forwards it on, &lt;BR&gt;&gt; Microsoft will 
pay you $156.29 and for every third person that  receives &lt;BR&gt;&gt; it, you 
will be paid $17.65. Within two weeks,Intel will contact you for &lt;BR&gt;&gt; your 
address and then send you a check.&lt;BR&gt;&gt;  &gt; &gt;&gt;&lt;BR&gt;&gt; I thought 
this was a scam myself, but a friend of my good&lt;BR&gt;&gt; &lt;BR&gt;&gt; friend's Aunt 
Patricia, who works at Intel actually got a check for &lt;BR&gt;&gt; $4,543.23 by 
forwarding this e-mail.  Try it, what have you got to &lt;BR&gt;&gt; 
lose????&lt;BR&gt;&gt; &gt;&gt;&lt;BR&gt;&lt;/BODY&gt;&lt;/HTML&gt;


</body></email><email><emailId>20000329165516</emailId><senderName>"Karsten Jeppesen"</senderName><senderEmail>karsten@jeppesens.com</senderEmail><timestampReceived>2000-03-29 16:55:16-0400</timestampReceived><subject>Possible code generation error [gcc PPC version]</subject><body>

I think I am seeing a possible compiler code generation error. Look at the
following

--------------
  14: 3d 20 00 00  lis r9,0
   16: R_PPC_ADDR16_HA .rodata
  18: 38 69 00 00  addi r3,r9,0
   1a: R_PPC_ADDR16_LO .rodata
  1c: 38 80 00 00  li r4,0
  20: 48 00 00 01  bl 20 &lt;GlobalProc+0x20&gt;
--------------

This is part of an objdump of a PowerPC  code segment so this does not apply
to Intel compatibles.
The error (so I believe) is the use of 'addi' to load the least-significant
part of the jump address. Accordingly to the manual (and I tested this also
- of cause) if the most-significant bit in the least-significant part if 1
(0x00008000) you will loose that bit because 'addi' will look at it signed
which means it will subtract instead.
IMHO 'ori' should be used instead.

Any comments? Am I wrong?

Cheers,
Karsten Jeppesen

</body></email><email><emailId>20000330143313</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-03-30 14:33:13-0400</timestampReceived><subject>Re: template problem</subject><body>

&gt; What am I missing?

You need to define the template in the header files; defining them in
a different implementation file is illegal C++.

Regards,
Martin

</body></email><email><emailId>20000330193022</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-03-30 19:30:22-0400</timestampReceived><subject>Re: backtrace_symbols</subject><body>

"Martin v. Loewis" &lt;martin@loewis.home.cs.tu-berlin.de&gt; writes:

&gt; &gt; Is it true that backtrace_symbols returns symbols only for functions
&gt; &gt; exported by shared libraries?
&gt; 
&gt; It appears that way. At least, I could not make the following program
&gt; work.

Take a look at the catchsegv script.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------

</body></email><email><emailId>20000331081241</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-03-31 08:12:41-0400</timestampReceived><subject>Re: query on documentation</subject><body>

&gt; Thanks for your response -- I guess know I need to what is mean by
&gt; the "GCC manual".

The gcc manual is written in texinfo. You can use it to produce the
info pages, or convert it to tex, and print it as a book.

&gt; Is this a printed document of some kind?  Info certainly doesn't
&gt; document all of these __bulitin functions, although several of them
&gt; are there.

You did not mention what compiler version you were using. The manual
that comes with gcc 2.95 certainly has the documentation I claimed it
has. The locations I gave were Info node names, for example, in info,
you type 'g', then '(gcc)Return Address'.

&gt; If the "GCC manual" is something I can get online, where do I look?

It is also available online, at

http://gcc.gnu.org/onlinedocs/

Regards,
Martin

</body></email><email><emailId>20000331191456</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-03-31 19:14:56-0400</timestampReceived><subject>Binutils 2.9.5.0.32 is released.</subject><body>

This is the beta release of binutils 2.9.5.0.32 for Linux, which is
based on binutils 2000 0331 plus various changes. It is purely for
Linux, although it has been tested on Solaris/Sparc and Solaris/x86
from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.9.5.0.32 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.9.5.0.32.tar.gz. Source code.
2. binutils-2.9.5.0.31-2.9.5.0.32.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.5.0.32-1.i386.rpm. IA-32 binary RPM for RedHat 6.1.

There is no separate source rpm. You can do

# rpm -ta binutils-2.9.5.0.32.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
03/31/2000


</body></email><email><emailId>20000202133212</emailId><senderName>Burak Serdar</senderName><senderEmail>bserdar@intrex.net</senderEmail><timestampReceived>2000-02-02 13:32:12-0400</timestampReceived><subject>Re: G++ &amp; Fortran</subject><body>

C++ decorates the names of the functions with its type and parameters.
You have to use C linkage for those functions.

extern "C" { void func(...);}


South Wind wrote:

&gt; Hello..
&gt;
&gt;    As we know, C functions adding '_' behind
&gt;    can be called by a fortran program.
&gt;
&gt;    But it is useless to a C++ function.
&gt;
&gt;    The error will look like this
&gt;      fortran_pro.o(.text+0x18): undefined reference to 'xxx_'
&gt;
&gt;    Could someone give a hints...
&gt;
&gt;     Thanks....

</body></email><email><emailId>20000203075922</emailId><senderName>Bongo deGilligan</senderName><senderEmail>micros50@computer.net</senderEmail><timestampReceived>2000-02-03 07:59:22-0400</timestampReceived><subject>Re: C and Postgresql</subject><body>

dung nguyen wrote:

&gt; Hello,
&gt;   I want to make a C program using Postgresql server. Please show me where I
&gt; can find documentation about this?
&gt; Thanks.
&gt; D

You can find documentation on this at  http://www.postgresql.org

What you are looking for is documentation on "libpq". "libpq" is a C
programming interface to Postgresql providing functionality that you can use
from your C program.

If you have Postgresql installed on your system this should also be part of
your user documentation.

John &lt;micros50@computer.net&gt;


&gt;

--
email: micros50@computer.net
Local mailserver  , remote
--------
Linx:
http://www.computer.net/
http://einval.vol.8m.com/

People need individuality and freedom to do what they want!!

</body></email><email><emailId>20000203152022</emailId><senderName>"William Scott Lockwood III"</senderName><senderEmail>wsl3@stlnet.com</senderEmail><timestampReceived>2000-02-03 15:20:22-0400</timestampReceived><subject>VIRUS ALERT!  THIS IS NOT A DRILL!</subject><body>

Hello to EVERYONE in my address book:

Yesterday I was hit by a "virus" that may have replicated and mailed itself to
everyone in my address book.  I'm very sorry about this.  I didn't send this
out right away, because I wanted to know what to do about it FIRST.  With that
in mind, here's the scoop.

The file was actually a script, written in Visual Basic.  A standard scan with
McAfee will NOT pick this file up, because it has an odd extension, .VBS.
This is not a binary, it's text, so removal is simple.  One copy of the script
is renamed RUNDLL.VBS and is stored in your \WINDOWS\SYSTEM or \WINNT\SYSTEM32
(on NT systems) folder.  Removal is simple, just delete the file.  The other
copy of the file will reside in your TEMP directory, I.E. \WINDOWS\TEMP, which
is where mine was.  Note that the second copy will NOT be named RUNDLL, but
will have the same extension of .VBS and is easily found and removed as no
other file in that directory should have that extension.

HOW DO I KNOW I HAVE THE SCRIPT/VIRUS?
A message will show up on your system, from me (not actually, from the script
really) saying "Enjoy the links".  It will have a file attachment, which is
the afore mentioned file.  CLICKING ON IT will LAUNCH the virus, and offer to
put XXX links on your desktop.  If this happened to you, you have the
script/virus and need to follow the directions above (or below for you
non-techies out there) and clean your system.

For the NON-TECHNICAL who get this message:
READ ALL DIRECTIONS BEFORE PROCEEDING!  IF YOU CAN'T FIGURE IT OUT, CALL ME
FOR HELP!

Go and Download McAfee 4.0 from ftp.mcafee.com , http://www.mcafee.com/ or
similar.  Be sure you download the latest scan.dat file.  Install McAfee, and
then the latest scan.dat file.  You may get an error telling you the file is
locked!  If so, you must restart your machine in MS-DOS mode, and manually
copy the file scan.dat to the McAfee Directory.  Be sure to write down where
that is when you first install McAfee so you know where to copy the file to!
You will also need either pkzip or WinZip (http://www.winzip.com/ ) to open
the file the new dat files are in.  Tell it so scan all files, and the
script/virus if present will be deleted my McAfee.  I have not tested any
other scanners, but I'm sure if you have current files, you should be fine
with Dr. Solomon, Norton, etc.

Again, I'm very sorry about this, and regret any inconvenience this may have
caused.

Sincerely,
Scott

</body></email><email><emailId>20000206162423</emailId><senderName>"creach.stephane"</senderName><senderEmail>creach.stephane@free.fr</senderEmail><timestampReceived>2000-02-06 16:24:23-0400</timestampReceived><subject>trouble with gcc</subject><body>

Hello,
I can't do anything with gcc.
The message error is :
BUG IN DYNAMIC LINKER ld.so : dynamic-link.h:57:elf-get-dynamic-info:
Assertion '!. "bad dynamic tag" failed'.
Can you explain me what's wrong, please ?
Thank you.

</body></email><email><emailId>20000209015202</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-02-09 01:52:02-0400</timestampReceived><subject>binutils 2.9.5.0.27 is released.</subject><body>

This is the beta release of binutils 2.9.5.0.27 for Linux, which is
based on binutils 2000 0204 plus various changes. It is purely for
Linux, although it has been tested on Solaris/Sparc and Solaris/x86
from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.9.5.0.27 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared
}    %{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker:
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m ar
melf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.9.5.0.27.tar.gz. Source code.
2. binutils-2.9.5.0.24-2.9.5.0.27.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.5.0.27-1.i386.rpm. IA-32 binary RPM for RedHat 6.1.

There is no separate source rpm. You can do

# rpm -ta binutils-2.9.5.0.27.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
02/08/2000

</body></email><email><emailId>20000215212838</emailId><senderName>"mariejo.cam () libertysurf ! fr"</senderName><senderEmail>mariejo.cam@libertysurf.fr</senderEmail><timestampReceived>2000-02-15 21:28:38-0400</timestampReceived><subject>=?ISO-8859-1?Q?Bug=20when=20compiling=20a=20"C"=20program=20with=20gcc=20under=20linux=20Red=20Hat=2</subject><body>


Hello!

I have installed the distribution Red Hat 6.0 of linux on my 
personal computer , and I cannot use the gcc compiler .
When I launch the following command :
"gcc prog.c"
I obtain this error message:

BUG IN DYNAMIC LINKER ld.so: dynamic-link.h: 57: 
elf_get_dynamic_info: Assertion `! "bad dynamic tag"' failed!

Thank you to help me if you can .

--
L'internet gratuit avec LibertySurf  
http://www.libertysurf.fr


</body></email><email><emailId>20000217101440</emailId><senderName>Dominique Fober</senderName><senderEmail>fober@grame.fr</senderEmail><timestampReceived>2000-02-17 10:14:40-0400</timestampReceived><subject>gcc v2.95.2 behavior</subject><body>

I have a strange behavior at compile time for the same project with :
- gcc v. pgcc 2.91.66 running on linux 2.2.9-19mdk : compile ok
- gcc v. 2.95.2 running on linux 2.2.14-15mdk : cannot compile; results in a lot of \
errors

In fact, gcc v. 2.95.2 includes the following:
   /usr/lib/gcc-lib/i586-mandrake-linux/2.95.2/include/asm/posix_types.h
instead of 
   /usr/include/asm/posix_types.h
This special include seems to be intended to fix a bug in _FD_ZERO for glibc-1.x. \
However, it includes &lt;features.h&gt; which prevents many data types to be defined. 

To force these typedefs, I need to compile with -D_LOOSE_KERNEL_NAMES.
I'm compiling code for a kernel module and other options are :
-DMODVERSIONS -DCONFIG_KERNELD -DMODULE -D__KERNEL__ -DLINUX  -D__NO_VERSION__

I would like to know whether it's a temporary problem related to this gcc version, or \
a conflict with my compiler options.

Thanks for your help,
Dominique Fober


</body></email><email><emailId>20000218060609</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-02-18 06:06:09-0400</timestampReceived><subject>glibc 2.1.3pre4</subject><body>

Hi,

I've uploaded the fourth (and hopefully last) test release for glibc 2.1.3
to

	ftp://sourceware.cygnus.com/pub/glibc/snapshots

You can find the files

	glibc-2.1.3pre4.tar.bz2		(also .gz)
and
	glibc-linuxthreads-2.1.3pre4.tar.gz

(All my alternative sites are not reachable or changed.  So use
sourceware and its mirror sites.)


The crypt add-on hasn't changed.  (And I have not yet a word from a
legal people whether I can include the code in the main sources.)


Since pre3 we added quite a lot of bug fixes and we now feel very
strongly that the sources are very stable, more stable than anything
before.  Especially people doing heavy thread work should try it.

If no major problems are reported I'll make an official release soon.
Please send feedback (nagative *and* positive to
libc-alpha@sourceware.cygnus.com).

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------

</body></email><email><emailId>20000218074734</emailId><senderName>Wolfram Gloger</senderName><senderEmail>wolfram.gloger@dent.med.uni-muenchen.de</senderEmail><timestampReceived>2000-02-18 07:47:34-0400</timestampReceived><subject>Re: C++ executable linked with libm</subject><body>

Hello,

&gt; Could somebody tell me, why all c++ executables linked with libm.

Not all, but most C++ programs are linked with libstdc++.  The shared
libstdc++.so library unconditionally depends on libm.so (because a few
functions within it require math functions), so what you see is
normal.

It may be possible to link parts of libstdc++ _statically_ into a
program _without_ bringing in libm, but with dynamic linking libm will
always be required.

Regards,
Wolfram.

</body></email><email><emailId>20000218221542</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-02-18 22:15:42-0400</timestampReceived><subject>Re: gcc 2.95.2 wrong install?</subject><body>

&gt; | | &gt; /usr/lib/gcc-lib/i486-pc-linux-gnu/2.95.2/include/stddef.h:118: declaration does not declare anything
&gt; 
&gt; What mean this?

In C and C++, declarations are used to introduce variables, functions
and the like. Every declaration has a name. For example,

  int x;

declares a variable, and gives it a name (x). If you just write

  int;

you get such an error: the declaration does not declare anything.

Regards,
Martin

</body></email><email><emailId>20000202102333</emailId><senderName>"dung nguyen"</senderName><senderEmail>dnguyen14@hotmail.com</senderEmail><timestampReceived>2000-02-02 10:23:33-0400</timestampReceived><subject>C and Postgresql</subject><body>

Hello,
  I want to make a C program using Postgresql server. Please show me where I 
can find documentation about this?
Thanks.
D
______________________________________________________
Get Your Private, Free Email at http://www.hotmail.com

</body></email><email><emailId>20000217141638</emailId><senderName>"Shenderovich, Uri"</senderName><senderEmail>uri_shenderovich@icomverse.com</senderEmail><timestampReceived>2000-02-17 14:16:38-0400</timestampReceived><subject>C++ executable linked with libm</subject><body>

Hi all,
Could somebody tell me, why all c++ executables linked with libm.
Even the simplest one of the form '#include&lt;iostream&gt; main() { cout &lt;&lt;
"hello" &lt;&lt; endl;}' .
(Besides this , from the output of 'ldd' it's possible to see that the same
executable is linked with libc , but not with stdc++)
If I use C counterpart program like '#include&lt;stdio.h&gt; main() {
printf("hello\n");}' the libm is not linked with the executable.

I use gcc/g++ -2.95.2 and ldd-2.1.1
Thanks,
Uri

BTW I have try to do the same with pgcc-2.95.2 , and eventhough it still
links the executable with libc and libm , but it links 
the libstdc++ as well , contrary to gcc-2.95.2 

</body></email><email><emailId>20000220031652</emailId><senderName>Todd Warner</senderName><senderEmail>taw@pobox.com</senderEmail><timestampReceived>2000-02-20 03:16:52-0400</timestampReceived><subject>Re: g++</subject><body>

To all readers on the list: 
  If you don't know it already, Stroustrup's book, though wonderful, is flawed. I am \
referring to "The C++ Programming Language". Make sure you get the errata before you \
waste someone's precious time. Sorry Martin... :(

On Sun, 20 Feb 2000 01:19:14 +0100, "Martin v. Loewis" \
&lt;martin@loewis.home.cs.tu-berlin.de&gt; wrote:
&gt; 
&gt; &gt; &gt; &gt; Anyone know when namespaces will be implemented?
&gt; &gt; &gt; 
&gt; &gt; &gt; They are implemented since egcs 1.1.0 (released September 3, 1998),
&gt; &gt; &gt; and are also part of gcc 2.95.
&gt; &gt; 
&gt; &gt; A work-around has been implemented. Not an implementation to standard.
&gt; 
&gt; Pardon me? Why is the namespace implementation in g++ not according to
&gt; the standard? Give examples.
&gt; 
&gt; If you are referring to the treatment of 'namespace std': This is an
&gt; extension, which can be turned of with -fhonor-std. On all other
&gt; namespaces, g++ behaves conforming.

YOU ARE RIGHT! My mistake... I investigated further... sorry about that.
I *did* upgrade GCC fairly recently (a month), so maybe my problems with
that was pre-egcs 1.1.*. Sorry about that... Hey... this is how I learn! :)

&gt; &gt; &gt; &gt; How about proper usage of such things as cin.getline()?
&gt; &gt; &gt; 
&gt; &gt; &gt; What is the problem? It works for me.
&gt; &gt; 
&gt; &gt; Yes, cin.getline() works... but not to ANSI standard.
&gt; Again, don't make such claims without foundations. Examples?

I am going by Stroustrup.... I finally checked out his various errata! He made
a number of mistakes, including this one. egcs is correct! If interested
the error is on page .... 51. And makes perfect sense in retrospect.

&gt; Also, it is primarily an ISO standard, not an ANSI one.
&gt; 
&gt; &gt; I'll check it out... but what about #include &lt;stringstream&gt; ?
&gt; 
&gt; What about it? There is no such header in standard C++.

Again, you are right! Stroustrup typo-ed again! Page 119, 1st paragraph! Now, this \
BOOK is frustrating me a bit.

&gt; &gt; Checked out the website... thanks... I know people are working on
&gt; &gt; these things.  I just wanted to vent my frustration and let people
&gt; &gt; know that the people coding out here are trying to use these
&gt; &gt; standard features... and we are afraid that competitors may be
&gt; &gt; moving ahead of GCC...
&gt; 
&gt; I'm not afraid of that. When it comes to the compiler proper, I know
&gt; of no competition that is closer to the standard than g++ (EDG
&gt; compilers are on a similar level, though).

&gt; For the library, libstdc++ v3 should be much better than the current
&gt; one.
Great!

&gt; If all you wanted is to vent your frustration, I feel sorry that I
&gt; wasted my time responding to you.

I am sorry you did waste your time! I should have looked at the errata for Stroustrup \
sooner, and should have tried out namespaces again after the upgrade. No, I didn't \
*just* want to vent. I did really want to get to the bottom of some of these issues. \
And I still would love to see a implemented/ not implemented features list. 

I appreciate your time. You have educated me, and I value that. To me it was not a \
waste of time, but I am sure you see it otherwise. I appologize. We are not all \
gurus, you know... not yet anyway. :)

&gt; Regards,
&gt; Martin

-- 
Todd Warner (email: taw@pobox.com || warner.9@wright.edu)
 - Computer geek at large - CS student at Wright State University
 - Staff Sergeant, US Army Tank Commander (M1 series MBTs)
 - GNU/Linux fanatic - GnuPG/PGP public key: http://pgp5.ai.mit.edu


</body></email><email><emailId>20000220102436</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-02-20 10:24:36-0400</timestampReceived><subject>Re: Prombles regarding gcc</subject><body>

&gt; I am new to linux and have linux-2.2.5 installed in my computer I am
&gt; facing few problems as described below 1. gcc -g sample.c
&gt; error:/usr/i386-linux/bin/ld :can't open crt1.o

You didn't say what Linux distribution (redhat, debian, suse) you are
using. It looks like an error that /usr/i386-linux/bin/ld is invoked -
why does it not invoke /usr/bin/ld. Also, crt1.o should be found in
/usr/lib/crt1.o.

Most likely, you forgot to install essential files on your system. On
a redhat system, crt1.o is part of the glibc-devel package;
/usr/bin/ld is part of the binutils package. Make sure these packages
are installed on your system.

Regards,
Martin

</body></email><email><emailId>20000220103159</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-02-20 10:31:59-0400</timestampReceived><subject>Re: warning stuff</subject><body>

&gt; He wanted gcc to issue warning about unused functions of a program.
&gt; Is it possible at all?

If the functions are static, gcc will warn if they are not used. So
making 'potentially unused' functions static will allow a better
diagnosis.

If you want to know which extern functions are unused, the compiler
cannot decide it on its own - you have to wait until you see the
linker line to know what is used and what is not.

To omit unused functions during linking, one approach is to pass
-ffunction-sections to the compiler, and --gc-sections to the
linker. That only works for -static linking.

With this approach, it is also possible to find out functions removed
during linking: Invoke nm on the resulting executable, and on each
input object file. Comparing the symbol lists gives you the unused
functions.

Regards,
Martin

</body></email><email><emailId>20000225141613</emailId><senderName></senderName><senderEmail>kini</senderEmail><timestampReceived>2000-02-25 14:16:13-0400</timestampReceived><subject>Problems with devpt of chat server</subject><body>

Hi there people
I am trying to develop a chat server kind of a thing with a server and multiple \
clients, so that if the client sends a message to the server the server displays it. \
Now the thing is that even though this may sound very simple Im a newbie at Linux and \
hence am stuck. 

The program is giving unexpected results, I am enclosing the code, which is very \
small about 200 lines 130 for server and the rest for the client, the program uses \
sockets for communication. Please do try and help and bear with the coding technique \
cause it is one of a newbie

Thanks in advance
Aditya


Client

#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
#include&lt;unistd.h&gt;
#include&lt;fcntl.h&gt;
#include&lt;sys/socket.h&gt;
#include&lt;sys/types.h&gt;
#include&lt;netinet/in.h&gt;
#include&lt;arpa/inet.h&gt;
#include&lt;errno.h&gt;
#include&lt;stdlib.h&gt;

# define PORT 5556
# define MAX 512
# define SERVERHOST "127.0.0.1"

void write_to_server(int fileid)
{
  int nbytes;
  char buffer[MAX];
  fprintf(stdout,"\nEnter the message");
  fscanf(stdin,"%s",buffer);
  nbytes=write(fileid,buffer,MAX);
  if(nbytes&lt;0) {
    perror("Error in write");
    exit(EXIT_FAILURE);
  }
}

int main(void)
{
  int sock;
  struct sockaddr_in serv_addr;
  char choice;
  sock=socket(AF_INET,SOCK_STREAM,0);
  if(sock&lt;0) {
    perror("Error in write");
    exit(EXIT_FAILURE);
  }

  bzero((char *) &amp;serv_addr, sizeof(serv_addr));
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_addr.s_addr = inet_addr(SERVERHOST);
  serv_addr.sin_port = htons(PORT);

  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) {
       	perror("client: error in creating socket\n");
       	exit(EXIT_FAILURE);
  }
  if (connect(sock, (struct sockaddr *) &amp;serv_addr, sizeof(serv_addr)) &lt; 0) {
       	perror("error in connecting to server\n");
       	exit(EXIT_FAILURE);
  }

  do{
    write_to_server(sock);
    fprintf(stdout,"\n\tAnmother message?\t");

    fscanf(stdin,"%c",&amp;choice);
    } while(choice!='n');
   

  close(sock);
  exit(EXIT_SUCCESS);
}



/*Client ends here*/

/*Server starts here */
/*This is the server code*/
#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
#include&lt;unistd.h&gt;
#include&lt;fcntl.h&gt;
#include&lt;sys/socket.h&gt;
#include&lt;sys/types.h&gt;
#include&lt;netinet/in.h&gt;
#include&lt;arpa/inet.h&gt;
#include&lt;errno.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;sys/time.h&gt;
#include&lt;fcntl.h&gt;

# define PORT   5556
# define MAX 512


void init_flags(int []);
int read_from_client(int fileid)
{
  
  char buffer[MAX];
  int nbytes;
  /* fprintf(stdout,"reading from client");*/


  nbytes=read(fileid,buffer,MAX);

   if(nbytes&lt;0) {
    perror("Read error");
    exit(EXIT_FAILURE);
    }
   else if(nbytes==0) 
     return -1;
     else {

    fprintf(stdout,"Server got message:%s",buffer);
    return 1;

     }
}


void init_flags(int flags[])
{
  int i;
  for(i=0;i&lt;MAX;i++)
    flags[i]=0;
}

int main(void)
{
  int sock;
  int u;
  fd_set active_fd_set,read_fd_set,write_fd_set;
  int i;
  struct sockaddr_in clientname,servername;
  size_t size;

  int flags[MAX];

  struct timeval time;
  time.tv_sec =0;
  time.tv_usec=0;               /*Time set*/

 if((sock=socket(AF_INET,SOCK_STREAM,0))&lt;0) {
    perror("unable ot make socket :server");
    exit(EXIT_FAILURE);
  }

  bzero((char *)&amp;servername,sizeof(servername));
  servername.sin_family=AF_INET;
  servername.sin_addr.s_addr=htonl(INADDR_ANY);
  servername.sin_port=htons(PORT);

  if(bind(sock,(struct sockaddr *)&amp;servername,sizeof(servername))&lt;0) {
    perror("error in binding server");
    exit(EXIT_FAILURE);
  }

  if(listen(sock,5)&lt;0) {
    perror("Error in listening");
    exit(EXIT_FAILURE);
  }

  FD_ZERO(&amp;active_fd_set);
  FD_SET(sock,&amp;active_fd_set);
  /* init_flags(flags);*/
  while(1) {
    
    read_fd_set=active_fd_set;
    
    if(select(FD_SETSIZE,&amp;read_fd_set,NULL,NULL,&amp;time)&lt;0) {
      perror("acceError in select");
      exit(EXIT_FAILURE);
    }
    
    for(i=0;i&lt;FD_SETSIZE;++i) {
    
      if(FD_ISSET(i,&amp;read_fd_set)) {
	if(i==sock /*&amp;&amp;flags[i]==0*/) {
	  int newsock;
	  fprintf(stdout,"%d ==%d",sock,i);
	 
	  
	  size=sizeof(clientname);
	 fprintf(stdout,"In .....twetwet.");

	 
	  
	  newsock=accept(sock,(struct sockaddr *)&amp;clientname,&amp;size);
	  /*flags[i]=1;*/
	  printf("Adding new client....");

	  if(newsock&lt;0) {
	    perror("Error in accept");
	    exit(EXIT_FAILURE); 
	  }

	  FD_SET(newsock,&amp;active_fd_set);
	}
	else {
	  if(read_from_client(i)) {
	    /* close(i);*/
	       FD_CLR(i,&amp;active_fd_set);
	       fprintf(stdout,"Aditya");
	  }
	}
      }
    }
  }
}


</body></email><email><emailId>20000225230530</emailId><senderName>Horst von Brand</senderName><senderEmail>vonbrand@sleipnir.valparaiso.cl</senderEmail><timestampReceived>2000-02-25 23:05:30-0400</timestampReceived><subject>Re: glibc 2.1.3</subject><body>

"David S. Miller" &lt;davem@redhat.com&gt; said:
&gt; Ugh...

--- locale/C-ctype.c.~1~	Thu Feb 24 14:48:02 2000
+++ locale/C-ctype.c	Thu Feb 24 22:16:42 2000
@@ -376,7 +376,7 @@
     { string: NULL },
-     { string: (const char *) (_nl_C_LC_CTYPE_tolower + 128) }
+     { string: (const char *) (_nl_C_LC_CTYPE_tolower + 128) },
 #if BYTE_ORDER == BIG_ENDIAN
    { string: NULL },
 #endif
   }
 };

This is more symmetric, and (IMVHO) less error-prone
-- 
Horst von Brand                             vonbrand@sleipnir.valparaiso.cl
Casilla 9G, Viña del Mar, Chile                               +56 32 672616

</body></email><email><emailId>20000228100015</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@suse.de</senderEmail><timestampReceived>2000-02-28 10:00:15-0400</timestampReceived><subject>Re: Floating point traps on x86/glibc 2.1.2</subject><body>

&gt;&gt;&gt;&gt;&gt; Florian Weimer writes:

 &gt; Isn't the following program supposed to be killed by SIGFPE?  It
The compiler is too smart ;-)
 &gt; prints `inf', just as if the call to fesetenv() wasn't there. 

 &gt; #include &lt;fenv.h&gt;

 &gt; main()
 &gt; {
 &gt;   fesetenv (FE_NOMASK_ENV);
 &gt;   printf("%g\n", 1.0 / 0.0);
 &gt; }

Try the following program:

#define _GNU_SOURCE 1
#include &lt;fenv.h&gt;
#include &lt;stdio.h&gt;

int
main(void)
 {
   double one, zero;

   one = 1.0;
   zero = 0.0;
   fesetenv (FE_NOMASK_ENV);
   printf("%g\n", one / zero);
}

$ /opt/gcc-2.95/bin/gcc -Wall    fenv.c   -o fenv
$ ./fenv 
Floating point exception

-- 
 Andreas Jaeger
  SuSE Labs aj@suse.de
   private aj@arthur.rhein-neckar.de

</body></email><email><emailId>20000217144857</emailId><senderName>"Gabor Z. Papp"</senderName><senderEmail>gzp@news.gzp.org.hu</senderEmail><timestampReceived>2000-02-17 14:48:57-0400</timestampReceived><subject>Re: gcc 2.95.2 wrong install?</subject><body>

| | &gt; /usr/lib/gcc-lib/i486-pc-linux-gnu/2.95.2/include/stddef.h:118: declaration does not declare anything

What mean this?

</body></email><email><emailId>20000217045603</emailId><senderName>Todd Warner</senderName><senderEmail>taw@pobox.com</senderEmail><timestampReceived>2000-02-17 04:56:03-0400</timestampReceived><subject>g++</subject><body>

Anyone know when namespaces will be implemented?

How about proper usage of such things as cin.getline()?

Hmmm... what else... stringstreams????

What's the status? Can anyone direct me where I can find out?


-- 
Todd Warner (email: taw@pobox.com || warner.9@wright.edu)
 - Computer geek at large - CS student at Wright State University
 - Staff Sergeant, US Army Tank Commander (M1 series MBTs)
 - GNU/Linux fanatic - GnuPG/PGP public key: http://pgp5.ai.mit.edu

</body></email><email><emailId>20000220085214</emailId><senderName>"nitc"</senderName><senderEmail>nitc@bom4.vsnl.net.in</senderEmail><timestampReceived>2000-02-20 08:52:14-0400</timestampReceived><subject>Prombles regarding gcc</subject><body>

Dear sir ;
              I am new to linux and have linux-2.2.5  installed in my computer
I am facing few problems as described below
1. gcc -g sample.c
error:/usr/i386-linux/bin/ld :can't open crt1.o

2 I have to compile the program separately(using option -c , -S ) and linking done manually
 /lib/ld.so =&gt; a.out dynamic linker/loader (libc-2.1.so)
/lib/ld-linux.so.1 -&gt; /lib/ld-linux.so.1.9.9 ELF library
/lib/ld-linux.so.2
/lib/libc.so.6 (shared library)
creating a.out  but from command line /. a.out does not run
althouh ../../ ls -F shows a.out*(executible)
           ../../ ls -l
           rwxr-xr-x (executabe)a.out
3.gcc -v   reading from space /usr/lib/gcc-lib/egcs/..
  not  gcc-2.7.1

LOOKING FOR YOURS EARLIEST REPLY 
                                                                 THANKING YOU IN ANTICIPATION
                                                                   SANJAY TIWARI(INDIA)
                                               E-MAIL    nitc@vsnl.com
                                                              sanjaytiw@yahoo.com

      

[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD W3 HTML//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;

&lt;META content=text/html;charset=iso-8859-1 http-equiv=Content-Type&gt;
&lt;META content='"MSHTML 4.72.3110.7"' name=GENERATOR&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;Dear sir ;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT 
size=2&gt;              \
 I am new to linux and have linux-2.2.5  installed in my 
computer&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;I am facing few problems as described below&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;1. gcc -g sample.c&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;error:/usr/i386-linux/bin/ld :can't open crt1.o&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;2 I have to compile the program separately(using option -c , 
-S ) and linking done manually&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt; /lib/ld.so =&gt; a.out dynamic linker/loader 
(libc-2.1.so)&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;&lt;/FONT&gt;&lt;FONT color=#000000 size=2&gt;/lib/ld-linux.so.1 -&gt; 
/lib/ld-linux.so.1.9.9 ELF library&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt;&lt;FONT size=2&gt;&lt;/FONT&gt;&lt;FONT color=#000000 
size=2&gt;/lib/ld-linux.so.2&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;/lib/libc.so.6 (shared library)&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;creating a.out  but from command line /. a.out does not 
run&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;althouh ../../ ls -F shows a.out*(executible)&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;           
../../ ls -l&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;           
rwxr-xr-x (executabe)a.out&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;&lt;/FONT&gt;&lt;FONT size=2&gt;3.gcc -v   reading from space 
/usr/lib/gcc-lib/egcs/..&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;  not &lt;/FONT&gt;&lt;FONT size=2&gt; gcc-2.7.1&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;LOOKING FOR YOURS EARLIEST REPLY &lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT 
size=2&gt;             &amp; \
nbsp;             &amp;nb \
sp;               \
;                       \
 THANKING YOU IN ANTICIPATION&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT 
size=2&gt;             &amp; \
nbsp;             &amp;nb \
sp;               \
;                         \
 SANJAY TIWARI(INDIA)&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT 
size=2&gt;             &amp; \
nbsp;             &amp;nb \
sp;                   \
 E-MAIL    &lt;A 
href="mailto:nitc@vsnl.com"&gt;nitc@vsnl.com&lt;/A&gt;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;&lt;/FONT&gt;&lt;FONT color=#000000 
size=2&gt;             &amp; \
nbsp;             &amp;nb \
sp;               \
;                    \
 &lt;A href="mailto:sanjaytiw@yahoo.com"&gt;sanjaytiw@yahoo.com&lt;/A&gt;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT size=2&gt;      &lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;



</body></email><email><emailId>20000225034542</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-02-25 03:45:42-0400</timestampReceived><subject>glibc 2.1.3</subject><body>

I've uploaded the 2.1.3 release of glibc to

	ftp://sourceware.cygnus.com/pub/glibc/releases

There you can find the files

	glibc-2.1.3.tar.bz2	(also .gz)
	glibc-2.1.2-2.1.3.diff.gz
	glibc-linuxthreads-2.1.3.tar.gz

There is no new crypt add-on since it hasn't changed.

This release fixes many bugs in all parts of the library and everybody
is encouraged to update.  Preferably through your distribution
provider since compiling glibc yourself means taking a risk unless you
know exactly what you are doing.

This release should be fully compatible (both directions) with glibc
2.1.2.  The only part which changed is the format of the files
containing the locale data.  This can be easily fixed by running the
`localedef' program for the locales which get used on the system (or
by running `make localedata/install-locales' to update all of them).

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------

</body></email><email><emailId>20000228094741</emailId><senderName>Florian Weimer</senderName><senderEmail>fw@deneb.cygnus.argh.org</senderEmail><timestampReceived>2000-02-28 09:47:41-0400</timestampReceived><subject>Floating point traps on x86/glibc 2.1.2</subject><body>

Isn't the following program supposed to be killed by SIGFPE?  It
prints `inf', just as if the call to fesetenv() wasn't there. 

#include &lt;fenv.h&gt;

main()
{
  fesetenv (FE_NOMASK_ENV);
  printf("%g\n", 1.0 / 0.0);
}

</body></email><email><emailId>20000225061232</emailId><senderName>"David S. Miller"</senderName><senderEmail>davem@redhat.com</senderEmail><timestampReceived>2000-02-25 06:12:32-0400</timestampReceived><subject>Re: glibc 2.1.3</subject><body>


Ugh...

--- locale/C-ctype.c.~1~	Thu Feb 24 14:48:02 2000
+++ locale/C-ctype.c	Thu Feb 24 22:16:42 2000
@@ -376,7 +376,7 @@
     { string: NULL },
     { string: (const char *) (_nl_C_LC_CTYPE_tolower + 128) }
 #if BYTE_ORDER == BIG_ENDIAN
-    { string: NULL },
+    , { string: NULL },
 #endif
   }
 };

</body></email><email><emailId>20000225080350</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@suse.de</senderEmail><timestampReceived>2000-02-25 08:03:50-0400</timestampReceived><subject>Re: glibc 2.1.3</subject><body>

&gt;&gt;&gt;&gt;&gt; Ulrich Drepper writes:

 &gt; I've uploaded the 2.1.3 release of glibc to
 &gt; 	ftp://sourceware.cygnus.com/pub/glibc/releases

 &gt; There you can find the files

 &gt; 	glibc-2.1.3.tar.bz2	(also .gz)
 &gt; 	glibc-2.1.2-2.1.3.diff.gz
 &gt; 	glibc-linuxthreads-2.1.3.tar.gz

 &gt; There is no new crypt add-on since it hasn't changed.

I've uploaded the files now to ftp.gnu.org so that they will appear
soon on your local gnu mirror.

Please note that the crypt add-on is only available from ftp.gwdg.de
(see README or FAQ for details).

Andreas

 &gt; This release fixes many bugs in all parts of the library and everybody
 &gt; is encouraged to update.  Preferably through your distribution
 &gt; provider since compiling glibc yourself means taking a risk unless you
 &gt; know exactly what you are doing.

 &gt; This release should be fully compatible (both directions) with glibc
 &gt; 2.1.2.  The only part which changed is the format of the files
 &gt; containing the locale data.  This can be easily fixed by running the
 &gt; `localedef' program for the locales which get used on the system (or
 &gt; by running `make localedata/install-locales' to update all of them).

-- 
 Andreas Jaeger
  SuSE Labs aj@suse.de
   private aj@arthur.rhein-neckar.de

</body></email><email><emailId>20000218221313</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-02-18 22:13:13-0400</timestampReceived><subject>Re: g++</subject><body>

&gt; Anyone know when namespaces will be implemented?

They are implemented since egcs 1.1.0 (released September 3, 1998),
and are also part of gcc 2.95.

&gt; How about proper usage of such things as cin.getline()?

What is the problem? It works for me.

&gt; Hmmm... what else... stringstreams????

You may want to try the version in
http://gcc.gnu.org/ml/gcc/2000-02/msg00448/sstream,

or you can try libstdc++ v3.

&gt; What's the status? Can anyone direct me where I can find out?

gcc.gnu.org, sourceware.cygnus.com.

Regards,
Martin

</body></email><email><emailId>20000220001914</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-02-20 00:19:14-0400</timestampReceived><subject>Re: g++</subject><body>

&gt; &gt;&gt; Anyone know when namespaces will be implemented?
&gt; &gt;
&gt; &gt; They are implemented since egcs 1.1.0 (released September 3, 1998),
&gt; &gt; and are also part of gcc 2.95.
&gt; 
&gt; A work-around has been implemented. Not an implementation to standard.

Pardon me? Why is the namespace implementation in g++ not according to
the standard? Give examples.

If you are referring to the treatment of 'namespace std': This is an
extension, which can be turned of with -fhonor-std. On all other
namespaces, g++ behaves conforming.

&gt; &gt;&gt; How about proper usage of such things as cin.getline()?
&gt; &gt;
&gt; &gt; What is the problem? It works for me.
&gt; 
&gt; Yes, cin.getline() works... but not to ANSI standard.

Again, don't make such claims without foundations. Examples?

Also, it is primarily an ISO standard, not an ANSI one.

&gt; I'll check it out... but what about #include &lt;stringstream&gt; ?

What about it? There is no such header in standard C++.

&gt; Checked out the website... thanks... I know people are working on
&gt; these things.  I just wanted to vent my frustration and let people
&gt; know that the people coding out here are trying to use these
&gt; standard features... and we are afraid that competitors may be
&gt; moving ahead of GCC...

I'm not afraid of that. When it comes to the compiler proper, I know
of no competition that is closer to the standard than g++ (EDG
compilers are on a similar level, though).

For the library, libstdc++ v3 should be much better than the current
one.

If all you wanted is to vent your frustration, I feel sorry that I
wasted my time responding to you.

Regards,
Martin

</body></email><email><emailId>20000105084928</emailId><senderName>Raju K V</senderName><senderEmail>raju.kurunkad@wipro.com</senderEmail><timestampReceived>2000-01-05 08:49:28-0400</timestampReceived><subject>Re: stl question</subject><body>

try
http://sourceware.cygnus.com/libstdc++/links.html

R

On Wed, Jan 05, 2000 at 03:22:58PM +0800, Fenglou Mao [mao@linux2.ipc.pku.edu.cn] wrote:
&gt; Hi,all,
&gt;    Can anyone tell me where I can find an online document about
&gt; g++ stl?
&gt; 
&gt; Sincerely Yours,
&gt; 
&gt; FengLou Mao
&gt; *******************************
&gt; ADD:Mr. FengLou Mao
&gt;     Institute of Physical Chemistry
&gt;     Peking University
&gt;     BeiJing
&gt;     P.R.China
&gt; Tel:86-10-62756833
&gt; Fax:86-10-62751725

</body></email><email><emailId>20000110215317</emailId><senderName>Tanner Lovelace</senderName><senderEmail>lovelace@cs.unc.edu</senderEmail><timestampReceived>2000-01-10 21:53:17-0400</timestampReceived><subject>Re: Fatel signal 11</subject><body>

Matthias Kleine wrote:
&gt; 
&gt; Hi!
&gt; 
&gt; Is it true that especially about the AMD K6-2 CPU are reported more
&gt; problems than about Intel processors? Does anybody know something about
&gt; this?
&gt; 

It is, but only under some circumstances.  See this
web page for more info:

http://www.multimania.com/poulot/k6bug.html

-- 
Tanner Lovelace                  Department of Computer Science
lovelace@cs.unc.edu              UNC-Chapel Hill, CB #3175
http://www.cs.unc.edu/~lovelace  Chapel Hill, NC  27599-3175

</body></email><email><emailId>20000113060933</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-01-13 06:09:33-0400</timestampReceived><subject>Re: Speed of loading shared libs</subject><body>

&gt; Basically, a GTK app maps to the screen almost instantly. The
&gt; delay is imperceptible - the window maps before your finger
&gt; leaves the return key.
&gt; 
&gt; A Qt app takes significantly longer. On my machine, the delay
&gt; seems to be about 1/2 to 1 second.

To all the other valid comments, I'd like to add that the choice of
programming language might also have significant impact on
performance. In C++, it is possible to write programs which consume a
lot of processing power, without that effect being directly visible
from the source code. For example, creating and destroying thousands
of objects, or invoking numerous virtual functions would have such an
effect.

It was proposed that the usage of the X protocol in GTK is more
efficient than in Qt. To verify whether this is the case, run both
programs with strace, and count the sheer number of system
calls. Also, count the number of bytes passed to system calls
(especially read and write).

To find out where the time is going inside the libraries, you'd need
to compile both libraries, and the applications, with the -pg option
of gcc(1), and analyse the outcome with gprof(1); this is what was
already recommend when Andreas suggested "profiling".

Regards,
Martin

</body></email><email><emailId>20000114083149</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-01-14 08:31:49-0400</timestampReceived><subject>Re: stl const_iterator question.</subject><body>

&gt; Yes, for vector, it has no error, but for set, it has errors and
&gt; warnings.

You cannot modify the elements in a set. A set is a container with
unique keys; modifying them might destroy the uniqueness property.

Therefore, set::begin returns a const iterator.

Regards,
Martin

</body></email><email><emailId>20000114203145</emailId><senderName></senderName><senderEmail>docyo@musicyo.com</senderEmail><timestampReceived>2000-01-14 20:31:45-0400</timestampReceived><subject>Greetings for MusicYo.com!</subject><body>

Dear linux-gcc@vger.rutge,

Greetings from www.MusicYo.com! Your only source for brand-name, brand-new
gear at factory-direct prices!

In case you haven't visited us lately, here's what's new!

WIN A KRAMER GUITAR!
--------------------
	* Stop by and enter to WIN a Kramer Baretta FX-404S guitar!
	  http://www.musicyo.com/freestuf.asp?target=freesuf%2Easp

PRODUCT NEWS!
-------------
On the product front we've now got IN STOCK AND READY FOR IMMEDIATE
PURCHASE...

	* Slingerland 5-pc Jam Session Drum Kits for $229
	  http://www.musicyo.com/product.asp?dept%5Fid=2&amp;pf%5Fid=017


	* MusicYo Personal Guitar Amplifiers for $17.99
	  http://www.musicyo.com/product.asp?dept%5Fid=4&amp;pf%5Fid=223


	* Celestion G12T-75 Speakers for $49.99
	  http://www.musicyo.com/product.asp?dept%5Fid=4&amp;pf%5Fid=224


	* Kramer Vanguards for $179
	  http://www.musicyo.com/product.asp?dept%5Fid=1&amp;pf%5Fid=014


	* MusicYo Gigbags for $7.99
	  http://www.musicyo.com/product.asp?dept%5Fid=4&amp;pf%5Fid=100

YO PLANET!
----------
	* Check out our new section called 'Yo Planet'. In it you will find
instructions on the set-up and maintenance of your instrument as well as
product reviews and more!
	  http://www.musicyo.com/yoplanet.asp

	* You can even download 'Rock-Hard' - our exclusive Kramer ScreenMate -
for FREE! He walks... he talks... he gets down!
	  http://www.musicyo.com/yoplanet.asp

Thanks a lot and thanks for visiting www.MusicYo.com!

Doc Yo
MusicYo.com
'What Will I Play Today?'


_____________________________________________________________________
Further transmissions to you by the sender of this e-mail may be stopped
at no cost to you by visiting http://www.musicyo.com/mailinglist.asp. If
you wish to change your mailing list options, such as request future
mailings in HTML format, please visit
http://www.musicyo.com/mailinglist.asp.

</body></email><email><emailId>20000117185314</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-01-17 18:53:14-0400</timestampReceived><subject>binutils 2.9.5.0.24 is released</subject><body>

This is the beta release of binutils 2.9.5.0.24 for Linux, which is
based on binutils 2000 0113 plus various changes. It is purely for
Linux, although it has been tested on Solaris/Sparc and Solaris/x86
from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.9.5.0.24 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared
}    %{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker:
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m ar
melf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.9.5.0.24.tar.gz. Source code.
2. binutils-2.9.5.0.22-2.9.5.0.24.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.5.0.24-1.i386.rpm. IA-32 binary RPM for RedHat 6.1.

There is no separate source rpm. You can do

# rpm -ta binutils-2.9.5.0.24.tar.gz

to create both binary and source rpms.

The primary ftp sites for the beta Linux binutils are:

1. ftp://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
01/13/2000

</body></email><email><emailId>20000119193700</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-01-19 19:37:00-0400</timestampReceived><subject>Re: remote debugging</subject><body>

I don't see why not.  For instance, you can fire up gdb in a telnet
session and give it the program file and pid of the process you are
trying to debug, and it should attach that process.

A serial cable over which you run ppp or slip is just as much a network
as a 2 node ethernet lashup.

Lawson

On Wed, 19 Jan 2000, Great One wrote:

&gt; 
&gt; hi
&gt; 
&gt; Is it possible to debug a program remotely
&gt; via network (by GDB, the word network means
&gt; real network with ethernet cards, not serial
&gt; cable) ?
&gt; The program uses svgalib, so it's difficult to
&gt; debug it normally.
&gt; 
&gt; thank you
&gt; 




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000104014855</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-01-04 01:48:55-0400</timestampReceived><subject>Re: Fatel signal 11</subject><body>



On Tue, 4 Jan 2000, Keith Duthie wrote:

&gt; On Tue, 4 Jan 2000, Adam Klein wrote:
&gt; 
&gt; &gt; I am trying to compile the kernel but I get this fatel signal 11
error
&gt; &gt; when i run :
&gt; &gt; 
&gt; &gt; $ make modules
&gt; 
&gt; &gt; what should i do here is the error:
&gt; If you are overclocking, you should stop overclocking. If you aren't
&gt; overclocking you should have your hardware looked at.
&gt; 
It is possible that version of the compiler _might_ be buggy.  One of
the Wine developers reported that gcc-2.91 generated incorrect
code; switching to gcc-2.95.2 fixed the problem.  It's not clear to me
if he was referring to egcs gcc-2.91 or plain gcc-2.91.  Personally, I
think anything that will touch c++ code is buggy by definition, but if
you must have c++, get a current version of egcs.  :-)  Also, have a
read of 

http://www.bitwizard.nl/sig11/

for some hints on how to debug your hardware in case it's not the
compiler.  gcc is a great tool for finding hardware bugs.  For a really
thorough test, see if you can compile the current version of Wine.
You'll need about 200mb of disk space and 64mb virtual (RAM+swap) to
finish the compile.

 
ftp://metalab.unc.edu/pub/Linux/ALPHA/wine/development/Wine-991212.tar.gz
 
ftp://tsx-11.mit.edu/pub/linux/ALPHA/Wine/development/Wine-991212.tar.gz
 
ftp://ftp.infomagic.com/pub/mirrors/linux/sunsite/ALPHA/wine/development/Wine-991212.tar.gz
  ftp://orcus.progsoc.uts.edu.au/pub/Wine/development/Wine-991212.tar.gz
&gt; -- 
&gt; Understanding is a three edged sword. Do you *want* to get the point?
&gt;      http://www.albatross.co.nz/~psycho/     O-      -&gt;&lt;-
&gt; 
Lawson
	  &gt;&lt; Microsoft free environment

This mail client runs on Wine.  Your mileage may vary.




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000111041717</emailId><senderName>Rik Hemsley</senderName><senderEmail>rik@kde.org</senderEmail><timestampReceived>2000-01-11 04:17:17-0400</timestampReceived><subject>Speed of loading shared libs</subject><body>

Hi,

I've recently become very concerned about the speed of application
loading when using certain X11 tookits.

On my travels, I've managed to pick up a fair bit of info, much
of which may have been misleading, or just plain wrong.

I think I may now be asking in the right place. Please correct
me if I'm misguided !

It seems that depending on the toolkit used, different X11 apps
take significantly different amounts of time to begin. By 'begin',
I mean map to the display.

I've checked the initialisation mechanisms of various toolkits
and found they're all practically the same. The delay experienced
before an application maps to the screen seems to take place
_before_ the code begins executing.

So here is my (current) conclusion - that may or may not be correct:

The amount of time it takes for an X11 app to map to the screen
is a function of the amount of symbols in the shared libraries
it loads.

Does this sound reasonable ?

If this is the case, does it mean that ld.so is responsible for
this delay ?

To do a real-world test, I tried creating a 4-line app to create
and map an X11 window. I did this with the GTK and Qt toolkits.

I'm afraid my measurement is only done by perception. If anyone
can tell me how to perform proper measurements, I'll go away
and try again :)

Basically, a GTK app maps to the screen almost instantly. The
delay is imperceptible - the window maps before your finger
leaves the return key.

A Qt app takes significantly longer. On my machine, the delay
seems to be about 1/2 to 1 second.

My attempt at measuring the number of symbols in the libraries
used follows.

I ran objdump --dynamic-syms on the libraries used by two 'hello, world'
apps.

Note: I ignored any extra libs with a tiny number of symbols (libICE, etc)

Qt: libqt
Total symbols: 9927

GTK: libglib libgtk libgdk
Total symbols: 3052

So it looks like libqt has 3 times the number of symbols as the various
GTK-related libraries combined.

I'm not convinced I've worked this out properly - It doesn't
seem quite logical to me that 3 times the number of symbols should
produce such a disparity in load time.

While this doesn't make perfect sense to me, nothing else seems
to add up either. Because I don't know how much of a difference a
large number of symbols makes, I'm asking here !

Am I looking in the right direction, blaming ld.so ? Or should I
look elsewhere ? Any pointers appreciated !

Cheers,
Rik

</body></email><email><emailId>20000111143449</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@suse.de</senderEmail><timestampReceived>2000-01-11 14:34:49-0400</timestampReceived><subject>Re: Speed of loading shared libs</subject><body>

&gt;&gt;&gt;&gt;&gt; Rik Hemsley writes:

Rik&gt; Hi,
Rik&gt; I've recently become very concerned about the speed of application
Rik&gt; loading when using certain X11 tookits.

Rik&gt; On my travels, I've managed to pick up a fair bit of info, much
Rik&gt; of which may have been misleading, or just plain wrong.

Rik&gt; I think I may now be asking in the right place. Please correct
Rik&gt; me if I'm misguided !

Rik&gt; It seems that depending on the toolkit used, different X11 apps
Rik&gt; take significantly different amounts of time to begin. By 'begin',
Rik&gt; I mean map to the display.

Rik&gt; I've checked the initialisation mechanisms of various toolkits
Rik&gt; and found they're all practically the same. The delay experienced
Rik&gt; before an application maps to the screen seems to take place
Rik&gt; _before_ the code begins executing.

Rik&gt; So here is my (current) conclusion - that may or may not be correct:

Rik&gt; The amount of time it takes for an X11 app to map to the screen
Rik&gt; is a function of the amount of symbols in the shared libraries
Rik&gt; it loads.

Rik&gt; Does this sound reasonable ?

Rik&gt; If this is the case, does it mean that ld.so is responsible for
Rik&gt; this delay ?

You can check this yourself if you're using glibc 2.1.x on an i686
compiled for an i686:
$ LD_DEBUG=statistics ls
13661:
13661:  runtime linker statistics:
13661:    total startup time in dynamic loader: 714186 clock cycles
13661:              time needed for relocation: 480435 clock cycles (67.2%)
13661:                   number of relocations: 289
13661:             time needed to load objects: 152416 clock cycles (21.3%)

If glibc was compiled for i386, you only get:
$ LD_DEBUG=statistics ls
13662:                   number of relocations: 289

But I don't think this shows the problem. 

I do advise to start profiling your libs to see where the time is
spend.

Andreas
-- 
 Andreas Jaeger
  SuSE Labs aj@suse.de
   private aj@arthur.rhein-neckar.de

</body></email><email><emailId>20000112142706</emailId><senderName></senderName><senderEmail>linas</senderEmail><timestampReceived>2000-01-12 14:27:06-0400</timestampReceived><subject>Re: Speed of loading shared libs</subject><body>

It's been rumoured that Rik Hemsley said:
&gt; 
&gt; The amount of time it takes for an X11 app to map to the screen
&gt; is a function of the amount of symbols in the shared libraries
&gt; it loads.
&gt; 
&gt; Does this sound reasonable ?

My gut feel is that this would be totally irrelevent.  There is
consdierable intialization that happens within the X server and the X
libs that depends a lot on what the application wants and is doing.  
e.g. one applicatino may choose the default visual, another may go
through a long visual selection process.   A 'visual' is an x11 
abstraction of certain framebuffer/hardware capabilites. 

Note also there are buffering issues: X11 protocol is not flushed from
app to server until a variety of events occur.  If these don't occur,
or a flush isn't forced by the app, they can sit there indefinietley.

Finally, windows typically do not become visible to the user until 
the app calls XMapWindow(); XFlush();  and there are technical &amp;
performance reasons for not dong this asap, but rather, waiting 
till late in the initialization process.

Your qt/gtk differences are almost 100% due to how much protocol 
the app ant the server exchanged prior to when the x server 
received and processed the xMapWindow protocol request element.
We are talking about tens of millions of cpu cycles here; the ld.so
portion of this is a drop in the bucket.

--linas

</body></email><email><emailId>20000110134358</emailId><senderName>Fenglou Mao</senderName><senderEmail>mao@linux2.ipc.pku.edu.cn</senderEmail><timestampReceived>2000-01-10 13:43:58-0400</timestampReceived><subject>stl const_iterator question.</subject><body>

Hi, all,
    I want to use an interator of this type:

       set&lt;MyObject, lt&lt;MyObject&gt; &gt;::iterator  i;

    I think I can use statement like this:

    1.      (*i).x+=1.0;

     or

    2.      MyObject&amp; t=*i;

    But the g++ compiler always think "i" is a const_iterator,
it give error for 1, and warning for 2.

    Who can tell me why?

Sincerely Yours,

FengLou Mao
*******************************
ADD:Mr. FengLou Mao
    Institute of Physical Chemistry
    Peking University
    BeiJing
    P.R.China
Tel:86-10-62756833
Fax:86-10-62751725

</body></email><email><emailId>20000113061817</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-01-13 06:18:17-0400</timestampReceived><subject>Re: stl const_iterator question.</subject><body>

&gt;     I think I can use statement like this:
&gt; 
&gt;     1.      (*i).x+=1.0;
&gt; 
&gt;      or
&gt; 
&gt;     2.      MyObject&amp; t=*i;
&gt; 
&gt;     But the g++ compiler always think "i" is a const_iterator,
&gt; it give error for 1, and warning for 2.
&gt; 
&gt;     Who can tell me why?

If i is a const_iterator, the object referred-to by the iterator is
const, and you must not modify it. If the object is const, then (*i).x
is also const, and you cannot assign to it. Also, *i is of type
"MyObject const &amp;"; you should not assign this to a variable of type
"MyObject&amp;", as this also gives you a way to modify *i, even though *i
is const.

Regards,
Martin

</body></email><email><emailId>20000113153103</emailId><senderName>Fenglou Mao</senderName><senderEmail>mao@linux2.ipc.pku.edu.cn</senderEmail><timestampReceived>2000-01-13 15:31:03-0400</timestampReceived><subject>Re: stl const_iterator question.</subject><body>

On Thu, 13 Jan 2000, Martin v. Loewis wrote:

&gt; &gt;     I think I can use statement like this:
&gt; &gt; 
&gt; &gt;     1.      (*i).x+=1.0;
&gt; &gt; 
&gt; &gt;      or
&gt; &gt; 
&gt; &gt;     2.      MyObject&amp; t=*i;
&gt; &gt; 
&gt; &gt;     But the g++ compiler always think "i" is a const_iterator,
&gt; &gt; it give error for 1, and warning for 2.
&gt; &gt; 
&gt; &gt;     Who can tell me why?
&gt; 
&gt; If i is a const_iterator, the object referred-to by the iterator is
&gt; const, and you must not modify it. If the object is const, then (*i).x
&gt; is also const, and you cannot assign to it. Also, *i is of type
&gt; "MyObject const &amp;"; you should not assign this to a variable of type
&gt; "MyObject&amp;", as this also gives you a way to modify *i, even though *i
&gt; is const.

i is not a const_iterator, just an iterator.

Sincerely Yours,

FengLou Mao
*******************************
ADD:Mr. FengLou Mao
    Institute of Physical Chemistry
    Peking University
    BeiJing
    P.R.China
Tel:86-10-62756833
Fax:86-10-62751725

</body></email><email><emailId>20000113212354</emailId><senderName>"Martin v. Loewis"</senderName><senderEmail>martin@loewis.home.cs.tu-berlin.de</senderEmail><timestampReceived>2000-01-13 21:23:54-0400</timestampReceived><subject>Re: stl const_iterator question.</subject><body>

&gt; i is not a const_iterator, just an iterator.

Maybe I'm still missing something, but I cannot observe the behaviour
that you report. When I compile

#include &lt;vector&gt;
struct A
{
};

int main()
{
  vector&lt;A&gt; x;
  vector&lt;A&gt;::iterator i= x.begin();
  A&amp; a = *i;
}

with g++ 2.95.2, it compiles just fine.

Regards,
Martin

</body></email><email><emailId>20000114023958</emailId><senderName>Fenglou Mao</senderName><senderEmail>mao@linux2.ipc.pku.edu.cn</senderEmail><timestampReceived>2000-01-14 02:39:58-0400</timestampReceived><subject>Re: stl const_iterator question.</subject><body>

Yes, for vector, it has no error, but for set,
it has errors and warnings.


On Thu, 13 Jan 2000, Martin v. Loewis wrote:

&gt; &gt; i is not a const_iterator, just an iterator.
&gt; 
&gt; Maybe I'm still missing something, but I cannot observe the behaviour
&gt; that you report. When I compile
&gt; 
&gt; #include &lt;vector&gt;
&gt; struct A
&gt; {
&gt; };
&gt; 
&gt; int main()
&gt; {
&gt;   vector&lt;A&gt; x;
&gt;   vector&lt;A&gt;::iterator i= x.begin();
&gt;   A&amp; a = *i;
&gt; }
&gt; 
&gt; with g++ 2.95.2, it compiles just fine.
&gt; 
&gt; Regards,
&gt; Martin
&gt; 

Sincerely Yours,

FengLou Mao
*******************************
ADD:Mr. FengLou Mao
    Institute of Physical Chemistry
    Peking University
    BeiJing
    P.R.China
Tel:86-10-62756833
Fax:86-10-62751725

</body></email><email><emailId>20000114024856</emailId><senderName>Fenglou Mao</senderName><senderEmail>mao@linux2.ipc.pku.edu.cn</senderEmail><timestampReceived>2000-01-14 02:48:56-0400</timestampReceived><subject>Re: stl const_iterator question.</subject><body>

On 11 Jan 2000, Aaron M. Ucko wrote:

&gt; Fenglou Mao &lt;mao@linux2.ipc.pku.edu.cn&gt; writes:
&gt; 
&gt; &gt;     I want to use an interator of this type:
&gt; &gt; 
&gt; &gt;        set&lt;MyObject, lt&lt;MyObject&gt; &gt;::iterator  i;
&gt; [...]
&gt; &gt;     But the g++ compiler always think "i" is a const_iterator,
&gt; &gt; it give error for 1, and warning for 2.
&gt; &gt; 
&gt; &gt;     Who can tell me why?
&gt; 
&gt; set is an _associative container_, which means that it arranges
&gt; elements according to the given comparison functor for efficient
&gt; acces.  If you modify elements in place, you might cause them to be
&gt; disarranged, which may cause elements to be lost or even lead to other
&gt; problems.
&gt; 
How can I modify an element? copy it out, modify it, erase old one,
insert the new one? It is really an ugly way, and I think the
abstract data-structure "set" don't require programmer to know so
much about the details.

Sincerely Yours,

FengLou Mao
*******************************
ADD:Mr. FengLou Mao
    Institute of Physical Chemistry
    Peking University
    BeiJing
    P.R.China
Tel:86-10-62756833
Fax:86-10-62751725

</body></email><email><emailId>20000104035818</emailId><senderName>Adam Klein</senderName><senderEmail>asklein@thegrid.net</senderEmail><timestampReceived>2000-01-04 03:58:18-0400</timestampReceived><subject>Fatel signal 11</subject><body>

I am trying to compile the kernel but I get this fatel signal 11 error
when i run :

$ make modules

Here is the version:
Reading specs from /usr/lib/gcc-lib/i386-redhat-linux/egcs-2.91.66/specs

gcc version egcs-2.91.66 19990314/Linux (egcs-1.1.2 release)

what should i do here is the error:

gcc -D__KERNEL__ -I/usr/src/linux-2.2.12/include -Wall
-Wstrict-prototypes -O2 -
fomit-frame-pointer -fno-strict-aliasing -pipe -fno-strength-reduce
-m386 -DCPU=
386 -DMODULE -DMODVERSIONS -include
/usr/src/linux-2.2.12/include/linux/modversi
ons.h   -c -o ip2main.o ip2main.c
gcc: Internal compiler error: program cc1 got fatal signal 11
make[2]: *** [ip2main.o] Error 1
make[2]: Leaving directory `/usr/src/linux-2.2.12/drivers/char'
make[1]: *** [_modsubdir_char] Error 2
make[1]: Leaving directory `/usr/src/linux-2.2.12/drivers'
make: *** [_mod_drivers] Error 2
[root@Masq-Gate linux]# cpp: output pipe has been closed
{standard input}: Assembler messages:
{standard input}:4417: Warning: end of file not at end of a line;
newline insert
ed
{standard input}:6502: Error: no such 386 instruction: `m'

</body></email><email><emailId>20000104041603</emailId><senderName>Keith Duthie</senderName><senderEmail>psycho@albatross.co.nz</senderEmail><timestampReceived>2000-01-04 04:16:03-0400</timestampReceived><subject>Re: Fatel signal 11</subject><body>

On Tue, 4 Jan 2000, Adam Klein wrote:

&gt; I am trying to compile the kernel but I get this fatel signal 11 error
&gt; when i run :
&gt; 
&gt; $ make modules

&gt; what should i do here is the error:
If you are overclocking, you should stop overclocking. If you aren't
overclocking you should have your hardware looked at.

-- 
Understanding is a three edged sword. Do you *want* to get the point?
     http://www.albatross.co.nz/~psycho/     O-      -&gt;&lt;-

</body></email><email><emailId>20000105153832</emailId><senderName>"Matthias Kleine"</senderName><senderEmail>matthias.kleine@selflinux.de</senderEmail><timestampReceived>2000-01-05 15:38:32-0400</timestampReceived><subject>Re: Fatel signal 11</subject><body>

Hi!

Is it true that especially about the AMD K6-2 CPU are reported more
problems than about Intel processors? Does anybody know something about
this?

Bye,
Matthias

 -- 

SelfLinux  http://www.selflinux.de  Matthias.Kleine@selflinux.de

</body></email><email><emailId>20000119215010</emailId><senderName>Great One</senderName><senderEmail>suda_j@iol.cz</senderEmail><timestampReceived>2000-01-19 21:50:10-0400</timestampReceived><subject>remote debugging</subject><body>


hi

Is it possible to debug a program remotely
via network (by GDB, the word network means
real network with ethernet cards, not serial
cable) ?
The program uses svgalib, so it's difficult to
debug it normally.

thank you

</body></email><email><emailId>20000119203351</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-01-19 20:33:51-0400</timestampReceived><subject>Re: problems with linking</subject><body>



On Wed, 19 Jan 2000, Great One wrote:

&gt; 
&gt; hi
&gt; 
&gt; I've created two libraries (static ones)
&gt; and the second one uses a function from
&gt; the first one. 
&gt; 
&gt; I normally link them like this
&gt; 
&gt; ar r lib1.a lib1.o
&gt; ranlib r lib1.a
&gt; 
&gt; ar r lib2.a lib2.o
&gt; ranlib r lib2.a
&gt; 
&gt; then I try to link my program like this
&gt; 
&gt; gcc -o program program.o -l1 -l2
&gt; 
&gt; The linker keeps telling me that it's
&gt; impossible to find the function called
&gt; in the second library which is normally
&gt; present in the first one. Everything starts
&gt; to work when I call this function in program.c.
&gt; 
&gt; Does anybody know how to solve this ?
&gt; 
&gt; Thank You.
&gt; 
gcc -o program program.o '-Wl,-(,-l1,-l2,-)'


from info ld:


`-( ARCHIVES -)'
`--start-group ARCHIVES --end-group'
     The ARCHIVES should be a list of archive files.  They may be
     either explicit file names, or `-l' options.

     The specified archives are searched repeatedly until no new
     undefined references are created.  Normally, an archive is
     searched only once in the order that it is specified on the
     command line.  If a symbol in that archive is needed to resolve an
     undefined symbol referred to by an object in an archive that
     appears later on the command line, the linker would not be able to
     resolve that reference.  By grouping the archives, they all be
     searched repeatedly until all possible references are resolved.

     Using this option has a significant performance cost.  It is best
     to use it only when there are unavoidable circular references
     between two or more archives.
&gt; 
I don't see why you don't just put both .o files in the same lib.a, but
you are the programmer.

Lawson

&lt;&lt; Sardines of the world unite! &lt;&lt;
&gt;&gt; You have nothing to lose but your cans. &gt;&gt;




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000125082014</emailId><senderName></senderName><senderEmail>songjpg@yahoo.com</senderEmail><timestampReceived>2000-01-25 08:20:14-0400</timestampReceived><subject>How to generate a.out binary on RedHat6.0?</subject><body>

Hello all,
  As in RH6.0, gcc will generate ELF binary by
default.
How can i tell it to generate a.out binary for me?

Thanks in advance.

__________________________________________________
Do You Yahoo!?
Talk to your friends online with Yahoo! Messenger.
http://im.yahoo.com

</body></email><email><emailId>20000119214930</emailId><senderName>Great One</senderName><senderEmail>suda_j@iol.cz</senderEmail><timestampReceived>2000-01-19 21:49:30-0400</timestampReceived><subject>problems with linking</subject><body>


hi

I've created two libraries (static ones)
and the second one uses a function from
the first one. 

I normally link them like this

ar r lib1.a lib1.o
ranlib r lib1.a

ar r lib2.a lib2.o
ranlib r lib2.a

then I try to link my program like this

gcc -o program program.o -l1 -l2

The linker keeps telling me that it's
impossible to find the function called
in the second library which is normally
present in the first one. Everything starts
to work when I call this function in program.c.

Does anybody know how to solve this ?

Thank You.

</body></email><email><emailId>20000120084743</emailId><senderName>The Chazman</senderName><senderEmail>chaz@devastator.extern.ucsd.edu</senderEmail><timestampReceived>2000-01-20 08:47:43-0400</timestampReceived><subject>Re: problems with linking</subject><body>

&gt; I've created two libraries (static ones)
&gt; and the second one uses a function from
&gt; the first one. 
&gt;
&gt; I normally link them like this
&gt;
&gt; ar r lib1.a lib1.o
&gt; ranlib r lib1.a
&gt;
&gt; ar r lib2.a lib2.o
&gt; ranlib r lib2.a
&gt;
&gt; then I try to link my program like this
&gt;
&gt; gcc -o program program.o -l1 -l2
&gt;
&gt; The linker keeps telling me that it's
&gt; impossible to find the function called
&gt; in the second library which is normally
&gt; present in the first one. Everything starts
&gt; to work when I call this function in program.c.
&gt;
&gt; Does anybody know how to solve this ?

Reverse the order in which the libraries are linked:

gcc -o program program.o -l2 -l1

GNU ld (the linker called by gcc) will link in only what is needed
up until the current point.  If program.o doesn't call anything in
lib1, then lib1 will be ignored in your original comand line.  The
linker then moves on to lib2, which is needed because program.o
references something in it.  If this generates a dependency on a
symbol in lib1, that will go unresolved, because the linker does not
go back and try lib1 again.  Each library is linked once, in the order
given on the command line.  If you want the linker to try a library
multiple times, you must list it multiple times on the command line,
as in:

gcc -o program program.o -l1 -l2 -l1

This is perfectly legal, and in fact, used all the time by gcc for
its own internal and standard libraries.

                            ------Carl

</body></email><email><emailId>20000121041614</emailId><senderName>"Tan Su Wei"</senderName><senderEmail>swtan@mmu.edu.my</senderEmail><timestampReceived>2000-01-21 04:16:14-0400</timestampReceived><subject>installing gcc 2.8.1 for cross compilation</subject><body>

Hi,
    I'm new to linux, and currently need to install a program on my redhat 6.0 \
(kernel 2.2.15) on an i686 which needs gcc 2.8.1.   The gcc need to be configure for \
c and c++ compiler and as a cross compiler... I'd tried to read the instruction for \
gcc INSTALL file and gcc-HOWTO document...but I still not sure how to do it...

    Can some please show me how to do it...

Thank you.
Regards
Tan Su Wei


[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;&lt;HEAD&gt;
&lt;META content="text/html; charset=iso-8859-1" http-equiv=Content-Type&gt;
&lt;META content="MSHTML 5.00.2014.210" name=GENERATOR&gt;
&lt;STYLE&gt;&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Hi,&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;    I'm new to linux, and currently 
need to install a program on my redhat 6.0 (kernel 2.2.15) on an i686 which 
needs gcc 2.8.1. &lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;    The gcc need to be configure for 
c and c++ compiler and as a cross compiler...&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;I'd tried to read the instruction for gcc INSTALL 
file and gcc-HOWTO document...but I still not sure how to do it...&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;    Can some please show me how to 
do it...&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Thank you.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Regards&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Tan Su Wei&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;


</body></email><email><emailId>20000121183304</emailId><senderName></senderName><senderEmail>linas</senderEmail><timestampReceived>2000-01-21 18:33:04-0400</timestampReceived><subject>Re: problems with linking</subject><body>


In fact, most/all linkers work this way.  For example, libXm
the motif library contains symbols that duplicate symbols in
libXt (i.e. 'overload' them).  Thus linking -lXm -lXt will
produce correct libraries, whereas -lXt -lXm will create apps with
weird coredumps/bad behaviour.

--linas

It's been rumoured that The Chazman said:
&gt; 
&gt; &gt; I've created two libraries (static ones)
&gt; &gt; and the second one uses a function from
&gt; &gt; the first one. 
&gt; &gt;
&gt; &gt; I normally link them like this
&gt; &gt;
&gt; &gt; ar r lib1.a lib1.o
&gt; &gt; ranlib r lib1.a
&gt; &gt;
&gt; &gt; ar r lib2.a lib2.o
&gt; &gt; ranlib r lib2.a
&gt; &gt;
&gt; &gt; then I try to link my program like this
&gt; &gt;
&gt; &gt; gcc -o program program.o -l1 -l2
&gt; &gt;
&gt; &gt; The linker keeps telling me that it's
&gt; &gt; impossible to find the function called
&gt; &gt; in the second library which is normally
&gt; &gt; present in the first one. Everything starts
&gt; &gt; to work when I call this function in program.c.
&gt; &gt;
&gt; &gt; Does anybody know how to solve this ?
&gt; 
&gt; Reverse the order in which the libraries are linked:
&gt; 
&gt; gcc -o program program.o -l2 -l1
&gt; 
&gt; GNU ld (the linker called by gcc) will link in only what is needed
&gt; up until the current point.  If program.o doesn't call anything in
&gt; lib1, then lib1 will be ignored in your original comand line.  The
&gt; linker then moves on to lib2, which is needed because program.o
&gt; references something in it.  If this generates a dependency on a
&gt; symbol in lib1, that will go unresolved, because the linker does not
&gt; go back and try lib1 again.  Each library is linked once, in the order
&gt; given on the command line.  If you want the linker to try a library
&gt; multiple times, you must list it multiple times on the command line,
&gt; as in:
&gt; 
&gt; gcc -o program program.o -l1 -l2 -l1
&gt; 
&gt; This is perfectly legal, and in fact, used all the time by gcc for
&gt; its own internal and standard libraries.
&gt; 
&gt;                             ------Carl
&gt; 

</body></email><email><emailId>20000125153216</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-01-25 15:32:16-0400</timestampReceived><subject>Re: How to generate a.out binary on RedHat6.0?</subject><body>

Hello one :-)

Why would you want to?  I think you would have to run it as a
cross-compiler, meaning it (the compiler) would have to have been
configured with a target of i386-*-linux-gnuaout or so.  You can see
what targets you have available with ls /usr[/local]/lib/gcc-lib, but I
doubt any stock distro compiler bothers with a.out on x86 any more.  You
could install the source for the compiler, configure it for a.out, and
build and install it, but it seems like a lot of work.

Lawson

Blore's Razor:
        Given a choice between two theories, take the one which is
funnier.

On Tue, 25 Jan 2000, [gb2312] Song Jianping wrote:

&gt; Hello all,
&gt;   As in RH6.0, gcc will generate ELF binary by
&gt; default.
&gt; How can i tell it to generate a.out binary for me?
&gt; 
&gt; Thanks in advance.
&gt; 
&gt; __________________________________________________
&gt; Do You Yahoo!?
&gt; Talk to your friends online with Yahoo! Messenger.
&gt; http://im.yahoo.com
&gt; 




________________________________________________________________
YOU'RE PAYING TOO MUCH FOR THE INTERNET!
Juno now offers FREE Internet Access!
Try it today - there's no risk!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.

</body></email><email><emailId>20000126042753</emailId><senderName>Hiroyuki Machida</senderName><senderEmail>machida@sm.sony.co.jp</senderEmail><timestampReceived>2000-01-26 04:27:53-0400</timestampReceived><subject>bugfix: incorrect va_arg() definition for 32bit MIPS</subject><body>


Hi.
I have been building gcc 2.95.2 on 32bit MIPS/Linux box.
During this work, I found a inverted 'ifdef' on defining 
va_arg() macro in gcc/ginclude/va-mips.h.
That is, definition of va_arg for 32bit little endian and 32bit big
endian is inverted.

You can repeat this problem running a attached test program.
I guess gcc on IRIX 5.? or O32 ABI box has same problem.
Have you ever experienced same problem on 32bit MIPS box?

Sample fix is attached at the bottom.

VERSION:
	gcc 2.95.2 on MIPS/Linux
	gcc 2.7.2  on MIPS/Linux 
	egcs-1.0.2 on MIPS/Linux


REPEAT BY:

Compile and run this program. 
The program will print "OK", if va_arg() accept args correclty.

/*
 * 
 * stdarg.c  -- Simple stdarg test.
 *	Pass #of pairs and (type, value) pairs using stdarg.h.
 *	And check if passed values are correctly accepted.
 *
 */

#include&lt;stdarg.h&gt;

int foo(int nargs, ...)
{
	va_list ap;
	int i;
	int ng = 0;
	long long expected;
	long long passed;

	/* get # of args */
	va_start(ap, nargs);
	printf("  # of args:%d\n",nargs);

	for (i=1; i&lt;= nargs ; i++) {
		char type;
		int d; long long ll; char c; char *s;

		/* calc. expceted value */
		expected=i; 
		if ( expected &amp; 1 ) expected = -expected;

		/* get type of the arg */
		type = (char ) va_arg(ap, char);
		switch (type) {
		   case 'i': /* int */
			d = va_arg(ap, int);
			passed=d; 
			printf("%10s: expected:%3lld,\t passed:%3lld\n",
				"int", expected, passed);
			if ( passed != expected) ng ++;
			break;
		  case 'L':  /* long long */
			ll = va_arg(ap, long long);
			passed=ll;
			printf("%10s: expected:%3lld,\t passed:%3lld\n",
				"long long", expected, passed);
			if ( passed != expected) ng ++;
			break;
		  case 'c':  /* char */
			c = (char) va_arg(ap, char);
			passed=(long long) (c - '0');
			printf("%10s: expected:%3lld,\t passed:%3lld\n",
				"char", expected, passed);
			if ( passed != expected) ng ++;
			break;
		  case 's':  /* char * */
			s = va_arg(ap, char *);
			passed=(long long)atol(s);
			printf("%10s: expected:%3lld,\t passed:%3lld\n",
				"string", expected, passed);
			if ( passed != expected) ng ++;
			break;
		  default:  /* Unknown */
			printf("  unkown type:%4d: argptr:0x%8.8x\n",
				type,(void *)ap);
			ng ++;
			break;
		}
	}
	va_end(ap);
	return ng;
}

int main()
{
	int ng;

	printf("*\n");
	printf("* Simple stdarg test.\n");
	printf("*\n");

	/* Pass # of pairs and  (type, order&lt;*&gt;) pairs  */
	/* order&lt;*&gt; number must be minus value if order is odd */
	ng = foo(6,
		'i', -1,
		'c', '2',
		'L', (long long)-3,
		's', "4",
		'i', -5 ,
		'c', '6');

	if (ng) {
		printf("NG\n");
	}
	else {
		printf("OK\n");
	}
	return ng;
}






SAMPLE FIX:

gcc/ginclude/va-mips.h

retrieving revision 1.1.1.1
retrieving revision 1.2
diff -u -p -r1.1.1.1 -r1.2
--- va-mips.h	1999/05/19 13:14:31	1.1.1.1
+++ va-mips.h	1999/11/08 09:48:26	1.2
@@ -254,19 +254,19 @@ void va_end (__gnuc_va_list);		/* Define
 
 #ifdef __MIPSEB__
 /* For big-endian machines.  */
+#define va_arg(__AP, __type)						    \
+  ((__type *) (void *) (__AP = (char *) ((__alignof__(__type) &gt; 4	    \
+				? ((__PTRDIFF_TYPE__)__AP + 8 - 1) &amp; -8	    \
+				: ((__PTRDIFF_TYPE__)__AP + 4 - 1) &amp; -4)    \
+					 + __va_rounded_size(__type))))[-1]
+#else
+/* For little-endian machines.  */
 #define va_arg(__AP, __type)					\
   ((__AP = (char *) ((__alignof__ (__type) &gt; 4			\
 		      ? ((__PTRDIFF_TYPE__)__AP + 8 - 1) &amp; -8	\
 		      : ((__PTRDIFF_TYPE__)__AP + 4 - 1) &amp; -4)	\
 		     + __va_rounded_size (__type))),		\
    *(__type *) (void *) (__AP - __va_rounded_size (__type)))
-#else
-/* For little-endian machines.  */
-#define va_arg(__AP, __type)						    \
-  ((__type *) (void *) (__AP = (char *) ((__alignof__(__type) &gt; 4	    \
-				? ((__PTRDIFF_TYPE__)__AP + 8 - 1) &amp; -8	    \
-				: ((__PTRDIFF_TYPE__)__AP + 4 - 1) &amp; -4)    \
-					 + __va_rounded_size(__type))))[-1]
 #endif
 #endif
 #endif /* ! defined (__mips_eabi)  */


---
Hiroyuki Machida		machida@sm.sony.co.jp
Creative Station		SCEI / Sony Corp.

</body></email><email><emailId>20000126151126</emailId><senderName>Przemek Borys</senderName><senderEmail>pborys@dione.ids.pl</senderEmail><timestampReceived>2000-01-26 15:11:26-0400</timestampReceived><subject>warning stuff</subject><body>

EHLO!

On a newsgroup one person had the following problem:
He wanted gcc to issue warning about unused functions of a program.
Is it possible at all?
If not, then will it be possible one day? :)

-- 
____\___\___
(_(\|,|_|,|_  Gassho! [http://dione.ids.pl/~pborys][pinfo&amp;mr  home]
    |   | |.  [PTM,teksty o zen,programowaniu,moje sf,xfaq_pl,inne]

</body></email><email><emailId>20000127174526</emailId><senderName>"Gabor Z. Papp"</senderName><senderEmail>gzp@news.gzp.org.hu</senderEmail><timestampReceived>2000-01-27 17:45:26-0400</timestampReceived><subject>gcc 2.95.2 wrong install?</subject><body>

Wichert Akkerman wrote:

&gt; &gt; c++ -D_REENTRANT -D_GNU_SOURCE -O2 -DHAVE_CONFIG_H \
&gt; &gt; -DLOCALEDIR=\"/usr/local/share/locale\" -I../intl -I../intl -I../include -I.. -I. \
&gt; &gt; -I../include -I.. -I. -D_REENTRANT -D_GNU_SOURCE -O2 -c helpmsgs.cc
&gt; &gt; In file included from ../config.h:257,
&gt; &gt; from helpmsgs.h:9,
&gt; &gt; from helpmsgs.cc:6:
&gt; &gt; /usr/lib/gcc-lib/i486-pc-linux-gnu/2.95.2/include/stddef.h:118: declaration does \
&gt; &gt; not declare anything
&gt; &gt; make[1]: *** [helpmsgs.o] Error 1
&gt; &gt; make[1]: Leaving directory `/mnt/part2/src/dpkg-1.6.7/dselect'
&gt; &gt; make: *** [all-recursive] Error 2
&gt; 
&gt; This is definitely an error in your compiler installation, not a dpkg
&gt; bug.

This is a linux 2.3.40 running on x86, glibc 2.1.2
gcc 2.95.2 installed manually. What can be the problem?

My gcc's configure options was the following:

--prefix=/usr
--enable-shared
--enable-threads
--enable-cpp
--enable-languages=c,c++


</body></email><email><emailId>20001229191240</emailId><senderName>"Dnyaneshwar  Pawar"</senderName><senderEmail>d_n_p@rediffmail.com</senderEmail><timestampReceived>2000-12-29 19:12:40-0400</timestampReceived><subject>is it working</subject><body>

Is this list working. I haven't received any message from this list for last two days. This is the new list I suppose.
	Sorry for truoble

_____________________________________________________
Chat with your friends as soon as they come online. Get Rediff Bol at
http://bol.rediff.com




-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001009175027</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@cd-club.ru</senderEmail><timestampReceived>2000-10-09 17:50:27-0400</timestampReceived><subject>Re: glibc 2.1.94 (getlogin has a bug)</subject><body>

When getlogin() is called by a setgid program, it returns NULL.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001102200534</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@cd-club.ru</senderEmail><timestampReceived>2000-11-02 20:05:34-0400</timestampReceived><subject>Re: glibc 2.1.96 (sysdeps/i386/i486/bits/string.h has a bug)</subject><body>

The strcmp implementation has a problem. If either of arguments is of
type (void*) then the __strcmp_xx macros will dereference this void
pointer with all the consequences. And, say, bind-9 can't be
compiled... So, here is the straightforward patch.



--- glibc-2.1.95-/sysdeps/i386/i486/bits/string.h	Thu Sep 21 02:51:57 2000
+++ glibc-2.1.95-/sysdeps/i386/i486/bits/string+.h	Thu Nov  2 23:33:11 2000
@@ -1065,49 +1065,49 @@
 			: __strcmp_gg (s1, s2)))))
 
 #define __strcmp_cc(s1, s2, l) \
-  (__extension__ ({ register int __result = ((unsigned char) (s1)[0]	      \
-					     - (unsigned char) (s2)[0]);      \
+  (__extension__ ({ register int __result = (((unsigned char*) (s1))[0]	      \
+					     - ((unsigned char*) (s2))[0]);   \
 		    if (l &gt; 0 &amp;&amp; __result == 0)				      \
 		      {							      \
-			__result = ((unsigned char) (s1)[1]		      \
-				    - (unsigned char) (s2)[1]);		      \
+			__result = (((unsigned char*) (s1))[1]		      \
+				    - ((unsigned char*) (s2))[1]);	      \
 			if (l &gt; 1 &amp;&amp; __result == 0)			      \
 			  {						      \
-			    __result = ((unsigned char) (s1)[2]		      \
-					- (unsigned char) (s2)[2]);	      \
+			    __result = (((unsigned char*) (s1))[2]	      \
+					- ((unsigned char*) (s2))[2]);	      \
 			    if (l &gt; 2 &amp;&amp; __result == 0)			      \
-			      __result = ((unsigned char) (s1)[3]	      \
-					  - (unsigned char) (s2)[3]);	      \
+			      __result = (((unsigned char*) (s1))[3]	      \
+					  - ((unsigned char*) (s2))[3]);      \
 			  }						      \
 		      }							      \
 		    __result; }))
 
 #define __strcmp_cg(s1, s2, l1) \
   (__extension__ ({ __const unsigned char *__s2 = (unsigned char *) (s2);     \
-		    register int __result = (unsigned char) (s1)[0] - __s2[0];\
+		    register int __result = ((unsigned char*) (s1))[0] - __s2[0];\
 		    if (l1 &gt; 0 &amp;&amp; __result == 0)			      \
 		      {							      \
-			__result = (unsigned char) (s1)[1] - __s2[1];	      \
+			__result = ((unsigned char*) (s1))[1] - __s2[1];      \
 			if (l1 &gt; 1 &amp;&amp; __result == 0)			      \
 			  {						      \
-			    __result = (unsigned char) (s1)[2] - __s2[2];     \
+			    __result = ((unsigned char*) (s1))[2] - __s2[2];  \
 			    if (l1 &gt; 2 &amp;&amp; __result == 0)		      \
-			      __result = (unsigned char) (s1)[3] - __s2[3];   \
+			      __result = ((unsigned char*) (s1))[3] - __s2[3];\
 			  }						      \
 		      }							      \
 		    __result; }))
 
 #define __strcmp_gc(s1, s2, l2) \
   (__extension__ ({ __const unsigned char *__s1 = (unsigned char *) (s1);     \
-		    register int __result = __s1[0] - (unsigned char) (s2)[0];\
+		    register int __result = __s1[0] - ((unsigned char*) (s2))[0];\
 		    if (l2 &gt; 0 &amp;&amp; __result == 0)			      \
 		      {							      \
-			__result = __s1[1] - (unsigned char) (s2)[1];	      \
+			__result = __s1[1] - ((unsigned char*) (s2))[1];      \
 			if (l2 &gt; 1 &amp;&amp; __result == 0)			      \
 			  {						      \
-			    __result = __s1[2] - (unsigned char) (s2)[2];     \
+			    __result = __s1[2] - ((unsigned char*) (s2))[2];  \
 			    if (l2 &gt; 2 &amp;&amp; __result == 0)		      \
-			      __result = __s1[3] - (unsigned char) (s2)[3];   \
+			      __result = __s1[3] - ((unsigned char*) (s2))[3];\
 			  }						      \
 		      }							      \
 		    __result; }))



By the way, what were the reasons to make these 3 macros which all do
the same? It seems that one inline function would look better...
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001009192056</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@cd-club.ru</senderEmail><timestampReceived>2000-10-09 19:20:56-0400</timestampReceived><subject>Re: glibc 2.1.94 (getlogin has a bug)</subject><body>

I've just posted about getlogin(). PS: it happens on a devfs system,
on a usual system all ok.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001229202332</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-12-29 20:23:32-0400</timestampReceived><subject>binutils 2.10.1.0.4 is released.</subject><body>

This is the beta release of binutils 2.10.1.0.4 for Linux, which is
based on binutils 2000 1221 in CVS on sourecware.cygnus.com plus
various changes. It is purely for Linux, although it has been tested
on Solaris/Sparc and Solaris/x86 from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.10.1.0.4 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.10.1.0.2:

1. Update from binutils 2000 1221.

Changes from binutils 2.10.0.33:

1. Update from binutils 2000 1119.
2. It has some symbol versioning related updates.

Changes from binutils 2.10.0.32:

1. Update from binutils 2000 1018.
2. A proper ELF/PPC visibility fix.
3. m68k-a.out is supposed to be fixed.

Changes from binutils 2.10.0.31:

1. Update from binutils 2000 1014.
2. An ELF/PPC weak symbol bug fix.
3. A new linkonce section name approach.
4. m68k-a.out is still broken. To be fixed.

Changes from binutils 2.10.0.29:

1. Update from binutils 2000 1011.
2. Back out the linkonce section name change so that C++ will work.
A different approach is being worked on.
3. m68k-a.out is known to be broken. To be fixed.

Changes from binutils 2.10.0.26:

1. Update from binutils 2000 1008.

Changes from binutils 2.10.0.24:

1. Update from binutils 2000 0907.

Changes from binutils 2.10.0.18:

1. Update from binutils 2000 0823. Fix DT_RPATH/DT_RUNPATH handling.
Fix the ELF/ia32 DSO not compiled with PIC.
2. Try to fix the ELF visibility bug on PPC with glibc 2.2.

Changes from binutils 2.10.0.12:

1. Update from binutils 2000 0720.
2. Fix the DT_NEEDED link bug.
3. Add the new DT_XXXX dynamic tags. Glibc 2.2 will use them at least
on libpthread.so.

Changes from binutils 2.10.0.9:

1. Update from binutils 2000 0701. Fix the parallel build in ld when PE
is enabled.

Changes from binutils 2.9.5.0.46:

1. Update from binutils 2000 0617. The demangler support for the new
g++ ABI. Minor fix for the ELF visibility. Fix linking non-ELF
relocatable object files under ELF with symbol versioning.
2. Support for linking PE relocatable object files under ia32/ELF.

Changes from binutils 2.9.5.0.42:

1. Update from binutils 2000 0604. The ELF visibility attribuite should
work correctly now.
2. The ia32 assembler has changed the way it assembles the "jmp"
instructions to the global symbols. The old assembler will optimize the
jump to the global symbol defined in the same source file so that no
relocation will be used. The new assembler will use relocation for
global jumps. It will mainly affect PIC asm code. The segment like

	.globl  __setjmp
__setjmp:
	...
	jmp __sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:

is no longer PIC safe since "jmp __sigsetjmp" jumps to a global symbol
and relocation will be used. Instead, it can be changed to

	.globl  __setjmp
__setjmp:
	...
	jmp sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:
sigsetjmp:

so that "jmp sigsetjmp" jumps to a local symbol and the new assembler
will optimize out the relocation.

Changes from binutils 2.9.5.0.41:

1. Update from binutils 2000 0512.
2. Add testsuite for ELF visibility.

Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.10.1.0.4.tar.gz. Source code.
2. binutils-2.10.1.0.2-2.10.1.0.4.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.10.1.0.4-1.i386.rpm. IA-32 binary RPM for RedHat 7.0.

There is no separate source rpm. You can do

# rpm -ta binutils-2.10.1.0.4.tar.gz

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://ftp.valinux.com/pub/support/hjl/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
12/29/2000
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org


</body></email><email><emailId>20001230011733</emailId><senderName>Josue Emmanuel Amaro</senderName><senderEmail>josue.amaro@oracle.com</senderEmail><timestampReceived>2000-12-30 01:17:33-0400</timestampReceived><subject>gcc and binutils for IA-64</subject><body>

All,

I am interested on any information regarding the "merging" of IA-64
functionality to the standard tool chain.

Both gcc and binutils shipping in the current IA-64 distributions seem to be
snapshot releases.

Thanks and Happy Holidays.

--
=======================================================================
  Josue Emmanuel Amaro                         Josue.Amaro@oracle.com
  Linux Products Manager                       Phone:   650.506.1239
  Intel and Linux Technologies Group           Fax:     650.413.0167
=======================================================================


["Josue.Amaro.vcf" (text/x-vcard)]
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org


</body></email><email><emailId>20001231161546</emailId><senderName>Arthur</senderName><senderEmail>james@brars.org.uk</senderEmail><timestampReceived>2000-12-31 16:15:46-0400</timestampReceived><subject>Der beste Weg Ihr Einkommen zu erhohen.</subject><body>

Brauchen Sie zusaetzliches Einkommen?
 
Schon heute haben Sie diese neue Moeglichkeit!
 
 Company Get Assisted Co. bietet Ihnen die Zusammenarbeit an.
Sie sind verantwortlich und punktlich.
 Sie sind zwischen 18 und 60 Jahre.

Sie haben Freizeit (2-4 Stunden taglich)

Das ist Ihre Chance. 

 Kontaktieren Sie mit uns, bitte, Ihr Job wartet auf Sie!
Schicken Sie bitte Ihre E-Mails an support@g-ted.biz


-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20001103002944</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-11-03 00:29:44-0400</timestampReceived><subject>Re: glibc 2.1.96 (sysdeps/i386/i486/bits/string.h has a bug)</subject><body>

Denis Zaitsev &lt;zzz@cd-club.ru&gt; writes:

&gt; The strcmp implementation has a problem. If either of arguments is of
&gt; type (void*) then the __strcmp_xx macros will dereference this void
&gt; pointer with all the consequences. And, say, bind-9 can't be
&gt; compiled... So, here is the straightforward patch.

I've made a different change which you can find in 2.1.97.

&gt; By the way, what were the reasons to make these 3 macros which all do
&gt; the same? It seems that one inline function would look better...

No.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001103170235</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-11-03 17:02:35-0400</timestampReceived><subject>Re: glibc 2.1.97</subject><body>

"Joseph S. Myers" &lt;jsm28@cam.ac.uk&gt; writes:

&gt; This diff is broken: it contains lines of the form
&gt; 
&gt; Binary files glibc-2.1.96/iconvdata/testdata/IBM930 and glibc-2.1.97/iconvdata/testdata/IBM930 differ

Stupid diff.  Oh well, I've regenerated the diff files.

I'll add checking for this kind of lines to be release process.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001103212950</emailId><senderName>"Jeff V. Merkey"</senderName><senderEmail>jmerkey@timpanogas.org</senderEmail><timestampReceived>2000-11-03 21:29:50-0400</timestampReceived><subject>Re: asm/resource.h</subject><body>


hpa,

Is this what is causing the lockup problems on 2.4.0-pre-10 with PPro,
or something else.  Looks like something else.

Jeff

"H. Peter Anvin" wrote:
&gt; 
&gt; Hello friends,
&gt; 
&gt; Attached is a patch against 2.4.0-test10 that changes asm/resource.h to
&gt; define RLIM_INFINITY insite the #ifdef __KERNEL__ on all architectures;
&gt; previously, this was inconsistent between architecures.  This breaks
&gt; compilation with -Werror at least on i386 since &lt;bits/resource.h&gt;
&gt; includes &lt;asm/resource.h&gt;, at least on glibc-2.1.2.
&gt; 
&gt; I have only been able to test this on i386 and glibc 2.1.2.  If there are
&gt; any places where this change is *not* appropriate, now would be a good
&gt; time to holler...
&gt; 
&gt; -hpa
&gt; 
&gt; --
&gt; &lt;hpa@transmeta.com&gt; at work, &lt;hpa@zytor.com&gt; in private!
&gt; "Unix gives you enough rope to shoot yourself in the foot."
&gt; http://www.zytor.com/~hpa/puzzle.txt
&gt; 
&gt; ------------------------------------------------------------------------
&gt; diff -ur linux-2.4.0-test10-orig/include/asm/resource.h \
&gt;                 linux-2.4.0-test10/include/asm/resource.h
&gt; --- linux-2.4.0-test10-orig/include/asm/resource.h      Fri Sep 22 14:21:19 2000
&gt; +++ linux-2.4.0-test10/include/asm/resource.h   Fri Nov  3 13:11:12 2000
&gt; @@ -19,13 +19,13 @@
&gt; 
&gt; #define RLIM_NLIMITS   11
&gt; 
&gt; +#ifdef __KERNEL__
&gt; +
&gt; /*
&gt; * SuS says limits have to be unsigned.
&gt; * Which makes a ton more sense anyway.
&gt; */
&gt; #define RLIM_INFINITY  (~0UL)
&gt; -
&gt; -#ifdef __KERNEL__
&gt; 
&gt; #define INIT_RLIMITS                                   \
&gt; {                                                      \
&gt; diff -ur linux-2.4.0-test10-orig/include/asm-alpha/resource.h \
&gt;                 linux-2.4.0-test10/include/asm-alpha/resource.h
&gt; --- linux-2.4.0-test10-orig/include/asm-alpha/resource.h        Wed Sep 27 13:39:23 \
&gt;                 2000
&gt; +++ linux-2.4.0-test10/include/asm-alpha/resource.h     Fri Nov  3 13:11:30 2000
&gt; @@ -19,14 +19,14 @@
&gt; 
&gt; #define RLIM_NLIMITS   11
&gt; 
&gt; +#ifdef __KERNEL__
&gt; +
&gt; /*
&gt; * SuS says limits have to be unsigned.  Fine, it's unsigned, but
&gt; * we retain the old value for compatibility, especially with DU.
&gt; * When you run into the 2^63 barrier, you call me.
&gt; */
&gt; #define RLIM_INFINITY  0x7ffffffffffffffful
&gt; -
&gt; -#ifdef __KERNEL__
&gt; 
&gt; #define INIT_RLIMITS                                                   \
&gt; {                                                                      \
&gt; diff -ur linux-2.4.0-test10-orig/include/asm-i386/resource.h \
&gt;                 linux-2.4.0-test10/include/asm-i386/resource.h
&gt; --- linux-2.4.0-test10-orig/include/asm-i386/resource.h Fri Sep 22 14:21:19 2000
&gt; +++ linux-2.4.0-test10/include/asm-i386/resource.h      Fri Nov  3 13:11:12 2000
&gt; @@ -19,13 +19,13 @@
&gt; 
&gt; #define RLIM_NLIMITS   11
&gt; 
&gt; +#ifdef __KERNEL__
&gt; +
&gt; /*
&gt; * SuS says limits have to be unsigned.
&gt; * Which makes a ton more sense anyway.
&gt; */
&gt; #define RLIM_INFINITY  (~0UL)
&gt; -
&gt; -#ifdef __KERNEL__
&gt; 
&gt; #define INIT_RLIMITS                                   \
&gt; {                                                      \
&gt; diff -ur linux-2.4.0-test10-orig/include/asm-ia64/resource.h \
&gt;                 linux-2.4.0-test10/include/asm-ia64/resource.h
&gt; --- linux-2.4.0-test10-orig/include/asm-ia64/resource.h Fri Sep 22 14:21:19 2000
&gt; +++ linux-2.4.0-test10/include/asm-ia64/resource.h      Fri Nov  3 13:11:04 2000
&gt; @@ -22,13 +22,13 @@
&gt; 
&gt; #define RLIM_NLIMITS   11
&gt; 
&gt; +# ifdef __KERNEL__
&gt; +
&gt; /*
&gt; * SuS says limits have to be unsigned.
&gt; * Which makes a ton more sense anyway.
&gt; */
&gt; #define RLIM_INFINITY  (~0UL)
&gt; -
&gt; -# ifdef __KERNEL__
&gt; 
&gt; #define INIT_RLIMITS                                   \
&gt; {                                                      \
&gt; diff -ur linux-2.4.0-test10-orig/include/asm-m68k/resource.h \
&gt;                 linux-2.4.0-test10/include/asm-m68k/resource.h
&gt; --- linux-2.4.0-test10-orig/include/asm-m68k/resource.h Fri Sep 22 14:21:20 2000
&gt; +++ linux-2.4.0-test10/include/asm-m68k/resource.h      Fri Nov  3 13:10:54 2000
&gt; @@ -19,13 +19,13 @@
&gt; 
&gt; #define RLIM_NLIMITS   11
&gt; 
&gt; +#ifdef __KERNEL__
&gt; +
&gt; /*
&gt; * SuS says limits have to be unsigned.
&gt; * Which makes a ton more sense anyway.
&gt; */
&gt; #define RLIM_INFINITY  (~0UL)
&gt; -
&gt; -#ifdef __KERNEL__
&gt; 
&gt; #define INIT_RLIMITS   \
&gt; {                       \
&gt; diff -ur linux-2.4.0-test10-orig/include/asm-mips/resource.h \
&gt;                 linux-2.4.0-test10/include/asm-mips/resource.h
&gt; --- linux-2.4.0-test10-orig/include/asm-mips/resource.h Fri Sep 22 14:21:20 2000
&gt; +++ linux-2.4.0-test10/include/asm-mips/resource.h      Fri Nov  3 13:10:44 2000
&gt; @@ -26,13 +26,13 @@
&gt; 
&gt; #define RLIM_NLIMITS 11                        /* Number of limit flavors.  */
&gt; 
&gt; +#ifdef __KERNEL__
&gt; +
&gt; /*
&gt; * SuS says limits have to be unsigned.
&gt; * Which makes a ton more sense anyway.
&gt; */
&gt; #define RLIM_INFINITY  0x7fffffffUL
&gt; -
&gt; -#ifdef __KERNEL__
&gt; 
&gt; #define INIT_RLIMITS                                   \
&gt; {                                                      \
&gt; diff -ur linux-2.4.0-test10-orig/include/asm-mips64/resource.h \
&gt;                 linux-2.4.0-test10/include/asm-mips64/resource.h
&gt; --- linux-2.4.0-test10-orig/include/asm-mips64/resource.h       Fri Sep 22 14:21:20 \
&gt;                 2000
&gt; +++ linux-2.4.0-test10/include/asm-mips64/resource.h    Fri Nov  3 13:10:30 2000
&gt; @@ -27,13 +27,13 @@
&gt; 
&gt; #define RLIM_NLIMITS 11                        /* Number of limit flavors.  */
&gt; 
&gt; +#ifdef __KERNEL__
&gt; +
&gt; /*
&gt; * SuS says limits have to be unsigned.
&gt; * Which makes a ton more sense anyway.
&gt; */
&gt; #define RLIM_INFINITY  (~0UL)
&gt; -
&gt; -#ifdef __KERNEL__
&gt; 
&gt; #define INIT_RLIMITS                                   \
&gt; {                                                      \
&gt; diff -ur linux-2.4.0-test10-orig/include/asm-s390/resource.h \
&gt;                 linux-2.4.0-test10/include/asm-s390/resource.h
&gt; --- linux-2.4.0-test10-orig/include/asm-s390/resource.h Fri Sep 22 14:21:21 2000
&gt; +++ linux-2.4.0-test10/include/asm-s390/resource.h      Fri Nov  3 13:10:13 2000
&gt; @@ -27,13 +27,13 @@
&gt; 
&gt; #define RLIM_NLIMITS   11
&gt; 
&gt; +#ifdef __KERNEL__
&gt; +
&gt; /*
&gt; * SuS says limits have to be unsigned.
&gt; * Which makes a ton more sense anyway.
&gt; */
&gt; #define RLIM_INFINITY   (~0UL)
&gt; -
&gt; -#ifdef __KERNEL__
&gt; 
&gt; #define INIT_RLIMITS                                   \
&gt; {                                                      \
&gt; diff -ur linux-2.4.0-test10-orig/include/asm-sparc/resource.h \
&gt;                 linux-2.4.0-test10/include/asm-sparc/resource.h
&gt; --- linux-2.4.0-test10-orig/include/asm-sparc/resource.h        Tue Oct 10 10:33:52 \
&gt;                 2000
&gt; +++ linux-2.4.0-test10/include/asm-sparc/resource.h     Fri Nov  3 13:09:46 2000
&gt; @@ -25,6 +25,8 @@
&gt; 
&gt; #define RLIM_NLIMITS   11
&gt; 
&gt; +#ifdef __KERNEL__
&gt; +
&gt; /*
&gt; * SuS says limits have to be unsigned.
&gt; * We make this unsigned, but keep the
&gt; @@ -32,7 +34,6 @@
&gt; */
&gt; #define RLIM_INFINITY  0x7fffffff
&gt; 
&gt; -#ifdef __KERNEL__
&gt; #define INIT_RLIMITS                   \
&gt; {                                      \
&gt; {RLIM_INFINITY, RLIM_INFINITY},    \
&gt; diff -ur linux-2.4.0-test10-orig/include/asm-sparc64/resource.h \
&gt;                 linux-2.4.0-test10/include/asm-sparc64/resource.h
&gt; --- linux-2.4.0-test10-orig/include/asm-sparc64/resource.h      Tue Oct 10 10:33:52 \
&gt;                 2000
&gt; +++ linux-2.4.0-test10/include/asm-sparc64/resource.h   Fri Nov  3 13:09:29 2000
&gt; @@ -25,13 +25,14 @@
&gt; 
&gt; #define RLIM_NLIMITS   11
&gt; 
&gt; +#ifdef __KERNEL__
&gt; +
&gt; /*
&gt; * SuS says limits have to be unsigned.
&gt; * Which makes a ton more sense anyway.
&gt; */
&gt; #define RLIM_INFINITY  (~0UL)
&gt; 
&gt; -#ifdef __KERNEL__
&gt; #define INIT_RLIMITS                   \
&gt; {                                      \
&gt; {RLIM_INFINITY, RLIM_INFINITY},    \
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org


</body></email><email><emailId>20001105153908</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@suse.de</senderEmail><timestampReceived>2000-11-05 15:39:08-0400</timestampReceived><subject>Re: glibc 2.1.97 / manual @refs and installation over glibc-2.1.3</subject><body>

&gt;&gt;&gt;&gt;&gt; tti  writes:

 &gt;   Hi!
 &gt;   This might be some tool version thing or some other mistake by me,
 &gt; but the installation of  glibc-2.1.97 with linuxthreads failed in
 &gt; two things:

 &gt; 1. linuxthreads.texi has some invalid links: @pxref{Range of Type} and
Check manual/lang.texi
 &gt; @ref{Signal Handling}.  I do not know the correct ones, I just erased them
and manual/signal.texi - linuxthreads.texi is part of the normal libc
manual.
[...]

Andreas
-- 
 Andreas Jaeger
  SuSE Labs aj@suse.de
   private aj@arthur.inka.de
    http://www.suse.de/~aj
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001107001530</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-11-07 00:15:30-0400</timestampReceived><subject>Re: glibc 2.1.97 (ldconfig has a bug)</subject><body>

Denis Zaitsev &lt;zzz@cd-club.ru&gt; writes:

&gt; ld.so has a problem again. Now it segfaults after ldconfig --format new.
&gt; It's because cache_new is used before it is initialized. So, here is
&gt; the patch.

Thanks, I've applied it.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001110013627</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-11-10 01:36:27-0400</timestampReceived><subject>glibc 2.2</subject><body>

Release 2.2 of the GNU C library is now available at

	ftp://sources.redhat.com/pub/glibc/releases

and (hopefully soon)

	ftp://ftp.gnu.org/pub/gnu/glibc

and all the mirror sites around the globe.

The new files are

	glibc-2.2.tar.bz2               (~10MB, also .gz w/ ~14MB)
	glibc-linuxthreads-2.2.tar.bz2  (also .gz)
	nss_db-2.2.tar.gz
	nss_lwres-0.91.tar.gz

There is no patch for the glibc 2.1.3 sources since this would be
larger than the complete 2.2 sources themselves.  For those who
have downloaded 2.1.97 there is a patch available.


This release of the library runs on the following targets:

	*-*-gnu			GNU Hurd
	i[3456]86-*-linux-gnu	Linux-2.x on Intel
	m68k-*-linux-gnu	Linux-2.x on Motorola 680x0
	alpha-*-linux-gnu	Linux-2.x on DEC Alpha
	powerpc-*-linux-gnu     Linux-2.x on PowerPC systems
	sparc-*-linux-gnu	Linux-2.x on SPARC
	sparc64-*-linux-gnu	Linux-2.x on UltraSPARC
	s390-*-linux-gnu	Linux-2.x on S390
	sh*-*-linux-gnu		Linux-2.x on SH
	ia64-*-linux-gnu	Linux-2.x on IA-64

Work is in progress to make the following targets work (again):

	arm-*-linux-gnu		Linux-2.x on ARM
	hppa*-*-linux-gnu	Linux-2.x on HP/PA
	mips*-*-linux-gnu	Linux-2.x on MIPS

Previous releases worked on the following targets, the current status
is unknown:

	arm-*-none		ARM standalone systems
	arm-*-linuxaout		Linux-2.x on ARM using a.out (obsolete?!)


The 2.2 release is the result of almost two years of work and includes
thousands of changes, significant improvements and bug fixes.  The
interface is almost complete with respect to current Unix standards.
This version of the library is believed to be more stable than any
previous release and therefore users of previous releases are strongly
advised to upgrade.  There are no known compatibility problems (except
if a program relies on bugs in previous releases; that is the program's
problem).

*BUT*: updating the C library is no trivial task and it is very easy
to damage one's system.  Therefore, persons who do not exactly know
what to do, should consider using a binary distribution instead, when
it becomes available.  All major Linux distributors will hopefully
base their next release on glibc 2.2.  Don't tell us you haven't been
warned.  Another reason why not everybody should think about compiling
glibc is the disk and CPU requirements: on Intel platforms the full
build requires about 330MB plus the space you need to install it.
This number is higher on most RISC platforms.  During the compilation
the compiler will need large amounts of virtual memory.  We are
talking about 100MB on Intel and 200MB on Alpha.  If using the `-j'
option of make these numbers grow linearly.  Building the complete
library on a 2xPIII@550MHz system takes about 37 minutes, checking
adds another 8 minutes.  On not highly tuned and slower systems the
times are very much higher and it possibly takes several days on very
old and slow systems.  The -j option for make is very useful on SMP
systems, the Makefiles are written to allow this (except when the
compilation happens in the source directory; simply create a new
directory and compile in that one instead).

It is generally always a good idea to build in a separate directory
and simply configure using

  /path/to/glibc-2.2/configure ...options for configure...

In case you decide to compile glibc yourself you need to read the
files INSTALL and FAQ.  It will explain among other things which tools
are necessary.  The most important one is the compiler.  Although
other versions might work it is recommended to get at least gcc 2.95.2
to compile glibc (on some platforms more recent compilers are
required).  Earlier gcc versions are known to produce incorrect code
in certain situations.  Even better optimized code can be generated
with later development versions of the compiler.  In case a
compilation fails and the compiler is not 2.95.2 get this compiler
version first before reporting problems.  If you run make with the -n
option and search for errors in the log make sure you distinguish
between real bugs and cases where the glibc Makefiles explicitly
ignore failures.

You may need development versions of the compilation tools on recently
supported architectures.  The requirements for MIPS are described in
the FAQ.  For others contact the developers working on tools for the
specific architecture.


One Linux systems the configure script has a new option
`--enable-kernel' (find the documentation in the INSTALL file).  This
option allows one to strip out compatibility code for older kernel
versions.  This is of interest since configuring for a 2.4.0 kernel
reduces the libc size by about 1%.  This is no high percentage but all
the code gone is in the by far most often used functions.  The
compatibility code is needed because of poor design decisions of the
kernel developers who constantly have to adjust the interface to new
requirements.  If you never expect to run kernel versions older than
the one used at compile time of the library it is a good idea to pass
`--enable-kernel=current' to configure.  But be careful since with an
older kernel the program won't even start and the whole system might
be rendered useless (unless backup kernels are available).


The 2.2 release should be binary compatible with the 2.1 and earlier
releases.  All programs should continue to run.  This does *not* mean
that programs compiled on a system running glibc 2.2 will run on
systems with only glibc 2.1.  Compatibility is always in one
direction.  Systems with glibc 2.1 will not even attempt to run
binaries generated with glibc 2.2 so there is not much to worry about.

The internal locale format has been changed.  All locale information
has to be regenerated with localedef.  If you are upgrading a live
system you will end up with two sets of the locale data in two
different places (the old data in /usr/share/locale, the new code in
/usr/lib/locale).  Keep the old data around until all statically
linked applications which use locales are recompiled.  Then remove the
files LC_CTYPE, LC_COLLATE, LC_NUMERIC, LC_MONETARY, LC_TIME, and
SYS_LC_MESSAGES in all subdirectories below /usr/share/locale.


There are normally no problems to be expected when compiling code with
the new glibc version.  In a few cases programs make wrong assumptions
and the build will suddenly fail (recent example: using CLK_TCK in
initializers for static or global variables which is wrong since is
CLK_TCK is not guaranteed to be a constant).  Make sure you review
the appropriate standards before you claim to have found a bug.

One package which is problematic to compile when glibc 2.2 is
installed is gcc 2.95.2 (or earlier versions, but they should not be
used).  This is due to wrong use of a certain type in the libio in gcc
and some new symbols in public headers.  The problems are removed for
upcoming releases and a patch with instructions for 2.95.2 can be
found at

	http://clisp.cons.org/~haible/glibc22-HOWTO.html


Problems should all be reported using the `glibcbug' shell script.  Simply
run this script, fill out the information and you are set.  If at the time
you start the script it complains like this

	/usr/bin/glibcbug: emacs: command not found

simply set one of the environment variables EDITOR and VISUAL (this should
happen on every system automatically):

	env EDITOR=vi glibcbug

Do this also if you don't want to edit the bug report in Emacs (I
cannot imagine why not but...)

Before sending a bug report make sure you have read the BUGS and the
FAQ files which come with the glibc sources.  You won't even get an
answer if it is obvious you haven't read these files.  It is also
helpful to scan the appropriate newsgroups and mailing lists to see
whether somebody else already had this problem.  There is another
thing we don't want to hear about: the size.  glibc is big, but this
is necessary for a multi-platform Unix library.

In case the bug database is once again offline send the reports to the
libc-alpha@sources.redhat.com mailing list.


Over the last two years many people helped by contributing code,
reporting bugs, sending patches.  I cannot mention them all here but
sure want to mention those who continuously helped all the time.  In
purely random order:

	Andreas Jaeger
	Andreas Schwab
	Bruno Haible
	Cristian Gafton
	Geoff Keating
	H.J. Lu
	Jakub Jelinek
	Kaz Kylheku
	Mark Kettenis
	Philip Blundell
	Richard Henderson
	Roland McGrath
	Thorsten Kukuk
	Zack Weinberg

The list with the changes below contains a few more names.  Please
remember those names for the day you have the opportunity to thank
them.


Finally, the (certainly incomplete) list of significant changes:

* Greg McGary added runtime support for bounds checking using gcc's
  new -fbounded-pointers option.  ix86 target is complete.  PowerPC
  is in progress.

* Thorsten Kukuk added secure mode support to nscd.

* The Berkeley db libraries have been removed.  They can be installed
  separately.

  Related, the nss_db module is now in a separate package since it
  obviously requires a database library being available.

* Wide character I/O streams implemented by Ulrich Drepper.

* Functions from the extended socket API added by Ulrich Drepper.

* Functions feenableexcept and fedisableexcept to control the
  behaviour of individual exceptions have been added by Andreas Jaeger.

* ldconfig program added by Andreas Jaeger and Jakub Jelinek.

* The resolver code has been updated from bind 8.2.3-T5B which supports
  threads.  The integration was done by Andreas Jaeger, Adam D. Bradley,
  and Mark Kettenis.

  This change could in some situations effect backward compatibility.  Since
  now `_res' is a thread-local instead of a global variable, modifying it
  in one thread does not have any effect in other threads.

  The resolver library was also extended to allow IPv6 as the transport
  protocol for the requests.  This work was done by Stig Venaas.

* Compatibility code for K&amp;R C compilers has been removed from the
  header files.  A ISO C compiler is needed to use the library
  (conforming to either C89 or C99 standard).

* Complete rewrite of the localedef program to support multibyte character
  sets.  Implement handling of ISO 14651 and ISO 14652.  Rewrite strcoll,
  strxfrm, wcscoll, and wcsxfrm functions.  Make isw*() functions work.
  Implemented by Ulrich Drepper.

  Bruno Haible significantly improved the generation and use of the data
  structures for the wide character tables.

* Plural handling in gettext implemented by Ulrich Drepper.

* The utmp daemon has been removed.

* The port to MIPS-Linux has been finished by Andreas Jaeger.

* A port to Hitachi SH3 and SH4 has been contributed by Kazumoto Kojima
  and Yutaka Niibe.

* POSIX clocks and timers implemented by Kaz Kylheku and Ulrich Drepper.

* POSIX barriers implemented by Kaz Kylheku.

* POSIX spawn function family implemented by Ulrich Drepper.

* POSIX spinlocks are now available.

* Timed wait functions for mutex, rwlock, and semaphores are implemented.

* The configure option --enable-kernel=X.Y.Z allows to strip out
  compatibility for kernel versions before X.Y.Z.  This is currently only
  implemented for Linux.

* The sockaddr_in6 structure changed.  The IPv6 working group added a new
  field sin6_scope_id.  This means that all programs using IPv6 should be
  recompiled.  Don't expect binary compatibility with previous glibc
  versions.

* Various conversion modules for IBM character sets contributed by
  Masahide Washizawa.

* IA-64 port by Jes Sorensen and HJ Lu.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001114181352</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@suse.de</senderEmail><timestampReceived>2000-11-14 18:13:52-0400</timestampReceived><subject>Re: glibc 2.2 (ldconfig has a bug)</subject><body>

&gt;&gt;&gt;&gt;&gt; Denis Zaitsev writes:

 &gt; Now it's indeed ldconfig... Here is the patch.
 &gt; --- glibc-2.2/elf/ldconfig.c	Tue Nov 14 20:05:26 2000
 &gt; +++ glibc-2.2/elf/ldconfig.c	Tue Nov 14 20:05:02 2000
 &gt; @@ -370,13 +370,13 @@
 
 &gt;    /* Get complete path.  */
 &gt;    full_libname = alloca (strlen (path) + strlen (libname) + 2);
 &gt; -  full_soname = alloca (strlen (path) + strlen (libname) + 2);
 &gt; +  full_soname = alloca (strlen (path) + strlen (soname) + 2);
 &gt;    sprintf (full_libname, "%s/%s", path, libname);
 &gt;    sprintf (full_soname, "%s/%s", path, soname);
 &gt;    if (opt_chroot)
 &gt;      {
 &gt;        real_full_libname = alloca (strlen (real_path) + strlen (libname) + 2);
 &gt; -      real_full_soname = alloca (strlen (real_path) + strlen (libname) + 2);
 &gt; +      real_full_soname = alloca (strlen (real_path) + strlen (soname) + 2);
 &gt;        sprintf (real_full_libname, "%s/%s", real_path, libname);
 &gt;        sprintf (real_full_soname, "%s/%s", real_path, soname);
 &gt;      }


 &gt; It's merrily. The error was sitting silently until the release... Then
 &gt; ld-2.1.97.so became ld-2.2.so, its strlen becomes 3 bytes shorter and
 &gt; finito... For other names (on my system) it is stiil working without
 &gt; the patch.

Thanks, we've fixed this already in the CVS archive.

Andreas
-- 
 Andreas Jaeger
  SuSE Labs aj@suse.de
   private aj@arthur.inka.de
    http://www.suse.de/~aj
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001120052029</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-11-20 05:20:29-0400</timestampReceived><subject>binutils 2.10.1.0.2 is released.</subject><body>

This is the beta release of binutils 2.10.1.0.2 for Linux, which is
based on binutils 2000 1119 in CVS on sourecware.cygnus.com plus
various changes. It is purely for Linux, although it has been tested
on Solaris/Sparc and Solaris/x86 from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.10.1.0.2 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.10.0.33:

1. Update from binutils 2000 1119.
2. It has some symbol versioning related updates.

Changes from binutils 2.10.0.32:

1. Update from binutils 2000 1018.
2. A proper ELF/PPC visibility fix.
3. m68k-a.out is supposed to be fixed.

Changes from binutils 2.10.0.31:

1. Update from binutils 2000 1014.
2. An ELF/PPC weak symbol bug fix.
3. A new linkonce section name approach.
4. m68k-a.out is still broken. To be fixed.

Changes from binutils 2.10.0.29:

1. Update from binutils 2000 1011.
2. Back out the linkonce section name change so that C++ will work.
A different approach is being worked on.
3. m68k-a.out is known to be broken. To be fixed.

Changes from binutils 2.10.0.26:

1. Update from binutils 2000 1008.

Changes from binutils 2.10.0.24:

1. Update from binutils 2000 0907.

Changes from binutils 2.10.0.18:

1. Update from binutils 2000 0823. Fix DT_RPATH/DT_RUNPATH handling.
Fix the ELF/ia32 DSO not compiled with PIC.
2. Try to fix the ELF visibility bug on PPC with glibc 2.2.

Changes from binutils 2.10.0.12:

1. Update from binutils 2000 0720.
2. Fix the DT_NEEDED link bug.
3. Add the new DT_XXXX dynamic tags. Glibc 2.2 will use them at least
on libpthread.so.

Changes from binutils 2.10.0.9:

1. Update from binutils 2000 0701. Fix the parallel build in ld when PE
is enabled.

Changes from binutils 2.9.5.0.46:

1. Update from binutils 2000 0617. The demangler support for the new
g++ ABI. Minor fix for the ELF visibility. Fix linking non-ELF
relocatable object files under ELF with symbol versioning.
2. Support for linking PE relocatable object files under ia32/ELF.

Changes from binutils 2.9.5.0.42:

1. Update from binutils 2000 0604. The ELF visibility attribuite should
work correctly now.
2. The ia32 assembler has changed the way it assembles the "jmp"
instructions to the global symbols. The old assembler will optimize the
jump to the global symbol defined in the same source file so that no
relocation will be used. The new assembler will use relocation for
global jumps. It will mainly affect PIC asm code. The segment like

	.globl  __setjmp
__setjmp:
	...
	jmp __sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:

is no longer PIC safe since "jmp __sigsetjmp" jumps to a global symbol
and relocation will be used. Instead, it can be changed to

	.globl  __setjmp
__setjmp:
	...
	jmp sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:
sigsetjmp:

so that "jmp sigsetjmp" jumps to a local symbol and the new assembler
will optimize out the relocation.

Changes from binutils 2.9.5.0.41:

1. Update from binutils 2000 0512.
2. Add testsuite for ELF visibility.

Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.10.1.0.2.tar.gz. Source code.
2. binutils-2.10.0.33-2.10.1.0.2.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.10.1.0.2-1.i386.rpm. IA-32 binary RPM for RedHat 7.0.

There is no separate source rpm. You can do

# rpm -ta binutils-2.10.1.0.2.tar.gz

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://ftp.valinux.com/pub/support/hjl/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
11/19/2000
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org


</body></email><email><emailId>20001122174611</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-11-22 17:46:11-0400</timestampReceived><subject>Re: Dynamic libraries at a non-default address</subject><body>

"H. Peter Anvin" &lt;hpa@transmeta.com&gt; writes:

&gt; Read my previous message -- I'd like to use unmodified kernels and
&gt; glibc.  The kernel can be prevented from using an address space by
&gt; claiming it first.

Write an assembly stub which mmaps the range and then execs the
application.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001009024655</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-10-09 02:46:55-0400</timestampReceived><subject>glibc 2.1.95 (5th test release)</subject><body>

I've uploaded to

   ftp://sourceware.cygnus.com/pub/glibc/releases

the files

   glibc-2.1.95.tar.bz2           (also .gz)
   glibc-2.1.94-2.1.95.diff.bz2   (also .gz)
   nss_db-2.1.92.tar.gz
   nss_lwres-0.91.tar.gz

The patch is gzip compressed 560k but the majority of the changes are
to data files.

We've fixed quite a few little problems here and there, overall
nothing severe.  The internationalization stuff should now be fairly
good tested, the conversion tables correct.  The situation of the
Linux ports from my perspective is

   x86         works
   arm         works (if you have recent compiler and kernel)
   m68k        works
   ia64        works
   sparc32/64  works
   mips        works (except for backward compatibility with broken
                      binaries)
   alpha       should work with a decent kernel (math problems)
   ppc         one backward compatibility problem
   sh          don't know
   390         don't know

The Linux/PA people are almost ready to merge in so this code could go
in if they get their acts together.

I don't know the Hurd situation but wouldn't expect problems.

The nss_db-2.1.92.tar.gz contains the nss_db module code.  Nothing
changed since the last release.  Mark Kettenis also provided a
nss_lwres module.  This module uses the light-weight resolver coming
with Bind9.  If you are using Bind9 give it a try.

People who have installed previous test releases and linked
applications statically which are supposed to be internationalized
should relink them.

Give it a try and send feedback to libc-alpha@soureware.cygnus.com.
Also success reports.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001009214448</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-10-09 21:44:48-0400</timestampReceived><subject>binutils 2.10.0.29 is released.</subject><body>

This is the beta release of binutils 2.10.0.29 for Linux, which is
based on binutils 2000 1008 in CVS on sourecware.cygnus.com plus
various changes. It is purely for Linux, although it has been tested
on Solaris/Sparc and Solaris/x86 from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.10.0.29 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.10.0.26:

1. Update from binutils 2000 1008.

Changes from binutils 2.10.0.24:

1. Update from binutils 2000 0907.

Changes from binutils 2.10.0.18:

1. Update from binutils 2000 0823. Fix DT_RPATH/DT_RUNPATH handling.
Fix the ELF/ia32 DSO not compiled with PIC.
2. Try to fix the ELF visibility bug on PPC with glibc 2.2.

Changes from binutils 2.10.0.12:

1. Update from binutils 2000 0720.
2. Fix the DT_NEEDED link bug.
3. Add the new DT_XXXX dynamic tags. Glibc 2.2 will use them at least
on libpthread.so.

Changes from binutils 2.10.0.9:

1. Update from binutils 2000 0701. Fix the parallel build in ld when PE
is enabled.

Changes from binutils 2.9.5.0.46:

1. Update from binutils 2000 0617. The demangler support for the new
g++ ABI. Minor fix for the ELF visibility. Fix linking non-ELF
relocatable object files under ELF with symbol versioning.
2. Support for linking PE relocatable object files under ia32/ELF.

Changes from binutils 2.9.5.0.42:

1. Update from binutils 2000 0604. The ELF visibility attribuite should
work correctly now.
2. The ia32 assembler has changed the way it assembles the "jmp"
instructions to the global symbols. The old assembler will optimize the
jump to the global symbol defined in the same source file so that no
relocation will be used. The new assembler will use relocation for
global jumps. It will mainly affect PIC asm code. The segment like

	.globl  __setjmp
__setjmp:
	...
	jmp __sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:

is no longer PIC safe since "jmp __sigsetjmp" jumps to a global symbol
and relocation will be used. Instead, it can be changed to

	.globl  __setjmp
__setjmp:
	...
	jmp sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:
sigsetjmp:

so that "jmp sigsetjmp" jumps to a local symbol and the new assembler
will optimize out the relocation.

Changes from binutils 2.9.5.0.41:

1. Update from binutils 2000 0512.
2. Add testsuite for ELF visibility.

Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.10.0.29.tar.gz. Source code.
2. binutils-2.10.0.26-2.10.0.29.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.10.0.29-1.i386.rpm. IA-32 binary RPM for RedHat 7.0.

There is no separate source rpm. You can do

# rpm -ta binutils-2.10.0.29.tar.gz

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://ftp.valinux.com/pub/support/hjl/binutils

Thanks.


H.J. Lu
hjl@lucon.org
10/09/2000
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org


</body></email><email><emailId>20001103020232</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-11-03 02:02:32-0400</timestampReceived><subject>glibc 2.1.97</subject><body>

I've uploaded the7th and hopefully last test release of glibc 2.2 to

  ftp://sources.redhat.com/pub/glibc/releases

You'll find the files

  glibc-2.1.97.tar.bz2               (also .gz)
  glibc-2.1.96-2.1.97.diff.bz2       (also .gz)
  glibc-linuxthreads-2.1.97.tar.gz

and in addition the older and not changed files

  nss_lwres-0.91.tar.gz
  nss_db-2.1.92.tar.gz

The changes from 2.1.96 are pretty large but only because of data file
changes and some new iconv modules, and the Linux/HPPA port.  The
library itself seems to be very stable and only a few bugs have been
reported (and fixed).  People running older versions are nevertheless
asked to upgrade.

If I don't get reports about problems which require non-trivial fixes
this is intended to be the last test release and 2.2 will follow
shortly.  So, if you don't want 2.2 to fail running your code give
this test release a try.  It's not necessary to install the library
(this should be done only by experienced people).  I don't expect many
problems anymore and know for sure that this release is more stable
than any 2.1.x release ever was.

The architecture situation is AFAIK:

  x86      no problems
  m68k     no problems
  PPC      no problems
  SPARC32  no problems
  SPARC64  mostly works, passes all tests
  IA-64    no problems
  SH       no problems
  S390     no problems
  Alpha    no problems (with modern gcc and kernel)
  MIPS     some tools and kernel issues
  Arm      some tools and kernel issues
  HPPA     should build and sometimes run

The Hurd port should also mostly work.


Please report any problems *and* success stories to
libc-alpha@sources.redhat.com.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001103212029</emailId><senderName>"H. Peter Anvin"</senderName><senderEmail>hpa@transmeta.com</senderEmail><timestampReceived>2000-11-03 21:20:29-0400</timestampReceived><subject>asm/resource.h</subject><body>

Hello friends,

Attached is a patch against 2.4.0-test10 that changes asm/resource.h to
define RLIM_INFINITY insite the #ifdef __KERNEL__ on all architectures;
previously, this was inconsistent between architecures.  This breaks
compilation with -Werror at least on i386 since &lt;bits/resource.h&gt;
includes &lt;asm/resource.h&gt;, at least on glibc-2.1.2.

I have only been able to test this on i386 and glibc 2.1.2.  If there are
any places where this change is *not* appropriate, now would be a good
time to holler...

	-hpa

-- 
&lt;hpa@transmeta.com&gt; at work, &lt;hpa@zytor.com&gt; in private!
"Unix gives you enough rope to shoot yourself in the foot."
http://www.zytor.com/~hpa/puzzle.txt
["resource.diff" (text/plain)]

diff -ur linux-2.4.0-test10-orig/include/asm/resource.h \
                linux-2.4.0-test10/include/asm/resource.h
--- linux-2.4.0-test10-orig/include/asm/resource.h	Fri Sep 22 14:21:19 2000
+++ linux-2.4.0-test10/include/asm/resource.h	Fri Nov  3 13:11:12 2000
@@ -19,13 +19,13 @@
 
 #define RLIM_NLIMITS	11
 
+#ifdef __KERNEL__
+
 /*
  * SuS says limits have to be unsigned.
  * Which makes a ton more sense anyway.
  */
 #define RLIM_INFINITY	(~0UL)
-
-#ifdef __KERNEL__
 
 #define INIT_RLIMITS					\
 {							\
diff -ur linux-2.4.0-test10-orig/include/asm-alpha/resource.h \
                linux-2.4.0-test10/include/asm-alpha/resource.h
--- linux-2.4.0-test10-orig/include/asm-alpha/resource.h	Wed Sep 27 13:39:23 2000
+++ linux-2.4.0-test10/include/asm-alpha/resource.h	Fri Nov  3 13:11:30 2000
@@ -19,14 +19,14 @@
 
 #define RLIM_NLIMITS	11
 
+#ifdef __KERNEL__
+
 /*
  * SuS says limits have to be unsigned.  Fine, it's unsigned, but
  * we retain the old value for compatibility, especially with DU. 
  * When you run into the 2^63 barrier, you call me.
  */
 #define RLIM_INFINITY	0x7ffffffffffffffful
-
-#ifdef __KERNEL__
 
 #define INIT_RLIMITS							\
 {									\
diff -ur linux-2.4.0-test10-orig/include/asm-i386/resource.h \
                linux-2.4.0-test10/include/asm-i386/resource.h
--- linux-2.4.0-test10-orig/include/asm-i386/resource.h	Fri Sep 22 14:21:19 2000
+++ linux-2.4.0-test10/include/asm-i386/resource.h	Fri Nov  3 13:11:12 2000
@@ -19,13 +19,13 @@
 
 #define RLIM_NLIMITS	11
 
+#ifdef __KERNEL__
+
 /*
  * SuS says limits have to be unsigned.
  * Which makes a ton more sense anyway.
  */
 #define RLIM_INFINITY	(~0UL)
-
-#ifdef __KERNEL__
 
 #define INIT_RLIMITS					\
 {							\
diff -ur linux-2.4.0-test10-orig/include/asm-ia64/resource.h \
                linux-2.4.0-test10/include/asm-ia64/resource.h
--- linux-2.4.0-test10-orig/include/asm-ia64/resource.h	Fri Sep 22 14:21:19 2000
+++ linux-2.4.0-test10/include/asm-ia64/resource.h	Fri Nov  3 13:11:04 2000
@@ -22,13 +22,13 @@
 
 #define RLIM_NLIMITS	11
 
+# ifdef __KERNEL__
+
 /*
  * SuS says limits have to be unsigned.
  * Which makes a ton more sense anyway.
  */
 #define RLIM_INFINITY  (~0UL)
-
-# ifdef __KERNEL__
 
 #define INIT_RLIMITS					\
 {							\
diff -ur linux-2.4.0-test10-orig/include/asm-m68k/resource.h \
                linux-2.4.0-test10/include/asm-m68k/resource.h
--- linux-2.4.0-test10-orig/include/asm-m68k/resource.h	Fri Sep 22 14:21:20 2000
+++ linux-2.4.0-test10/include/asm-m68k/resource.h	Fri Nov  3 13:10:54 2000
@@ -19,13 +19,13 @@
 
 #define RLIM_NLIMITS	11
 
+#ifdef __KERNEL__
+
 /*
  * SuS says limits have to be unsigned.
  * Which makes a ton more sense anyway.
  */
 #define RLIM_INFINITY	(~0UL)
-
-#ifdef __KERNEL__
 
 #define INIT_RLIMITS	\
 {                       \
diff -ur linux-2.4.0-test10-orig/include/asm-mips/resource.h \
                linux-2.4.0-test10/include/asm-mips/resource.h
--- linux-2.4.0-test10-orig/include/asm-mips/resource.h	Fri Sep 22 14:21:20 2000
+++ linux-2.4.0-test10/include/asm-mips/resource.h	Fri Nov  3 13:10:44 2000
@@ -26,13 +26,13 @@
 
 #define RLIM_NLIMITS 11			/* Number of limit flavors.  */
 
+#ifdef __KERNEL__
+
 /*
  * SuS says limits have to be unsigned.
  * Which makes a ton more sense anyway.
  */
 #define RLIM_INFINITY	0x7fffffffUL
-
-#ifdef __KERNEL__
 
 #define INIT_RLIMITS					\
 {							\
diff -ur linux-2.4.0-test10-orig/include/asm-mips64/resource.h \
                linux-2.4.0-test10/include/asm-mips64/resource.h
--- linux-2.4.0-test10-orig/include/asm-mips64/resource.h	Fri Sep 22 14:21:20 2000
+++ linux-2.4.0-test10/include/asm-mips64/resource.h	Fri Nov  3 13:10:30 2000
@@ -27,13 +27,13 @@
 
 #define RLIM_NLIMITS 11			/* Number of limit flavors.  */
 
+#ifdef __KERNEL__
+
 /*
  * SuS says limits have to be unsigned.
  * Which makes a ton more sense anyway.
  */
 #define RLIM_INFINITY  (~0UL)
-
-#ifdef __KERNEL__
 
 #define INIT_RLIMITS					\
 {							\
diff -ur linux-2.4.0-test10-orig/include/asm-s390/resource.h \
                linux-2.4.0-test10/include/asm-s390/resource.h
--- linux-2.4.0-test10-orig/include/asm-s390/resource.h	Fri Sep 22 14:21:21 2000
+++ linux-2.4.0-test10/include/asm-s390/resource.h	Fri Nov  3 13:10:13 2000
@@ -27,13 +27,13 @@
 
 #define RLIM_NLIMITS	11
 
+#ifdef __KERNEL__
+
 /*
  * SuS says limits have to be unsigned.
  * Which makes a ton more sense anyway.
  */
 #define RLIM_INFINITY   (~0UL)
-
-#ifdef __KERNEL__
 
 #define INIT_RLIMITS					\
 {							\
diff -ur linux-2.4.0-test10-orig/include/asm-sparc/resource.h \
                linux-2.4.0-test10/include/asm-sparc/resource.h
--- linux-2.4.0-test10-orig/include/asm-sparc/resource.h	Tue Oct 10 10:33:52 2000
+++ linux-2.4.0-test10/include/asm-sparc/resource.h	Fri Nov  3 13:09:46 2000
@@ -25,6 +25,8 @@
 
 #define RLIM_NLIMITS	11
 
+#ifdef __KERNEL__
+
 /*
  * SuS says limits have to be unsigned.
  * We make this unsigned, but keep the
@@ -32,7 +34,6 @@
  */
 #define RLIM_INFINITY	0x7fffffff
 
-#ifdef __KERNEL__
 #define INIT_RLIMITS			\
 {					\
     {RLIM_INFINITY, RLIM_INFINITY},	\
diff -ur linux-2.4.0-test10-orig/include/asm-sparc64/resource.h \
                linux-2.4.0-test10/include/asm-sparc64/resource.h
--- linux-2.4.0-test10-orig/include/asm-sparc64/resource.h	Tue Oct 10 10:33:52 2000
+++ linux-2.4.0-test10/include/asm-sparc64/resource.h	Fri Nov  3 13:09:29 2000
@@ -25,13 +25,14 @@
 
 #define RLIM_NLIMITS	11
 
+#ifdef __KERNEL__
+
 /*
  * SuS says limits have to be unsigned.
  * Which makes a ton more sense anyway.
  */
 #define RLIM_INFINITY	(~0UL)
 
-#ifdef __KERNEL__
 #define INIT_RLIMITS			\
 {					\
     {RLIM_INFINITY, RLIM_INFINITY},	\


-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org


</body></email><email><emailId>20001103114214</emailId><senderName>"Joseph S. Myers"</senderName><senderEmail>jsm28@cam.ac.uk</senderEmail><timestampReceived>2000-11-03 11:42:14-0400</timestampReceived><subject>Re: glibc 2.1.97</subject><body>

On 2 Nov 2000, Ulrich Drepper wrote:

&gt; glibc-2.1.96-2.1.97.diff.bz2       (also .gz)

This diff is broken: it contains lines of the form

Binary files glibc-2.1.96/iconvdata/testdata/IBM930 and \
glibc-2.1.97/iconvdata/testdata/IBM930 differ

instead of proper diffs (diff -a should do the trick).

This causes test failures

/bin/sh -e run-iconv-test.sh /usr/src/dev/base/glibc-build &gt; \
                /usr/src/dev/base/glibc-build/iconvdata/iconv-test.out
/usr/src/dev/base/glibc-build/iconv/iconv_prog: cannot open input file \
                `testdata/IBM930': No such file or directory
/usr/src/dev/base/glibc-build/iconv/iconv_prog: cannot open input file \
                `testdata/IBM933': No such file or directory
/usr/src/dev/base/glibc-build/iconv/iconv_prog: cannot open input file \
                `testdata/IBM935': No such file or directory
/usr/src/dev/base/glibc-build/iconv/iconv_prog: cannot open input file \
                `testdata/IBM937': No such file or directory
/usr/src/dev/base/glibc-build/iconv/iconv_prog: cannot open input file \
`testdata/IBM939': No such file or directory make[2]: *** \
[/usr/src/dev/base/glibc-build/iconvdata/iconv-test.out] Error 1 make[2]: Leaving \
directory `/usr/src/dev/base/glibc-2.1.97/iconvdata' make[1]: *** [iconvdata/tests] \
Error 2 make[1]: Leaving directory `/usr/src/dev/base/glibc-2.1.97'
make: *** [check] Error 2

-- 
Joseph S. Myers
jsm28@cam.ac.uk

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org


</body></email><email><emailId>20001105102754</emailId><senderName>Jaakko_Hyvätti</senderName><senderEmail>jaakko.hyvatti@iki.fi</senderEmail><timestampReceived>2000-11-05 10:27:54-0400</timestampReceived><subject>glibc 2.1.97 / manual @refs and installation over glibc-2.1.3</subject><body>

  Hi!

  This might be some tool version thing or some other mistake by me,
but the installation of  glibc-2.1.97 with linuxthreads failed in
two things:

1. linuxthreads.texi has some invalid links: @pxref{Range of Type} and
@ref{Signal Handling}.  I do not know the correct ones, I just erased them
or looked up the next closest thing - so do not apply this patch:

--- glibc-2.1.97/linuxthreads/linuxthreads.texi.~1~	Tue Oct 31 19:09:53 2000
+++ glibc-2.1.97/linuxthreads/linuxthreads.texi	Sun Nov  5 01:59:52 2000
@@ -959,8 +959,8 @@
 
 Semaphores have a maximum value past which they cannot be incremented.
 The macro @code{SEM_VALUE_MAX} is defined to be this maximum value.  In
-the GNU C library, @code{SEM_VALUE_MAX} is equal to @code{INT_MAX}
-(@pxref{Range of Type}), but it may be much smaller on other systems.
+the GNU C library, @code{SEM_VALUE_MAX} is equal to @code{INT_MAX},
+but it may be much smaller on other systems.
 
 The pthreads library implements POSIX 1003.1b semaphores.  These should
 not be confused with System V semaphores (@code{ipc}, @code{semctl} and
@@ -1216,7 +1216,7 @@
 @deftypefun int pthread_kill (pthread_t @var{thread}, int @var{signo})
 @code{pthread_kill} sends signal number @var{signo} to the thread
 @var{thread}.  The signal is delivered and handled as described in
-@ref{Signal Handling}.
+@ref{Threads and Signal Handling}.
 
 @code{pthread_kill} returns 0 on success, one of the following error codes
 on error:


2. During installation, after iconvdata has been installed, my old
glibc-2.1.3 does not like the new iconv files any more.  For example gawk,
xterm and emacs die on assertion, I guess this was something like
outbufstart == NULL, but cannot be sure as I forgot to grab it. My
solution was to 'mv /usr/lib/gconv /usr/lib/temp.gconv' as soon as
gconvdata was installed, and then move it back after rest if the
installation completes - as it needs gawk on the texinfo manuals.

  Other than these, make check seemed to pass and the system with
glibc-2.1.97 works fine.

System:

linux-2.4.0-test10
gcc version 2.95.2 19991024 (release)
makeinfo (GNU texinfo) 4.0
GNU Awk 3.0.3
devfs with no compatibility links

450 MHz AMD K6-3, underclocked to 416 MHz for stability with
Asus P/I-P55T2P4 and 83MHz bus.
64MB ram

Otherwise the system is a result of natural hardware and software
evolution since 1992, most of the tools compiled from source, so the fault
may be my setup and tools.

Hope this help anyone,
Jaakko


-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001105143341</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@cd-club.ru</senderEmail><timestampReceived>2000-11-05 14:33:41-0400</timestampReceived><subject>Re: glibc 2.1.97 (ldconfig has a bug)</subject><body>

ld.so has a problem again. Now it segfaults after ldconfig --format new.
It's because cache_new is used before it is initialized. So, here is
the patch.


--- glibc-2.1.97/sysdeps/generic/dl-cache.c	Sun Nov  5 16:17:34 2000
+++ glibc-2.1.97/sysdeps/generic/dl-cache.c	Sun Nov  5 16:18:36 2000
@@ -183,7 +183,7 @@
 	    cache_new = (void *) -1;
 	}
       else if (file != NULL &amp;&amp; cachesize &gt; sizeof *cache_new
-	       &amp;&amp; memcmp (cache_new-&gt;magic, CACHEMAGIC_VERSION_NEW,
+	       &amp;&amp; memcmp (file, CACHEMAGIC_VERSION_NEW,
 			  sizeof CACHEMAGIC_VERSION_NEW - 1) == 0)
 	{
 	  cache_new = file;


In the patches I had sent before this thing works...
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001011074729</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@suse.de</senderEmail><timestampReceived>2000-10-11 07:47:29-0400</timestampReceived><subject>Re: glibc 2.1.94 (getlogin has a bug)</subject><body>

&gt;&gt;&gt;&gt;&gt; Denis Zaitsev writes:

 &gt; I've just posted about getlogin(). PS: it happens on a devfs system,
 &gt; on a usual system all ok.
Please debug it and tell us what fails.  devfs support in glibc might
still have some problems, AFAIK none of the glibc developers uses
devfs.

Andreas
-- 
 Andreas Jaeger
  SuSE Labs aj@suse.de
   private aj@arthur.inka.de
    http://www.suse.de/~aj
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001011212320</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-10-11 21:23:20-0400</timestampReceived><subject>binutils 2.10.0.31 is released.</subject><body>


This is the beta release of binutils 2.10.0.31 for Linux, which is
based on binutils 2000 1011 in CVS on sourecware.cygnus.com plus
various changes. It is purely for Linux, although it has been tested
on Solaris/Sparc and Solaris/x86 from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.10.0.31 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.10.0.29:

1. Update from binutils 2000 1011.
2. Back out the linkonce section name change so that C++ will work.
A different approach is being worked on.
3. m68k-a.out is known to be broken. To be fixed.

Changes from binutils 2.10.0.26:

1. Update from binutils 2000 1008.

Changes from binutils 2.10.0.24:

1. Update from binutils 2000 0907.

Changes from binutils 2.10.0.18:

1. Update from binutils 2000 0823. Fix DT_RPATH/DT_RUNPATH handling.
Fix the ELF/ia32 DSO not compiled with PIC.
2. Try to fix the ELF visibility bug on PPC with glibc 2.2.

Changes from binutils 2.10.0.12:

1. Update from binutils 2000 0720.
2. Fix the DT_NEEDED link bug.
3. Add the new DT_XXXX dynamic tags. Glibc 2.2 will use them at least
on libpthread.so.

Changes from binutils 2.10.0.9:

1. Update from binutils 2000 0701. Fix the parallel build in ld when PE
is enabled.

Changes from binutils 2.9.5.0.46:

1. Update from binutils 2000 0617. The demangler support for the new
g++ ABI. Minor fix for the ELF visibility. Fix linking non-ELF
relocatable object files under ELF with symbol versioning.
2. Support for linking PE relocatable object files under ia32/ELF.

Changes from binutils 2.9.5.0.42:

1. Update from binutils 2000 0604. The ELF visibility attribuite should
work correctly now.
2. The ia32 assembler has changed the way it assembles the "jmp"
instructions to the global symbols. The old assembler will optimize the
jump to the global symbol defined in the same source file so that no
relocation will be used. The new assembler will use relocation for
global jumps. It will mainly affect PIC asm code. The segment like

	.globl  __setjmp
__setjmp:
	...
	jmp __sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:

is no longer PIC safe since "jmp __sigsetjmp" jumps to a global symbol
and relocation will be used. Instead, it can be changed to

	.globl  __setjmp
__setjmp:
	...
	jmp sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:
sigsetjmp:

so that "jmp sigsetjmp" jumps to a local symbol and the new assembler
will optimize out the relocation.

Changes from binutils 2.9.5.0.41:

1. Update from binutils 2000 0512.
2. Add testsuite for ELF visibility.

Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.10.0.31.tar.gz. Source code.
2. binutils-2.10.0.29-2.10.0.31.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.10.0.31-1.i386.rpm. IA-32 binary RPM for RedHat 7.0.

There is no separate source rpm. You can do

# rpm -ta binutils-2.10.0.31.tar.gz

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://ftp.valinux.com/pub/support/hjl/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
10/11/2000
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org


</body></email><email><emailId>20001015235631</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2000-10-15 23:56:31-0400</timestampReceived><subject>The test release of binutils 2.10.0.32</subject><body>

Please note that this test release is under

http://ftp.valinux.com/pub/support/hjl/binutils/test/

I will move them to

http://ftp.valinux.com/pub/support/hjl/binutils/

if I don't get any serious bug report before 5pm PDT on Oct. 19.


H.J.
---
This is the beta release of binutils 2.10.0.32 for Linux, which is
based on binutils 2000 1014 in CVS on sourecware.cygnus.com plus
various changes. It is purely for Linux, although it has been tested
on Solaris/Sparc and Solaris/x86 from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.10.0.32 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.10.0.31:

1. Update from binutils 2000 1014.
2. An ELF/PPC weak symbol bug fix.
3. A new linkonce section name approach.
4. m68k-a.out is still broken. To be fixed.

Changes from binutils 2.10.0.29:

1. Update from binutils 2000 1011.
2. Back out the linkonce section name change so that C++ will work.
A different approach is being worked on.
3. m68k-a.out is known to be broken. To be fixed.

Changes from binutils 2.10.0.26:

1. Update from binutils 2000 1008.

Changes from binutils 2.10.0.24:

1. Update from binutils 2000 0907.

Changes from binutils 2.10.0.18:

1. Update from binutils 2000 0823. Fix DT_RPATH/DT_RUNPATH handling.
Fix the ELF/ia32 DSO not compiled with PIC.
2. Try to fix the ELF visibility bug on PPC with glibc 2.2.

Changes from binutils 2.10.0.12:

1. Update from binutils 2000 0720.
2. Fix the DT_NEEDED link bug.
3. Add the new DT_XXXX dynamic tags. Glibc 2.2 will use them at least
on libpthread.so.

Changes from binutils 2.10.0.9:

1. Update from binutils 2000 0701. Fix the parallel build in ld when PE
is enabled.

Changes from binutils 2.9.5.0.46:

1. Update from binutils 2000 0617. The demangler support for the new
g++ ABI. Minor fix for the ELF visibility. Fix linking non-ELF
relocatable object files under ELF with symbol versioning.
2. Support for linking PE relocatable object files under ia32/ELF.

Changes from binutils 2.9.5.0.42:

1. Update from binutils 2000 0604. The ELF visibility attribuite should
work correctly now.
2. The ia32 assembler has changed the way it assembles the "jmp"
instructions to the global symbols. The old assembler will optimize the
jump to the global symbol defined in the same source file so that no
relocation will be used. The new assembler will use relocation for
global jumps. It will mainly affect PIC asm code. The segment like

	.globl  __setjmp
__setjmp:
	...
	jmp __sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:

is no longer PIC safe since "jmp __sigsetjmp" jumps to a global symbol
and relocation will be used. Instead, it can be changed to

	.globl  __setjmp
__setjmp:
	...
	jmp sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:
sigsetjmp:

so that "jmp sigsetjmp" jumps to a local symbol and the new assembler
will optimize out the relocation.

Changes from binutils 2.9.5.0.41:

1. Update from binutils 2000 0512.
2. Add testsuite for ELF visibility.

Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.10.0.32.tar.gz. Source code.
2. binutils-2.10.0.31-2.10.0.32.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.10.0.32-1.i386.rpm. IA-32 binary RPM for RedHat 7.0.

There is no separate source rpm. You can do

# rpm -ta binutils-2.10.0.32.tar.gz

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://ftp.valinux.com/pub/support/hjl/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
10/15/2000
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org


</body></email><email><emailId>20001018205534</emailId><senderName>"H . J . Lu"</senderName><senderEmail>hjl@valinux.com</senderEmail><timestampReceived>2000-10-18 20:55:34-0400</timestampReceived><subject>A new test release of binitils 2.10.0.33</subject><body>

This test release is under

http://ftp.valinux.com/pub/support/hjl/binutils/test/

The main change is for ELF/PPC. If I don't get any serious bug reports
by 12pm PDT on Oct. 19, I will move it to

http://ftp.valinux.com/pub/support/hjl/binutils/


-- 
H.J. Lu (hjl@gnu.org)
--
This is the beta release of binutils 2.10.0.33 for Linux, which is
based on binutils 2000 1018 in CVS on sourecware.cygnus.com plus
various changes. It is purely for Linux, although it has been tested
on Solaris/Sparc and Solaris/x86 from time to time.

I am planning to make the public release soon. Please test it as much
as you can.

Please report any bugs related to binutils 2.10.0.33 to hjl@lucon.org.

For arm-linux targets, there are some important differences in behaviour 
between these tools and binutils 2.9.1.0.x.  The linker emulation name has 
changed from elf32arm{26} to armelf_linux{26}.  Also, the "-p" flag must be 
passed with the linker when working with object files (or static libraries) 
created using older versions of the assembler.  If this flag is omitted the 
linker will silently generate bad output when given old input files.

To get the correct behaviour from gcc, amend the *link section of your specs 
file as follows:

*link:
%{h*} %{version:-v}    %{b} %{Wl,*:%*}    %{static:-Bstatic}    %{shared:-shared}    \
%{symbolic:-Bsymbolic}    %{rdynamic:-export-dynamic}    %{!dynamic-linker: \
-dynamic-linker /lib/ld-linux.so.2}    -X    %{mbig-endian:-EB} %{mapcs-26:-m \
armelf_linux26} %{!mapcs-26:-m armelf_linux} -p


Changes from binutils 2.10.0.32:

1. Update from binutils 2000 1018.
2. A proper ELF/PPC visibility fix.
3. m68k-a.out is supposed to be fixed.

Changes from binutils 2.10.0.31:

1. Update from binutils 2000 1014.
2. An ELF/PPC weak symbol bug fix.
3. A new linkonce section name approach.
4. m68k-a.out is still broken. To be fixed.

Changes from binutils 2.10.0.29:

1. Update from binutils 2000 1011.
2. Back out the linkonce section name change so that C++ will work.
A different approach is being worked on.
3. m68k-a.out is known to be broken. To be fixed.

Changes from binutils 2.10.0.26:

1. Update from binutils 2000 1008.

Changes from binutils 2.10.0.24:

1. Update from binutils 2000 0907.

Changes from binutils 2.10.0.18:

1. Update from binutils 2000 0823. Fix DT_RPATH/DT_RUNPATH handling.
Fix the ELF/ia32 DSO not compiled with PIC.
2. Try to fix the ELF visibility bug on PPC with glibc 2.2.

Changes from binutils 2.10.0.12:

1. Update from binutils 2000 0720.
2. Fix the DT_NEEDED link bug.
3. Add the new DT_XXXX dynamic tags. Glibc 2.2 will use them at least
on libpthread.so.

Changes from binutils 2.10.0.9:

1. Update from binutils 2000 0701. Fix the parallel build in ld when PE
is enabled.

Changes from binutils 2.9.5.0.46:

1. Update from binutils 2000 0617. The demangler support for the new
g++ ABI. Minor fix for the ELF visibility. Fix linking non-ELF
relocatable object files under ELF with symbol versioning.
2. Support for linking PE relocatable object files under ia32/ELF.

Changes from binutils 2.9.5.0.42:

1. Update from binutils 2000 0604. The ELF visibility attribuite should
work correctly now.
2. The ia32 assembler has changed the way it assembles the "jmp"
instructions to the global symbols. The old assembler will optimize the
jump to the global symbol defined in the same source file so that no
relocation will be used. The new assembler will use relocation for
global jumps. It will mainly affect PIC asm code. The segment like

	.globl  __setjmp
__setjmp:
	...
	jmp __sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:

is no longer PIC safe since "jmp __sigsetjmp" jumps to a global symbol
and relocation will be used. Instead, it can be changed to

	.globl  __setjmp
__setjmp:
	...
	jmp sigsetjmp
	...
	.globl __sigsetjmp
__sigsetjmp:
sigsetjmp:

so that "jmp sigsetjmp" jumps to a local symbol and the new assembler
will optimize out the relocation.

Changes from binutils 2.9.5.0.41:

1. Update from binutils 2000 0512.
2. Add testsuite for ELF visibility.

Changes from binutils 2.9.5.0.37:

1. Update from binutils 2000 0502.
2. Support STV_HIDDEN and STV_INTERNAL.

Changes from binutils 2.9.5.0.35:

1. Update from binutils 2000 0418.
2. Fix an ld demangle style option bug.

Changes from binutils 2.9.5.0.34:

1. Update from binutils 2000 0412. Fix a relocation bug which affects
the Linux kernel compilation.
2. An ELF/PPC linker script update.

Changes from binutils 2.9.5.0.33:

1. Update from binutils 2000 0404. Fix the bug report bug.

Changes from binutils 2.9.5.0.32:

1. Update from binutils 2000 0403. Fix the 16bit ia32 assembler bug.

Changes from binutils 2.9.5.0.31:

1. Update from binutils 2000 0331. Fix the Linux/ARM assembler bug.
2. Fix a Debian assembler security bug.

Changes from binutils 2.9.5.0.29:

1. Update from binutils 2000 0319.
2. An ELF/alpha bug is fixed.

Changes from binutils 2.9.5.0.27:

1. Update from binutils 2000 0301.
2. A demangler bug is fixed.
3. A better fix for undefined symbols with -Bsymbolic when building
shared library.

Changes from binutils 2.9.5.0.24:

1. Update from binutils 2000 0204.
2. Added -taso to linker on alpha.
3. Fixed a -shared -Bsymbolic bug when PIC is not used.

Changes from binutils 2.9.5.0.22:

1. Update from binutils 2000 0113.
2. A symbol version bug is fixed.
3. A -Bsymbolic bug is fixed.

Changes from binutils 2.9.5.0.21:

1. Update from binutils 1999 1202.
2. Remove a MIPS/ELF change.
3. Enable SOM for HPPA.

Changes from binutils 2.9.5.0.19:

1. Update from binutils 1999 1122. An ia32 gas bug is fixed.

Changes from binutils 2.9.5.0.16:

1. Update from binutils 1999 1104.
2. i370 is changed to use EM_S370 and ELFOSABI_LINUX. Update readelf.
3. Fix Compaq's demangler support.

Changes from binutils 2.9.5.0.14:

1. Update from binutils 1999 1012. A gas bug which affects Linux 2.3.21
is fixed.
2. i370 update.
3. The new demangler code. You should use "--style=xxx" to select the
demnangle style instead of "--lang=xxx".

Changes from binutils 2.9.5.0.13:

1. Update from binutils 1999 0925.
2. Fix a -s and linker script bug.

Changes from binutils 2.9.5.0.12:

1. Update from binutils 1999 0922.
2. i370 update.

Changes from binutils 2.9.5.0.11:

1. Update from binutils 1999 0910. It fixed a PIC linker bug on ix86
   and sparc introduced in the last release.
2. i370 update.

Changes from binutils 2.9.5.0.10:

1. Update from binutils 1999 0906. It fixed a PIC linker bug on ix86
   and sparc.
2. Remove elf/hppa since it is WIP.

Changes from binutils 2.9.5.0.8:

1. Update from binutils 1999 0831. It allows spaces around '(' and ')'
   in x86 FP register names.

Changes from binutils 2.9.5.0.7:

1. Update from binutils 1999 0821.
2. Some MIPS changes.

Changes from binutils 2.9.5.0.6:

1. Update from binutils 1999 0813.
2. i370 update.

Changes from binutils 2.9.5.0.5:

1. Update from binutils 1999 0809. An ELF/Sparc ld bug is fixed.

Changes from binutils 2.9.5.0.4:

1. Update from binutils 1999 0806. A Solaris/Sparc gas bug is fixed.
2. Remove mips gas patches from binutils 2.9.1.0.25.

Changes from binutils 2.9.5.0.3:

1. Update from binutils 1999 0801.
2. Support for real mode x86 gcc.

Changes from binutils 2.9.4.0.8:

1. Update from binutils 1999 0719. A libc 5 related bug fix.
2. Fix a typo in mips gas.

Changes from binutils 2.9.4.0.7:

1. Update from binutils 1999 0710. A weak symbol bug

http://egcs.cygnus.com/ml/egcs-bugs/1999-07/msg00129.html

is fixed.

Changes from binutils 2.9.4.0.6:

1. Update from binutils 1999 0626.

Changes from binutils 2.9.4.0.5:

1. Update from binutils 1999 0620.
2. Remove my fwait fix and use the one in cvs.
3. Use "--only-section=section" instead of "--extract-section=section".
   for objcopy.

Changes from binutils 2.9.4.0.4:

1. Update from binutils 1999 0612.
2. Remove various temporary fixes of mine since those bugs are fixed
   now.

Changes from binutils 2.9.4.0.3:

1. Update from binutils 1999 0611.
2. Remove my ELF/Alpha bfd changes.
3. Use the local symbol copy fix in binutils 1999 0611.

Changes from binutils 2.9.4.0.2:

1. Update from binutils 1999 0607.
2. Remove my Sparc hacks.
3. Fix local symbol copy.

Changes from binutils 2.9.4.0.1:

1. Update from binutils 1999 0606.
2. Restore relocation overflow checking in binutils 2.9.1.0.25 so that
   Linux kernel can build.
3. Fix i370 for the new gas.

Changes from binutils 1999 0605:

1. Fix a -Bsymbolic bug for Linux/alpha.
2. Add ELF/i370.
3. Fix 8/16-bit relocations for i386.
4. Add --redefine-sym=old_form=new_form to objcopy.
5. Add "-j section" for objcopy.
6. Fix i386 disassembler for fwait.
7. Fix a Sparc asm bug.
8. Add Ada demangle support.
9. Fix MIPS/ELF bugs.
10. Add some vxworks suppport.
11. Fix a.out assembler.

The file list:

1. binutils-2.10.0.33.tar.gz. Source code.
2. binutils-2.10.0.32-2.10.0.33.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.10.0.33-1.i386.rpm. IA-32 binary RPM for RedHat 7.0.

There is no separate source rpm. You can do

# rpm -ta binutils-2.10.0.33.tar.gz

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://ftp.valinux.com/pub/support/hjl/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
10/18/2000
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org


</body></email><email><emailId>20001024203159</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-10-24 20:31:59-0400</timestampReceived><subject>Re: glibc 2.1.94 (ldconfig has a bug)</subject><body>

Denis Zaitsev &lt;zzz@cd-club.ru&gt; writes:

&gt; I have sent some patches a week ago and it seems that it's still no
&gt; any answer. And my pop server was die for some time at that week. So,
&gt; I want to ensure that I haven't missed any mail from you and to ask
&gt; about the destiny of those pathes...

I've started looking at them but got interrupted by something more
important.  You'll hear from me as soon as I've handle the mail.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001114153905</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@cd-club.ru</senderEmail><timestampReceived>2000-11-14 15:39:05-0400</timestampReceived><subject>Re: glibc 2.2 (ldconfig has a bug)</subject><body>

Now it's indeed ldconfig... Here is the patch.


--- glibc-2.2/elf/ldconfig.c	Tue Nov 14 20:05:26 2000
+++ glibc-2.2/elf/ldconfig.c	Tue Nov 14 20:05:02 2000
@@ -370,13 +370,13 @@
 
   /* Get complete path.  */
   full_libname = alloca (strlen (path) + strlen (libname) + 2);
-  full_soname = alloca (strlen (path) + strlen (libname) + 2);
+  full_soname = alloca (strlen (path) + strlen (soname) + 2);
   sprintf (full_libname, "%s/%s", path, libname);
   sprintf (full_soname, "%s/%s", path, soname);
   if (opt_chroot)
     {
       real_full_libname = alloca (strlen (real_path) + strlen (libname) + 2);
-      real_full_soname = alloca (strlen (real_path) + strlen (libname) + 2);
+      real_full_soname = alloca (strlen (real_path) + strlen (soname) + 2);
       sprintf (real_full_libname, "%s/%s", real_path, libname);
       sprintf (real_full_soname, "%s/%s", real_path, soname);
     }


It's merrily. The error was sitting silently until the release... Then
ld-2.1.97.so became ld-2.2.so, its strlen becomes 3 bytes shorter and
finito... For other names (on my system) it is stiil working without
the patch.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001121200620</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-11-21 20:06:20-0400</timestampReceived><subject>Re: Dynamic libraries at a non-default address</subject><body>



On 21 Nov 2000, H. Peter Anvin wrote:

&gt; Hello friends,
&gt;
&gt; Normally, ld.so loads dynamic libraries at 0x40000000, which I believe
&gt; is the standard address the kernel allows anonymous mmap() at.  I have
&gt; a project for which this is simply not appropriate, since I need an
&gt; extremely large mmap() at zero.  Obviously, once that mmap() is in
&gt; place everything is fine, but I can't seem to find any clean way of
&gt; avoiding that area from being populated with shared libraries first.
&gt;
Why do you need to mmap more than 1gb starting at 0?  (or any other
where?)  Show some consideration for the poor overworked ix86 hardware
that only has one 4g hardware address space.  (A real computer has 512,
they are 64gb, and the OS doesn't have to be mapped in to but one).

&gt; This doesn't need to be portable to non-Linux operating systems, nor
&gt; to non-i386 platforms, but it *does* need to be future-proof with
&gt; respect to the glibc or kernel version (hence simply linking static
&gt; isn't a viable option.)
&gt;
&gt; The only thing I have been able to think of is to override the
&gt; interpreter in the ELF header and divert the code to something that
&gt; creates a dummy large mmap() first, but I haven't been able to figure
&gt; out how to make the new interpreter invoke the standard one.
&gt;
Static link a bootloader to do the mmap, clone (to keep the same AS) and
exec the main program?  Mind, I haven't tried this, I've no idea if it
will work.

By the interpreter, do you mean ld-linux.so?  How about dlopen/dlsym?
&gt; Any suggestions?
&gt;
&gt; Thanks,
&gt;
&gt; 	-hpa
&gt; --
&gt; &lt;hpa@transmeta.com&gt; at work, &lt;hpa@zytor.com&gt; in private!
&gt; "Unix gives you enough rope to shoot yourself in the foot."
&gt; http://www.zytor.com/~hpa/puzzle.txt
&gt; -
Lawson


Yesterday he frolicked in his pussy paradise,
Decapitating tweety-birds and masticating mice.
Now he's just five pounds of raw mincemeat that don't smell very nice.
He's nobody's moggy now.

                  - Eric Bogle




________________________________________________________________
GET INTERNET ACCESS FROM JUNO!
Juno offers FREE or PREMIUM Internet access for less!
Join Juno today!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001121231525</emailId><senderName>"H. Peter Anvin"</senderName><senderEmail>hpa@zytor.com</senderEmail><timestampReceived>2000-11-21 23:15:25-0400</timestampReceived><subject>Dynamic libraries at a non-default address</subject><body>

Hello friends,

Normally, ld.so loads dynamic libraries at 0x40000000, which I believe
is the standard address the kernel allows anonymous mmap() at.  I have
a project for which this is simply not appropriate, since I need an
extremely large mmap() at zero.  Obviously, once that mmap() is in
place everything is fine, but I can't seem to find any clean way of
avoiding that area from being populated with shared libraries first.

This doesn't need to be portable to non-Linux operating systems, nor
to non-i386 platforms, but it *does* need to be future-proof with
respect to the glibc or kernel version (hence simply linking static
isn't a viable option.)

The only thing I have been able to think of is to override the
interpreter in the ELF header and divert the code to something that
creates a dummy large mmap() first, but I haven't been able to figure
out how to make the new interpreter invoke the standard one.

Any suggestions?

Thanks,

	-hpa
-- 
&lt;hpa@transmeta.com&gt; at work, &lt;hpa@zytor.com&gt; in private!
"Unix gives you enough rope to shoot yourself in the foot."
http://www.zytor.com/~hpa/puzzle.txt
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001001023123</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@cd-club.ru</senderEmail><timestampReceived>2000-10-01 02:31:23-0400</timestampReceived><subject>Re: glibc 2.1.94 (ldconfig has a bug)</subject><body>

If ldconfig is invoked with --format=new, then it's impossible to
unmount that fs which contains a fresh ld.so.cache.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001005222920</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-10-05 22:29:20-0400</timestampReceived><subject>Re: glibc 2.1.94 (ldconfig has a bug)</subject><body>

Denis Zaitsev &lt;zzz@cd-club.ru&gt; writes:

&gt; If ldconfig is invoked with --format=new, then it's impossible to
&gt; unmount that fs which contains a fresh ld.so.cache.

I cannot see how this can happen.  ldconfig terminates and all
descriptors are therefore closed.  For newly started processes the
code is not much different if only the new format is available.

Send me the strace output of a program after the ldconfig run.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001009174000</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@cd-club.ru</senderEmail><timestampReceived>2000-10-09 17:40:00-0400</timestampReceived><subject>Re: glibc 2.1.94 (ldconfig has a bug)</subject><body>

Sorry, ldconfig has not the problem, but ld.so has. So, it is the
patch:


--- glibc-2.1.94/sysdeps/generic/dl-cache.c     Sat May 27 01:38:36 2000
+++ glibc-2.1.94/sysdeps/generic/dl-cache.c     Mon Oct  9 16:11:46 2000
@@ -184,7 +184,8 @@
        }
       else if (file &amp;&amp; cachesize &gt; sizeof *cache_new)
        {
-         cache_new = (struct cache_file_new *) file;
+         cache_new = (struct cache_file_new *)
+         cache     = file;
          if (memcmp (cache_new-&gt;magic, CACHEMAGIC_NEW,
                      sizeof CACHEMAGIC_NEW - 1)
              || memcmp (cache_new-&gt;version, CACHE_VERSION,


In the case when ld.so.cache has the pure new format, the cache var
was left unassigned, so _dl_unload_cache didn't unmap ld.so.cache. And
we had the problem with unmounting...

By the way, it seems not to be the only patch is need for
dl-cache.c. We have

#define _dl_cache_verify_ptr(ptr) (ptr &lt; cachesize - sizeof *cache)

there. What does this macro do when we have the new-format cache
again? So, if it is not against the rules, I would like to send the
corrections...
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001011074537</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@suse.de</senderEmail><timestampReceived>2000-10-11 07:45:37-0400</timestampReceived><subject>Re: glibc 2.1.94 (ldconfig has a bug)</subject><body>

&gt;&gt;&gt;&gt;&gt; Denis Zaitsev writes:

 &gt; Sorry, ldconfig has not the problem, but ld.so has. So, it is the
 &gt; patch:


 &gt; --- glibc-2.1.94/sysdeps/generic/dl-cache.c     Sat May 27 01:38:36 2000
 &gt; +++ glibc-2.1.94/sysdeps/generic/dl-cache.c     Mon Oct  9 16:11:46 2000
 &gt; @@ -184,7 +184,8 @@
 &gt;         }
 &gt;        else if (file &amp;&amp; cachesize &gt; sizeof *cache_new)
 &gt;         {
 &gt; -         cache_new = (struct cache_file_new *) file;
 &gt; +         cache_new = (struct cache_file_new *)
 &gt; +         cache     = file;
 &gt;           if (memcmp (cache_new-&gt;magic, CACHEMAGIC_NEW,
 &gt;                       sizeof CACHEMAGIC_NEW - 1)
 &gt;               || memcmp (cache_new-&gt;version, CACHE_VERSION,


 &gt; In the case when ld.so.cache has the pure new format, the cache var
 &gt; was left unassigned, so _dl_unload_cache didn't unmap ld.so.cache. And
 &gt; we had the problem with unmounting...

 &gt; By the way, it seems not to be the only patch is need for
 &gt; dl-cache.c. We have

 &gt; #define _dl_cache_verify_ptr(ptr) (ptr &lt; cachesize - sizeof *cache)

 &gt; there. What does this macro do when we have the new-format cache
 &gt; again? So, if it is not against the rules, I would like to send the
 &gt; corrections...

Thanks, I've added your patch.  I'm trying to look into the other
issues next week - patches are always welcome!

Andreas

2000-10-11  Andreas Jaeger  &lt;aj@suse.de&gt;

	* sysdeps/generic/dl-cache.c (_dl_load_cache_lookup): Set cache.
	Patch by Denis Zaitsev &lt;zzz@cd-club.ru&gt;.



-- 
 Andreas Jaeger
  SuSE Labs aj@suse.de
   private aj@arthur.inka.de
    http://www.suse.de/~aj
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001016120134</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@cd-club.ru</senderEmail><timestampReceived>2000-10-16 12:01:34-0400</timestampReceived><subject>Re: glibc 2.1.94 (ldconfig has a bug)</subject><body>

So, here are a cure for dl-cache again. What has been done:

a) _dl_cache_verify_ptr macro didn't work in case of the new cache
   format. Now it works. But the macro itself is a little part of
   changes, - other things around are altered to make them work and to
   make them better (as I think...).

b) Two checks for the two parts of the new cache header are combined
   in one. It is no need to separate them, as of their current usage.

c) Some things here and there are altered. Again, to improve code a
   little...

Attached bzipped patch is against glibc-2.1.95 without my previous
tiny patch.

["dl-cache.patch.bz2" (application/octet-stream)]
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org


</body></email><email><emailId>20001016182347</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-10-16 18:23:47-0400</timestampReceived><subject>Re: glibc 2.1.94 (ldconfig has a bug)</subject><body>

Denis Zaitsev &lt;zzz@cd-club.ru&gt; writes:

&gt; So, here are a cure for dl-cache again. What has been done:
&gt; [...]

Applying this patch is too high of a risk.  You munged together too
many different things.

If you have a bug fix describe the problem and send the patch separately.

If there are improvements they can be considered if they are obvious
but otherwise have to wait until after 2.2 is released.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001017012658</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@cd-club.ru</senderEmail><timestampReceived>2000-10-17 01:26:58-0400</timestampReceived><subject>Re: glibc 2.1.94 (ldconfig has a bug)</subject><body>

On Mon, Oct 16, 2000 at 11:23:47AM -0700, Ulrich Drepper wrote:
&gt; Denis Zaitsev &lt;zzz@cd-club.ru&gt; writes:
&gt; 
&gt; &gt; So, here are a cure for dl-cache again. What has been done:
&gt; &gt; [...]
&gt; 
&gt; Applying this patch is too high of a risk.  You munged together too
&gt; many different things.
&gt; 
&gt; If you have a bug fix describe the problem and send the patch separately.
&gt; 
&gt; If there are improvements they can be considered if they are obvious
&gt; but otherwise have to wait until after 2.2 is released.
&gt; 

Ok,ok,ok...
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001017145151</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@cd-club.ru</senderEmail><timestampReceived>2000-10-17 14:51:51-0400</timestampReceived><subject>Re: glibc 2.1.94 (ldconfig has a bug)</subject><body>

Here are the fixes etc one by one. They all mean dl-cache.c, for which
my previous tiny patch has been applied. Would they be applied too, it
must be done in the order they are here.


a) We have the next macro:

#define _dl_cache_verify_ptr(ptr) (ptr &lt; cachesize - sizeof *cache)

It doesn't work in case of the new cache format and it doesn't work
even in case of the old format, because the libs[] array is forgotten
here. But it behaves quiet while we give it the good ptr's only (and
it is what we usually do). To cure the situation we can do some
different calculations of a limit for this pointer (which is an offset
really) for the each variant of the cache file contents, but we have a
better way. We always use the macro like this:

       _dl_cache_verify_ptr (cache-&gt;libs[middle - 1].key)
       ...
       (_dl_cache_libcmp (name,
                          cache_data
                           + cache-&gt;libs[middle - 1].key)

so, we can compute (cache_data + cache-&gt;libs[...].key) right away,
look if this goes into the cache file simple by comparing its value
with the end of the cache file's map and use this value in a later
expression. This approach will work for any cache formats, and we will
get some optimization, because the arithmetic becomes simpler. Below
it is a patch, which implements this approach. There we:

 add the "End Of Cache" var - eoc; 

 add the pointer - ptr, which holds the
 (cache_data + cache-&gt;libs[...].something)'s
 values;

 change the macro to do the simple (ptr &lt; eoc) check;

 change all the pairs
       _dl_cache_verify_ptr
       ...
       _dl_cache_do_something_with_ptr 
 to work thru the new way.

By the way, after this patch is applied, _dl_load_cache_lookup
compiled by GCC for Pentium becomes roughly 0x100 bytes shorter. So,
the arithmetic indeed becomes simpler.



--- glibc-2.1.95/sysdeps/generic/dl-cache.c	Tue Oct 17 09:17:24 2000
+++ glibc-2.1.95/sysdeps/generic/dl-cache.c	Tue Oct 17 09:50:27 2000
@@ -35,7 +35,7 @@
 static size_t cachesize;
 
 /* 1 if cache_data + PTR points into the cache.  */
-#define _dl_cache_verify_ptr(ptr) (ptr &lt; cachesize - sizeof *cache)
+#define _dl_cache_verify_ptr(ptr) ((ptr) &lt; eoc)
 
 /* This is the cache ID we expect.  Normally it is 3 for glibc linked
    binaries.  */
@@ -57,15 +57,15 @@
       {									  \
 	/* Make sure string table indices are not bogus before using	  \
 	   them.  */							  \
-	if (! _dl_cache_verify_ptr (cache-&gt;libs[middle].key))		  \
+	if (! _dl_cache_verify_ptr (ptr = cache_data			  \
+					+ cache-&gt;libs[middle].key))	  \
 	  {								  \
 	    cmpres = 1;							  \
 	    break;							  \
 	  }								  \
 									  \
 	/* Actually compare the entry with the key.  */			  \
-	cmpres = _dl_cache_libcmp (name,				  \
-				   cache_data + cache-&gt;libs[middle].key); \
+	cmpres = _dl_cache_libcmp (name, ptr);				  \
 	if (cmpres == 0)						  \
 	  /* Found it.  */						  \
 	  break;							  \
@@ -89,12 +89,10 @@
 	while (middle &gt; 0						  \
 	       /* Make sure string table indices are not bogus before	  \
 		  using them.  */					  \
-	       &amp;&amp; _dl_cache_verify_ptr (cache-&gt;libs[middle - 1].key)	  \
+	       &amp;&amp; _dl_cache_verify_ptr (ptr = cache_data		  \
+					    + cache-&gt;libs[middle - 1].key)\
 	       /* Actually compare the entry.  */			  \
-	       &amp;&amp; (_dl_cache_libcmp (name,				  \
-				     cache_data				  \
-				     + cache-&gt;libs[middle - 1].key)	  \
-		   == 0))						  \
+	       &amp;&amp; (_dl_cache_libcmp (name, ptr) == 0))			  \
 	  --middle;							  \
 									  \
 	do								  \
@@ -106,21 +104,20 @@
 		/* We haven't seen this string so far.  Test whether the  \
 		   index is ok and whether the name matches.  Otherwise	  \
 		   we are done.  */					  \
-		&amp;&amp; (! _dl_cache_verify_ptr (cache-&gt;libs[middle].key)	  \
-		    || (_dl_cache_libcmp (name,				  \
-					  cache_data			  \
-					  + cache-&gt;libs[middle].key)	  \
-			!= 0)))						  \
+		&amp;&amp; (! _dl_cache_verify_ptr (ptr = cache_data		  \
+						+ cache-&gt;libs[middle].key)\
+		    || (_dl_cache_libcmp (name, ptr) != 0)))		  \
 	      break;							  \
 									  \
 	    flags = cache-&gt;libs[middle].flags;				  \
 	    if (_dl_cache_check_flags (flags)				  \
-		&amp;&amp; _dl_cache_verify_ptr (cache-&gt;libs[middle].value))	  \
+		&amp;&amp; _dl_cache_verify_ptr (ptr = cache_data		  \
+					     + cache-&gt;libs[middle].value))\
 	      {								  \
 		if (best == NULL || flags == _dl_correct_cache_id)	  \
 		  {							  \
 		    HWCAP_CHECK;					  \
-		    best = cache_data + cache-&gt;libs[middle].value;	  \
+		    best = ptr;						  \
 									  \
 		    if (flags == _dl_correct_cache_id)			  \
 		      /* We've found an exact match for the shared	  \
@@ -145,8 +142,8 @@
 {
   int left, right, middle;
   int cmpres;
-  const char *cache_data;
-  const char *best;
+  const char *cache_data, *eoc;
+  const char *best, *ptr;
 
   /* Print a message if the loading of libs is traced.  */
   if (_dl_debug_libs)
@@ -205,6 +202,7 @@
     /* Previously looked for the cache file and didn't find it.  */
     return NULL;
 
+  eoc = (void*)cache + cachesize;
   best = NULL;
 
   if (cache_new != (void *) -1)



b) When we check the new cache signature, we look at the magic and the
version separately. We can consolidate this.



--- glibc-2.1.95/sysdeps/generic/dl-cache.c	Tue Oct 17 09:50:27 2000
+++ glibc-2.1.95/sysdeps/generic/dl-cache.c	Tue Oct 17 10:28:14 2000
@@ -134,6 +134,9 @@
 
 
 
+#define CACHE_NEW_SIGN (CACHEMAGIC_NEW CACHE_VERSION)
+
+
 /* Look up NAME in ld.so.cache and return the file name stored there,
    or null if none is found.  */
 
@@ -173,20 +176,14 @@
 
 	  cache_new = (struct cache_file_new *) ((void *)cache + offset);
 	  if (cachesize &lt; (offset + sizeof (struct cache_file_new))
-	      || memcmp (cache_new-&gt;magic, CACHEMAGIC_NEW,
-			  sizeof CACHEMAGIC_NEW - 1)
-	      || memcmp (cache_new-&gt;version, CACHE_VERSION,
-			 sizeof CACHE_VERSION - 1))
+	      || memcmp (cache_new, CACHE_NEW_SIGN, sizeof CACHE_NEW_SIGN - 1))
 	    cache_new = (void *) -1;
 	}
       else if (file &amp;&amp; cachesize &gt; sizeof *cache_new)
 	{
 	  cache_new = (struct cache_file_new *)
 	  cache     = file;
-	  if (memcmp (cache_new-&gt;magic, CACHEMAGIC_NEW,
-		      sizeof CACHEMAGIC_NEW - 1)
-	      || memcmp (cache_new-&gt;version, CACHE_VERSION,
-			 sizeof CACHE_VERSION - 1))
+	  if (memcmp (cache_new, CACHE_NEW_SIGN, sizeof CACHE_NEW_SIGN - 1))
 	    cache_new = (void *) -1;
 	}
       else



c) A little error, again. We have:

      else if (...)
        {
          cache_new = (struct cache_file_new *)
          cache     = file;
          if (...)
            cache_new = (void *) -1;
        }

where we check for the new cache version. If the second condition
isn't satisfied, then cache is left with a trustworthy value, while it
must be rewritten with -1, as cache_new is. The next patch fixes that.
And the whole "else if" branch is modified to be more, say, natural.



--- glibc-2.1.95/sysdeps/generic/dl-cache.c	Tue Oct 17 10:28:14 2000
+++ glibc-2.1.95/sysdeps/generic/dl-cache.c	Tue Oct 17 13:38:13 2000
@@ -179,13 +179,10 @@
 	      || memcmp (cache_new, CACHE_NEW_SIGN, sizeof CACHE_NEW_SIGN - 1))
 	    cache_new = (void *) -1;
 	}
-      else if (file &amp;&amp; cachesize &gt; sizeof *cache_new)
-	{
-	  cache_new = (struct cache_file_new *)
-	  cache     = file;
-	  if (memcmp (cache_new, CACHE_NEW_SIGN, sizeof CACHE_NEW_SIGN - 1))
-	    cache_new = (void *) -1;
-	}
+      else if (file &amp;&amp; cachesize &gt; sizeof *cache_new &amp;&amp;
+	       !memcmp (file, CACHE_NEW_SIGN, sizeof CACHE_NEW_SIGN - 1))
+	cache_new = (struct cache_file_new *)
+	cache     = file;
       else
 	{
 	  if (file)



d) The next patch can be considered as a little combing of the code.
It cures nothing. But it eliminates some superfluous checks for (file
!= NULL) and reduces the usage of a file-level variable cache, so it
can be considered as a little optimization too.



--- glibc-2.1.95/sysdeps/generic/dl-cache.c	Tue Oct 17 13:38:13 2000
+++ glibc-2.1.95/sysdeps/generic/dl-cache.c	Tue Oct 17 14:38:21 2000
@@ -163,33 +163,32 @@
 	 - the old format with the new format in it
 	 - only the new format
 	 The following checks if the cache contains any of these formats.  */
-      if (file &amp;&amp; cachesize &gt; sizeof *cache &amp;&amp;
-	  !memcmp (file, CACHEMAGIC, sizeof CACHEMAGIC - 1))
-	{
-	  size_t offset;
-	  /* Looks ok.  */
-	  cache = file;
-
-	  /* Check for new version.  */
-	  offset = ALIGN_CACHE (sizeof (struct cache_file)
-				+ cache-&gt;nlibs * sizeof (struct file_entry));
-
-	  cache_new = (struct cache_file_new *) ((void *)cache + offset);
-	  if (cachesize &lt; (offset + sizeof (struct cache_file_new))
-	      || memcmp (cache_new, CACHE_NEW_SIGN, sizeof CACHE_NEW_SIGN - 1))
+      if (file)
+	if (cachesize &gt; sizeof *cache &amp;&amp;
+	    !memcmp (file, CACHEMAGIC, sizeof CACHEMAGIC - 1))
+	  {
+	    /* Looks ok.  */
+	    /* Check for new version.  */
+	    size_t offset;
 	    cache_new = (void *) -1;
-	}
-      else if (file &amp;&amp; cachesize &gt; sizeof *cache_new &amp;&amp;
-	       !memcmp (file, CACHE_NEW_SIGN, sizeof CACHE_NEW_SIGN - 1))
-	cache_new = (struct cache_file_new *)
-	cache     = file;
-      else
-	{
-	  if (file)
+	    offset = ALIGN_CACHE (sizeof *cache + ((struct cache_file*)file)-&gt;
+				  nlibs * sizeof (struct file_entry));
+	    if (cachesize &gt; offset + sizeof *cache_new &amp;&amp;
+		!memcmp (file + offset, CACHE_NEW_SIGN, sizeof CACHE_NEW_SIGN - 1))
+	      cache_new = file + offset;
+	  }
+	else if (cachesize &gt; sizeof *cache_new &amp;&amp;
+		 !memcmp (file, CACHE_NEW_SIGN, sizeof CACHE_NEW_SIGN - 1))
+	  cache_new = file;
+	else
+	  {
 	    __munmap (file, cachesize);
-	  cache = (void *) -1;
-	  return NULL;
-	}
+	    goto fail;
+	  }
+      else fail:
+	file = (void *) -1;
+
+      cache = file;
     }
 
   if (cache == (void *) -1)



That's all. Again, these patches assume that my first patch is already
applied to dl-cache.c.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001024201429</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@cd-club.ru</senderEmail><timestampReceived>2000-10-24 20:14:29-0400</timestampReceived><subject>Re: glibc 2.1.94 (ldconfig has a bug)</subject><body>

I have sent some patches a week ago and it seems that it's still no
any answer. And my pop server was die for some time at that week. So,
I want to ensure that I haven't missed any mail from you and to ask
about the destiny of those pathes...
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001121234203</emailId><senderName></senderName><senderEmail>lawson_whitney</senderEmail><timestampReceived>2000-11-21 23:42:03-0400</timestampReceived><subject>Re: Dynamic libraries at a non-default address</subject><body>



On Tue, 21 Nov 2000, H. Peter Anvin wrote:

&gt; lawson_whitney@juno.com wrote:

&gt; &gt; Static link a bootloader to do the mmap, clone (to keep the same AS)
and
&gt; &gt; exec the main program?  Mind, I haven't tried this, I've no idea if
it
&gt; &gt; will work.
&gt; &gt;
&gt; &gt; By the interpreter, do you mean ld-linux.so?  How about dlopen/dlsym?
&gt; &gt;
&gt;
&gt; Yes.  By the time dlopen() is available, ld-linux.so is very much
already
&gt; loaded...
&gt;
&gt; 	-hpa

Some things just gotta be static linked.  ldconfig, FI, or whoever
designed your distro is nuts.  System bootloaders, for another.  Why not
a little static-linked process bootloader?
&gt;
&gt; --
&gt; &lt;hpa@transmeta.com&gt; at work, &lt;hpa@zytor.com&gt; in private!
&gt; "Unix gives you enough rope to shoot yourself in the foot."
&gt; http://www.zytor.com/~hpa/puzzle.txt
&gt;
Lawson


Any sufficiently advanced bug is indistinguishable from a feature.

                         -- Rich Kulawiec




________________________________________________________________
GET INTERNET ACCESS FROM JUNO!
Juno offers FREE or PREMIUM Internet access for less!
Join Juno today!  For your FREE software, visit:
http://dl.www.juno.com/get/tagj.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001122020814</emailId><senderName>"H. Peter Anvin"</senderName><senderEmail>hpa@transmeta.com</senderEmail><timestampReceived>2000-11-22 02:08:14-0400</timestampReceived><subject>Re: Dynamic libraries at a non-default address</subject><body>

lawson_whitney@juno.com wrote:
&gt; 
&gt; On 21 Nov 2000, H. Peter Anvin wrote:
&gt; 
&gt; &gt; Hello friends,
&gt; &gt;
&gt; &gt; Normally, ld.so loads dynamic libraries at 0x40000000, which I believe
&gt; &gt; is the standard address the kernel allows anonymous mmap() at.  I have
&gt; &gt; a project for which this is simply not appropriate, since I need an
&gt; &gt; extremely large mmap() at zero.  Obviously, once that mmap() is in
&gt; &gt; place everything is fine, but I can't seem to find any clean way of
&gt; &gt; avoiding that area from being populated with shared libraries first.
&gt; &gt;
&gt; Why do you need to mmap more than 1gb starting at 0?  (or any other
&gt; where?)  Show some consideration for the poor overworked ix86 hardware
&gt; that only has one 4g hardware address space.  (A real computer has 512,
&gt; they are 64gb, and the OS doesn't have to be mapped in to but one).
&gt; 

Sorry, the answer to that question is NDA material.  (I don't think 64 GB
is enough for a "real" address space, myself...)

&gt; &gt; This doesn't need to be portable to non-Linux operating systems, nor
&gt; &gt; to non-i386 platforms, but it *does* need to be future-proof with
&gt; &gt; respect to the glibc or kernel version (hence simply linking static
&gt; &gt; isn't a viable option.)
&gt; &gt;
&gt; &gt; The only thing I have been able to think of is to override the
&gt; &gt; interpreter in the ELF header and divert the code to something that
&gt; &gt; creates a dummy large mmap() first, but I haven't been able to figure
&gt; &gt; out how to make the new interpreter invoke the standard one.
&gt; &gt;
&gt; Static link a bootloader to do the mmap, clone (to keep the same AS) and
&gt; exec the main program?  Mind, I haven't tried this, I've no idea if it
&gt; will work.
&gt; 
&gt; By the interpreter, do you mean ld-linux.so?  How about dlopen/dlsym?
&gt; 

Yes.  By the time dlopen() is available, ld-linux.so is very much already
loaded...

	-hpa

-- 
&lt;hpa@transmeta.com&gt; at work, &lt;hpa@zytor.com&gt; in private!
"Unix gives you enough rope to shoot yourself in the foot."
http://www.zytor.com/~hpa/puzzle.txt
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001122065847</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@suse.de</senderEmail><timestampReceived>2000-11-22 06:58:47-0400</timestampReceived><subject>Re: Dynamic libraries at a non-default address</subject><body>

&gt;&gt;&gt;&gt;&gt; H Peter Anvin writes:

 &gt; Hello friends,
 &gt; Normally, ld.so loads dynamic libraries at 0x40000000, which I believe
 &gt; is the standard address the kernel allows anonymous mmap() at.  I have
 &gt; a project for which this is simply not appropriate, since I need an
 &gt; extremely large mmap() at zero.  Obviously, once that mmap() is in
 &gt; place everything is fine, but I can't seem to find any clean way of
 &gt; avoiding that area from being populated with shared libraries first.

Are you sure it always use this address?  I don't think so - and
couldn't find 0x40000000 in glibc at all.

grep for ELF_PREFERRED_ADDRESS in the glibc sources - only powerpc
defines it, the implementation in sysdeps/powerpc/dl-machine.c
suggests that it works with any address.  All other architectures
should work with any mapping directly.

 &gt; This doesn't need to be portable to non-Linux operating systems, nor
 &gt; to non-i386 platforms, but it *does* need to be future-proof with
 &gt; respect to the glibc or kernel version (hence simply linking static
 &gt; isn't a viable option.)

 &gt; The only thing I have been able to think of is to override the
 &gt; interpreter in the ELF header and divert the code to something that
 &gt; creates a dummy large mmap() first, but I haven't been able to figure
 &gt; out how to make the new interpreter invoke the standard one.

 &gt; Any suggestions?
Look how powerpc does handle ELF_PREFERRED_ADDRESS, I guess that will
help you come up with an implementation.

Andreas
-- 
 Andreas Jaeger
  SuSE Labs aj@suse.de
   private aj@arthur.inka.de
    http://www.suse.de/~aj
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001122171643</emailId><senderName>"H. Peter Anvin"</senderName><senderEmail>hpa@transmeta.com</senderEmail><timestampReceived>2000-11-22 17:16:43-0400</timestampReceived><subject>Re: Dynamic libraries at a non-default address</subject><body>

Andreas Jaeger wrote:
&gt; 
&gt; &gt;&gt;&gt;&gt;&gt; H Peter Anvin writes:
&gt; 
&gt;  &gt; Hello friends,
&gt;  &gt; Normally, ld.so loads dynamic libraries at 0x40000000, which I believe
&gt;  &gt; is the standard address the kernel allows anonymous mmap() at.  I have
&gt;  &gt; a project for which this is simply not appropriate, since I need an
&gt;  &gt; extremely large mmap() at zero.  Obviously, once that mmap() is in
&gt;  &gt; place everything is fine, but I can't seem to find any clean way of
&gt;  &gt; avoiding that area from being populated with shared libraries first.
&gt; 
&gt; Are you sure it always use this address?  I don't think so - and
&gt; couldn't find 0x40000000 in glibc at all.
&gt; 
&gt; grep for ELF_PREFERRED_ADDRESS in the glibc sources - only powerpc
&gt; defines it, the implementation in sysdeps/powerpc/dl-machine.c
&gt; suggests that it works with any address.  All other architectures
&gt; should work with any mapping directly.
&gt; 

The 0x40000000 comes from the kernel -- it's the lowest address a mmap()
without a preferred address will be assigned.

	-hpa

-- 
&lt;hpa@transmeta.com&gt; at work, &lt;hpa@zytor.com&gt; in private!
"Unix gives you enough rope to shoot yourself in the foot."
http://www.zytor.com/~hpa/puzzle.txt
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001030171020</emailId><senderName>Christian Iseli</senderName><senderEmail>chris@ludwig-alpha.unil.ch</senderEmail><timestampReceived>2000-10-30 17:10:20-0400</timestampReceived><subject>Re: glibc 2.1.96</subject><body>


drepper@redhat.com said:
&gt; Thanks for testing.  But I already said in the announcement that you
&gt; need a rececent compiler (and tools) an Alpha.  I've only had success
&gt; with gcc 2.96 and up. 

Yup, you said it.  That's why I tried using the latest CVS.  But it still
failed. Is there a specific snapshot that you'd recommend ?

					Christian


-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001023224903</emailId><senderName>Jesse Pollard</senderName><senderEmail>pollard@tomcat.admin.navo.hpc.mil</senderEmail><timestampReceived>2000-10-23 22:49:03-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

---------  Received message begins Here  ---------

&gt; 
&gt; Jesse Pollard &lt;pollard@tomcat.admin.navo.hpc.mil&gt; writes:
&gt; 
&gt; &gt; Don't configure syslogd to do reverse lookups.
&gt; 
&gt; Our syslogd has no option to disable the reverse lookups.
&gt; 
&gt; &gt; You can NEVER guarantee that the reverse lookup will succeed, and
&gt; &gt; can be delayed several minutes for a single reply.
&gt; 
&gt; Not true.  The named on our loghost is authoritative for the reverse
&gt; mappings for all of the machines which can log there.

If the server is sufficiently busy, the reply WILL be delayed. It can
even be on the same host, it just may not get around to a reply immediately.
Authority is not equivalent to reply. The advantage of local files is
that the reverse lookup doesn't depend on ANY outside agency.

&gt; &gt; I consider this a configuration error. I don't believe syslogd
&gt; &gt; should ever do a reverse lookup, since the name you are trying to
&gt; &gt; get may never arrive, or if arrives, it may be spoofed.
&gt; 
&gt; There *is* no configuration for these tools which gives the behavior
&gt; you describe, so this is not a "configuration error".

I think it requires a recompile of the syslogd source to make that
change. I grant that there isn't a runtime option for it (I do think
there should be).

&gt; &gt; It's not a bug, but a security feature. NO log to syslogd should be
&gt; &gt; lost, since it may be related to an attack.
&gt; 
&gt; Historically, no other Unix system has had reliable syslogging.  It
&gt; would require very defensive programming for syslogd, and that has
&gt; clearly not been performed.

Some do, some don't - Cray systems will shut down if the audit daemon
disappears. Syslogd on Linux is providing the corresponding facility,
at the current time. Neither syslogd, nor audit daemon are reliable on
SGI systems, trusted solaris shuts down - I believe. The normal solaris
is unknown since I haven't had time to fully configure either it or the
audit daemon yet.

&gt; And if this is what GNU/Linux intends, why does glibc use a SOCK_DGRAM
&gt; socket for communication with syslogd?  By definition, such sockets
&gt; are *unreliable*.  If syslog is supposed to be reliable, a different
&gt; connection type must be used.

I think that is a "don't care" option on AF_UNIX connections. Required
for semantic compatability, but not used.

&gt; 
&gt; Your philosophy that "no syslog message should ever be lost" is not
&gt; necessarily bad.  But it is clearly at odds with historical practice,
&gt; the current glibc syslog() implementation, and the current syslogd
&gt; itself.
&gt; 
&gt; It is true that glibc falls back to using SOCK_STREAM if the
&gt; SOCK_DGRAM connection fails.  Does that mean GNU/Linux is expects
&gt; syslog to be reliable eventually?  If so, then my problem is entirely
&gt; a bug in syslogd and I will report it as such.

I think it is only reliable on the local host. If a remote syslog
facility is used, then it may be dropped if the input queue becomes too
long.

-------------------------------------------------------------------------
Jesse I Pollard, II
Email: pollard@navo.hpc.mil

Any opinions expressed are solely my own.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001026094957</emailId><senderName>Igmar Palsenberg</senderName><senderEmail>maillist@chello.nl</senderEmail><timestampReceived>2000-10-26 09:49:57-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>


&gt; Ulrich Drepper &lt;drepper@redhat.com&gt; writes:
&gt; 
&gt; &gt; If anything has to be changed it's (as suggested) the configuration
&gt; &gt; or even the implementation of syslogd.  Make it robust.
&gt; 
&gt; OK, but my current syslogd only listens to /dev/log as a SOCK_DGRAM.
&gt; If I wanted reliable syslogging, it would be listening on it as a
&gt; SOCK_STREAM.  Maybe I care more about performance and backwards
&gt; compatibility than reliable syslogging.  But whatever my reasons, my
&gt; connection to syslogd is already unreliable and therefore *should not
&gt; block*.
&gt; 
&gt; (Could a syslogd listen on /dev/log both as SOCK_DGRAM and as
&gt; SOCK_STREAM?  If so, then your philosophy implies that glibc should be
&gt; trying SOCK_STREAM *first*, falling back to SOCK_DGRAM for historical
&gt; compatibility.  Either way, when it uses datagrams, it should never
&gt; block, period.)

The reason for this is that DGRAM is faster the STREAM. And with syslogd
being on a fast, secure network I can understand the design filosofie
behind this.

I'll have a look at syslog, and see if I can hack out the reverse lookups.

&gt;  - Pat

	Igmar

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001026104653</emailId><senderName>Igmar Palsenberg</senderName><senderEmail>maillist@chello.nl</senderEmail><timestampReceived>2000-10-26 10:46:53-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

On 23 Oct 2000, Patrick J. LoPresti wrote:

&gt; Jesse Pollard &lt;pollard@tomcat.admin.navo.hpc.mil&gt; writes:
&gt; 
&gt; &gt; Don't configure syslogd to do reverse lookups.
&gt; 
&gt; Our syslogd has no option to disable the reverse lookups.

Requires a recompile.

&gt; &gt; You can NEVER guarantee that the reverse lookup will succeed, and
&gt; &gt; can be delayed several minutes for a single reply.
&gt; 
&gt; Not true.  The named on our loghost is authoritative for the reverse
&gt; mappings for all of the machines which can log there.

Put the names of your machines in /etc/hosts on your logmachine.

&gt; 
&gt; &gt; I consider this a configuration error. I don't believe syslogd
&gt; &gt; should ever do a reverse lookup, since the name you are trying to
&gt; &gt; get may never arrive, or if arrives, it may be spoofed.
&gt; 
&gt; There *is* no configuration for these tools which gives the behavior
&gt; you describe, so this is not a "configuration error".

I agree that it is ugly that you can't disable reverse with syslog. There
are implementations of the syslogd (syslog-ng) that do allow this. If you
want to stick with the 'normal' syslog, either recompile with an option
not do do reverse lookups, put you hosts in /etc/hosts, of hack the
source.
 
&gt; &gt; It's not a bug, but a security feature. NO log to syslogd should be
&gt; &gt; lost, since it may be related to an attack.
&gt; 
&gt; Historically, no other Unix system has had reliable syslogging.  It
&gt; would require very defensive programming for syslogd, and that has
&gt; clearly not been performed.
&gt; 
&gt; And if this is what GNU/Linux intends, why does glibc use a SOCK_DGRAM
&gt; socket for communication with syslogd?  By definition, such sockets
&gt; are *unreliable*.  If syslog is supposed to be reliable, a different
&gt; connection type must be used.

Because if is fast. Second, you can assume that remote logging is NOT done
over the internet, anyone who does is an idiot. So the change that some
UDP packet get's lost is close to zero. I think the changes are higher
that the connection oriented solutions would get messages lost.

&gt; Your philosophy that "no syslog message should ever be lost" is not
&gt; necessarily bad.  But it is clearly at odds with historical practice,
&gt; the current glibc syslog() implementation, and the current syslogd
&gt; itself.
&gt; 
&gt; It is true that glibc falls back to using SOCK_STREAM if the
&gt; SOCK_DGRAM connection fails.  Does that mean GNU/Linux is expects
&gt; syslog to be reliable eventually?  If so, then my problem is entirely
&gt; a bug in syslogd and I will report it as such.

I agree with the bad configuration remark at top. WHY do you want named to
do the reverse ?? Putting things in /etc/hosts makes thing hell of a lot
faster. With a central loghost that makes sense to me.

&gt;  - Pat


	Igmar

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001026152152</emailId><senderName>Patrick J !  LoPresti</senderName><senderEmail>patl@cag.lcs.mit.edu</senderEmail><timestampReceived>2000-10-26 15:21:52-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

Igmar Palsenberg &lt;maillist@chello.nl&gt; writes:

&gt; On 23 Oct 2000, Patrick J. LoPresti wrote:
&gt;
&gt; &gt; Not true.  The named on our loghost is authoritative for the reverse
&gt; &gt; mappings for all of the machines which can log there.
&gt; 
&gt; Put the names of your machines in /etc/hosts on your logmachine.

This is not an option for us, unfortunately.  Many of our IP addresses
are dynamically assigned, with the DNS tables dynamically updated.

Thank you for the patch to syslogd, though!  Can you try to get your
"-x" option into the standard distributions of syslogd, or should I
work up a bug report / feature request for Red Hat myself?

 - Pat
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001027210657</emailId><senderName>Igmar Palsenberg</senderName><senderEmail>maillist@chello.nl</senderEmail><timestampReceived>2000-10-27 21:06:57-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>


&gt; This is not an option for us, unfortunately.  Many of our IP addresses
&gt; are dynamically assigned, with the DNS tables dynamically updated.

Not an option in that case.
 
&gt; Thank you for the patch to syslogd, though!  Can you try to get your
&gt; "-x" option into the standard distributions of syslogd, or should I
&gt; work up a bug report / feature request for Red Hat myself?

I have no idea who officially maintains it.. putting a bug report with RH
should be a good idea. The patch is untested, so someone needs to verify
that remote logging indeed nog is IP only. 

&gt;  - Pat
&gt; 

	
	Igmar

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001122172617</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-11-22 17:26:17-0400</timestampReceived><subject>Re: Dynamic libraries at a non-default address</subject><body>

"H. Peter Anvin" &lt;hpa@transmeta.com&gt; writes:

&gt; The 0x40000000 comes from the kernel -- it's the lowest address a mmap()
&gt; without a preferred address will be assigned.


Yes.  And that's why I don't understand what your question is about.
Application code (unless you create dynamic applications) have a fixed
load address of 0x08048000.  You'll have to relink an application to
change that.

The location of everything else is decided by the kernel.  If you want
to have a certain address space unused modify the kernel.  This has
nothing at all to do with glibc.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001122173534</emailId><senderName>"H. Peter Anvin"</senderName><senderEmail>hpa@transmeta.com</senderEmail><timestampReceived>2000-11-22 17:35:34-0400</timestampReceived><subject>Re: Dynamic libraries at a non-default address</subject><body>

Ulrich Drepper wrote:
&gt; 
&gt; "H. Peter Anvin" &lt;hpa@transmeta.com&gt; writes:
&gt; 
&gt; &gt; The 0x40000000 comes from the kernel -- it's the lowest address a mmap()
&gt; &gt; without a preferred address will be assigned.
&gt; 
&gt; Yes.  And that's why I don't understand what your question is about.
&gt; Application code (unless you create dynamic applications) have a fixed
&gt; load address of 0x08048000.  You'll have to relink an application to
&gt; change that.
&gt; 
&gt; The location of everything else is decided by the kernel.  If you want
&gt; to have a certain address space unused modify the kernel.  This has
&gt; nothing at all to do with glibc.
&gt; 

Read my previous message -- I'd like to use unmodified kernels and
glibc.  The kernel can be prevented from using an address space by
claiming it first.  The problem, of course, is that with ELF (unlike
a.out), one can't simply just modify crt0.S and have it happen "first".

	-hpa

-- 
&lt;hpa@transmeta.com&gt; at work, &lt;hpa@zytor.com&gt; in private!
"Unix gives you enough rope to shoot yourself in the foot."
http://www.zytor.com/~hpa/puzzle.txt
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001028202853</emailId><senderName>Stephen Harris</senderName><senderEmail>sweh@spuddy.mew.co.uk</senderEmail><timestampReceived>2000-10-28 20:28:53-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

Igmar Palsenberg (maillist@chello.nl) wrote:
: over the internet, anyone who does is an idiot. So the change that some
: UDP packet get's lost is close to zero. I think the changes are higher

Snigger.  You've used large networks have you?  I can guarantee that in
a centrally-logged environment with say 300-&gt;400 hosts all logging to one
box that you WILL lose packets.   When I upgraded a Sparc 5 to an Ultra 2
my syslog data went up by 20%.  Shows how much we were losing!

: do the reverse ?? Putting things in /etc/hosts makes thing hell of a lot
: faster. With a central loghost that makes sense to me.

Not feasibly in a large network environment.

Trust me, you are thinking "small network" here.

                                 Stephen Harris
                 sweh@spuddy.mew.co.uk   http://www.spuddy.org/
      The truth is the truth, and opinion just opinion.  But what is what?
       My employer pays to ignore my opinions; you get to do it for free.      
  * Meeeeow ! Call  Spud the Cat on &gt; 01708 442043 &lt; for free Usenet access *
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001030171718</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-10-30 17:17:18-0400</timestampReceived><subject>Re: glibc 2.1.96</subject><body>

Christian Iseli &lt;chris@ludwig-alpha.unil.ch&gt; writes:

&gt; Yup, you said it.  That's why I tried using the latest CVS.  But it still
&gt; failed. Is there a specific snapshot that you'd recommend ?

The compiler I've using is gcc version 2.96 20000629.  But this just
one arbitrary date.  I would not expect too many problems with the
current compiler if not all the new optimizations are enabled.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001031003113</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-10-31 00:31:13-0400</timestampReceived><subject>thread-aware locale API</subject><body>

I've uploaded at

	http://www.cygnus.com/~drepper/tllocale.ps.bz2

a document describing the new locale intend to be implemented in glibc
2.3.  It's a large document but mostly because it tries to be
complete.  The essential pieces are only a few pages long.

Comments directly to me, please.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001023163152</emailId><senderName>Patrick J !  LoPresti</senderName><senderEmail>patl@cag.lcs.mit.edu</senderEmail><timestampReceived>2000-10-23 16:31:52-0400</timestampReceived><subject>syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

If you send SIGSTOP to syslogd on a Red Hat 6.2 system (glibc 2.1.3,
kernel 2.2.x), within a few minutes you will find your entire machine
grinds to a halt.  For example, nobody can log in.

This happens because once the /dev/log buffer fills, the syslog()
glibc function blocks.

This is a problem for us in Real Life because named and syslogd are
deadlocking while trying to talk to each other.  On our loghost,
syslogd needs to do reverse name lookups while named needs to call
syslog().  When traffic gets heavy all around, the deadlock is
triggered, and it is quite unpleasant.  We are about to configure
named to use flat files instead of syslog, but that feels more like a
workaround than a fix.

I am not sure whether this is a glibc bug or a kernel bug.  I have
used netstat and the glibc sources to confirm that glibc is using a
SOCK_DGRAM Unix socket to send to /dev/log.  I thought DGRAM sockets
were supposed to drop packets on the floor instead of blocking.  But
perhaps I am wrong and glibc is supposed to be explicitly marking the
socket as non-blocking.

Regardless of whose bug it is, I suggest that it needs to be fixed.
To my knowledge, other Unix systems do not behave this way; they
simply drop messages when syslogd is not responding.  IMO, that is
correct behavior.

 - Pat
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001027081801</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-10-27 08:18:01-0400</timestampReceived><subject>glibc 2.1.96</subject><body>

I've uploaded version 2.1.96 (sixth pre-release of glibc 2.2) to

  ftp://sources.redhat.com/pub/glibc/releases

You'll find the files

  glibc-2.1.96.tar.bz2                 (also .gz)
  glibc-2.1.95-2.1.96.diff.bz2         (also .gz)
  glibc-linuxthreads-2.1.96.tar.gz

We are quite close to a final release and this shows in the rather
small patch.  The main changes include beside various small bug fixes

 - ELF ld.so reference counting should work reliably now

 - PPC works just fine now

 - SH code update


The status of the other architecture is (to my knowledge) as follows:

 - x86: no problems

 - m68k: no problems

 - Alpha: some compilers might have problems and you need recent kernels
   (esp on ev6 machines)

 - IA-64: no problems (with appropriate compiler and kernel)

 - S390: no problem (has now thread register support)

 - SPARC32: no problem

 - SPARC64: passes test suite for the first time; only a few unimplemented
   long double math functions left; but this is true even for x86

 - Arm: gcc problems, beside this with a new kernel no problems

 - MIPS: tools and kernel problems

 - HPPA: somewhat working; the code is not in the distribution (yet) since
   the legal documents are not signed


As usual (I must say) the feedback was rare.  We didn't get many bug
reports even with the wide distribution through RH7.  I see this as a
good sign since most of the problems we had to fix were in not so
often used code (or at least the features are not used often).


This might be the last chance to see problems fixed before the final
release.  Use it.  Report problems to libc-alpha@sources.redhat.com.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001030162727</emailId><senderName>Christian Iseli</senderName><senderEmail>chris@ludwig-alpha.unil.ch</senderEmail><timestampReceived>2000-10-30 16:27:27-0400</timestampReceived><subject>Re: glibc 2.1.96</subject><body>

Hi folks,

Here is some feedback about glibc 2.1.96.  I tried to test it on two Linux 
architectures: i386 and alpha.

First, for i386:  my machine is based on an Asus board, with an Athlon TBird, 
running Linux 2.4.0-test10.  I had no problems in compiling glibc using GCC 
2.95.1, and saw no errors in make check.

I also attempted to build glibc using the current CVS GCC (2.97), but ran in 
many troubles.  AFAICT, this GCC miscompiles the kernel (OOPS in kupdated, and 
locks there), glibc (many errors in make check), and XFree86 4.0.1 (weird 
errors, where X won't allow to be passed any parameters, and will lock the 
machine upon exiting)

I actually installed glibc 2.1.96 (compiled using GCC 2.95.1) as my default C 
library on this machine, and have had no problems in two days of use, 
mostly compiling stuff and using my ipppd connection.


Now for the alpha...  The machine is a PC164LX. GCC 2.95.x won't compile the
current glibc, IIRC.  And my last attempt using the latest GCC CVS (2.97) of
today was unsuccessful.  It dies while trying to compile iconv_prog.c:
iconv_prog.c: In function `main':
iconv_prog.c:291: Internal error: Illegal instruction.
   Please submit a full bug report.
   See &lt;URL:http://www.gnu.org/software/gcc/bugs.html&gt; for instructions.

I also had problems getting sysdeps/alpha/ffs.S to compile.  My 
assembler
(GNU assembler version 2.10.91 (alphaev56-unknown-linux-gnu)
  using BFD version 2.10.0.33)
doesn't like the $ffsl..ng labels.  I deleted the ..ng part, but that seems 
strange.  The initfini.c file produces the same problem in internal labels.

In short: i386 = two thumbs up; alpha = no go (and GCC 3.0 ain't there yet...)

					Christian


-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001030170537</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-10-30 17:05:37-0400</timestampReceived><subject>Re: glibc 2.1.96</subject><body>

Christian Iseli &lt;chris@ludwig-alpha.unil.ch&gt; writes:

&gt; In short: i386 = two thumbs up; alpha = no go (and GCC 3.0 ain't there yet...)

Thanks for testing.  But I already said in the announcement that you
need a rececent compiler (and tools) an Alpha.  I've only had success
with gcc 2.96 and up.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001023183548</emailId><senderName>Jesse Pollard</senderName><senderEmail>pollard@tomcat.admin.navo.hpc.mil</senderEmail><timestampReceived>2000-10-23 18:35:48-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

patl@cag.lcs.mit.edu (Patrick J. LoPresti):
&gt; 
&gt; If you send SIGSTOP to syslogd on a Red Hat 6.2 system (glibc 2.1.3,
&gt; kernel 2.2.x), within a few minutes you will find your entire machine
&gt; grinds to a halt.  For example, nobody can log in.
&gt; 
&gt; This happens because once the /dev/log buffer fills, the syslog()
&gt; glibc function blocks.
&gt; 
&gt; This is a problem for us in Real Life because named and syslogd are
&gt; deadlocking while trying to talk to each other.  On our loghost,
&gt; syslogd needs to do reverse name lookups while named needs to call
&gt; syslog().  When traffic gets heavy all around, the deadlock is
&gt; triggered, and it is quite unpleasant.  We are about to configure
&gt; named to use flat files instead of syslog, but that feels more like a
&gt; workaround than a fix.

Don't configure syslogd to do reverse lookups. You can NEVER guarantee
that the reverse lookup will succeed, and can be delayed several minutes
for a single reply.

&gt; I am not sure whether this is a glibc bug or a kernel bug.  I have
&gt; used netstat and the glibc sources to confirm that glibc is using a
&gt; SOCK_DGRAM Unix socket to send to /dev/log.  I thought DGRAM sockets
&gt; were supposed to drop packets on the floor instead of blocking.  But
&gt; perhaps I am wrong and glibc is supposed to be explicitly marking the
&gt; socket as non-blocking.

I consider this a configuration error. I don't believe syslogd should
ever do a reverse lookup, since the name you are trying to get may never
arrive, or if arrives, it may be spoofed.

It's not a bug, but a security feature. NO log to syslogd should be lost,
since it may be related to an attack. 

&gt; Regardless of whose bug it is, I suggest that it needs to be fixed.
&gt; To my knowledge, other Unix systems do not behave this way; they
&gt; simply drop messages when syslogd is not responding.  IMO, that is
&gt; correct behavior.

Not good security practice. If syslog drops messages then you can lose
messages pertaining to an attack.

It would be better to disable reverse lookups by syslogd. This might
require a recompile of syslogd.

-------------------------------------------------------------------------
Jesse I Pollard, II
Email: pollard@navo.hpc.mil

Any opinions expressed are solely my own.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001023190403</emailId><senderName>Patrick J !  LoPresti</senderName><senderEmail>patl@cag.lcs.mit.edu</senderEmail><timestampReceived>2000-10-23 19:04:03-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

Jesse Pollard &lt;pollard@tomcat.admin.navo.hpc.mil&gt; writes:

&gt; Don't configure syslogd to do reverse lookups.

Our syslogd has no option to disable the reverse lookups.

&gt; You can NEVER guarantee that the reverse lookup will succeed, and
&gt; can be delayed several minutes for a single reply.

Not true.  The named on our loghost is authoritative for the reverse
mappings for all of the machines which can log there.

&gt; I consider this a configuration error. I don't believe syslogd
&gt; should ever do a reverse lookup, since the name you are trying to
&gt; get may never arrive, or if arrives, it may be spoofed.

There *is* no configuration for these tools which gives the behavior
you describe, so this is not a "configuration error".

&gt; It's not a bug, but a security feature. NO log to syslogd should be
&gt; lost, since it may be related to an attack.

Historically, no other Unix system has had reliable syslogging.  It
would require very defensive programming for syslogd, and that has
clearly not been performed.

And if this is what GNU/Linux intends, why does glibc use a SOCK_DGRAM
socket for communication with syslogd?  By definition, such sockets
are *unreliable*.  If syslog is supposed to be reliable, a different
connection type must be used.

Your philosophy that "no syslog message should ever be lost" is not
necessarily bad.  But it is clearly at odds with historical practice,
the current glibc syslog() implementation, and the current syslogd
itself.

It is true that glibc falls back to using SOCK_STREAM if the
SOCK_DGRAM connection fails.  Does that mean GNU/Linux is expects
syslog to be reliable eventually?  If so, then my problem is entirely
a bug in syslogd and I will report it as such.

 - Pat
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001023191633</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-10-23 19:16:33-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

Jesse Pollard &lt;pollard@tomcat.admin.navo.hpc.mil&gt; writes:

&gt; It's not a bug, but a security feature. NO log to syslogd should be lost,
&gt; since it may be related to an attack. 

That's exactly the argument I'm always using to turn down change
requests like this.  If the syslog() function could drop an entry and
not send it is easy enough for somebody who has something to hide to
overflow syslog() and then do the whatever s/he does not want to be
logged.

If anything has to be changed it's (as suggested) the configuration or
even the implementation of syslogd.  Make it robust.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001023192836</emailId><senderName>"David S. Miller"</senderName><senderEmail>davem@redhat.com</senderEmail><timestampReceived>2000-10-23 19:28:36-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

   From: patl@cag.lcs.mit.edu (Patrick J. LoPresti)
   Date: 	23 Oct 2000 15:28:58 -0400

   OK, but my current syslogd only listens to /dev/log as a
   SOCK_DGRAM.  If I wanted reliable syslogging, it would be listening
   on it as a SOCK_STREAM.

SOCK_DGRAM over AF_UNIX is reliable, it's a local transport.

With AF_UNIX the only real difference between SOCK_DGRAM and
SOCK_STREAM is whether writes must be atomic.  F.e. for the SOCK_DGRAM
case if you try to perform a write() larger than the socket buffer
size you'll get a EMSGSIZE return, whereas for the same example in
the SOCK_STREAM case the kernel will chop up the message for you and
send over the pieces seperately to the peer socket.

Later,
David S. Miller
davem@redhat.com
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001023192858</emailId><senderName>Patrick J !  LoPresti</senderName><senderEmail>patl@cag.lcs.mit.edu</senderEmail><timestampReceived>2000-10-23 19:28:58-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

Ulrich Drepper &lt;drepper@redhat.com&gt; writes:

&gt; If anything has to be changed it's (as suggested) the configuration
&gt; or even the implementation of syslogd.  Make it robust.

OK, but my current syslogd only listens to /dev/log as a SOCK_DGRAM.
If I wanted reliable syslogging, it would be listening on it as a
SOCK_STREAM.  Maybe I care more about performance and backwards
compatibility than reliable syslogging.  But whatever my reasons, my
connection to syslogd is already unreliable and therefore *should not
block*.

(Could a syslogd listen on /dev/log both as SOCK_DGRAM and as
SOCK_STREAM?  If so, then your philosophy implies that glibc should be
trying SOCK_STREAM *first*, falling back to SOCK_DGRAM for historical
compatibility.  Either way, when it uses datagrams, it should never
block, period.)

 - Pat
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001023193806</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@redhat.com</senderEmail><timestampReceived>2000-10-23 19:38:06-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

patl@cag.lcs.mit.edu (Patrick J. LoPresti) writes:

&gt; OK, but my current syslogd only listens to /dev/log as a SOCK_DGRAM.
&gt; [...]

I don't care what the current syslogd does.  Changing the libc just to
work around the limitations of current implementations is wrong.
Write a new syslogd and do it right.

-- 
---------------.                          ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Red Hat          `--' drepper at redhat.com   `------------------------
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001023195256</emailId><senderName>"David S. Miller"</senderName><senderEmail>davem@redhat.com</senderEmail><timestampReceived>2000-10-23 19:52:56-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

   From: patl@cag.lcs.mit.edu (Patrick J. LoPresti)
   Date: 23 Oct 2000 15:58:39 -0400

   Is the Linux behavior even consistent with POSIX?  You are saying
   that SOCK_DGRAM behaves fundamentally differently for local
   connections than for remote ones; in particular, the latter *do not
   block* while the former do.  Even if this is standard, it ought to
   be documented better...

I did not say whether such calls block or not, during memory
allocation they might.

Look, show me how memcpy() can drop a packet and then we can continue
on about whether SOCK_DGRAM on AF_UNIX should behave one way or the
other ok?  :-) Because this is all that AF_UNIX is, memcpy, like a
pipe.  Therefore, the reliability distincion between
SOCK_DGRAM/SOCK_STREAM has no meaning for AF_UNIX sockets.

Later,
David S. Miller
davem@redhat.com
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001023195839</emailId><senderName>Patrick J !  LoPresti</senderName><senderEmail>patl@cag.lcs.mit.edu</senderEmail><timestampReceived>2000-10-23 19:58:39-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

"David S. Miller" &lt;davem@redhat.com&gt; writes:

&gt; SOCK_DGRAM over AF_UNIX is reliable, it's a local transport.

This is contrary to the documentation ("man socket").  The behavior
you describe is what I would expect for SOCK_SEQPACKET, not
SOCK_DGRAM.

Is the Linux behavior even consistent with POSIX?  You are saying that
SOCK_DGRAM behaves fundamentally differently for local connections
than for remote ones; in particular, the latter *do not block* while
the former do.  Even if this is standard, it ought to be documented
better...

I am pretty sure other Unixes do not behave like Linux does here (when
I ask for SOCK_DGRAM, I expect fast, non-blocking, unreliable
delivery), but perhaps I am wrong.

 - Pat
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001023203209</emailId><senderName>Kurt Roeckx</senderName><senderEmail>q@ping.be</senderEmail><timestampReceived>2000-10-23 20:32:09-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

On Mon, Oct 23, 2000 at 03:58:39PM -0400, Patrick J. LoPresti wrote:
&gt; "David S. Miller" &lt;davem@redhat.com&gt; writes:
&gt; 
&gt; &gt; SOCK_DGRAM over AF_UNIX is reliable, it's a local transport.
&gt; 
&gt; This is contrary to the documentation ("man socket").  The behavior
&gt; you describe is what I would expect for SOCK_SEQPACKET, not
&gt; SOCK_DGRAM.

SOCK_DGRAM is only as reliable as the underlying protocol. If the 
unerlying one is not reliable, neither is SOCK_DGRAM.  It will not
do anything to make it more reliable, unlike others.


Kurt

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email><email><emailId>20001023203552</emailId><senderName>Patrick J !  LoPresti</senderName><senderEmail>patl@cag.lcs.mit.edu</senderEmail><timestampReceived>2000-10-23 20:35:52-0400</timestampReceived><subject>Re: syslog() blocks on glibc 2.1.3 with kernel 2.2.x</subject><body>

"David S. Miller" &lt;davem@redhat.com&gt; writes:

&gt; I did not say whether such calls block or not, during memory
&gt; allocation they might.

I do not get your meaning.  By "block" I meant wait for some external
event (like another process or machine).  As in, the kind of behavior
which can result in deadlock if two things "block" while trying to
talk to each other.

&gt; Look, show me how memcpy() can drop a packet and then we can
&gt; continue on about whether SOCK_DGRAM on AF_UNIX should behave one
&gt; way or the other ok?  :-) Because this is all that AF_UNIX is,
&gt; memcpy, like a pipe.

I know what AF_UNIX sockets are.  I am talking about semantics, not
implementation.  Sure, memcpy() doesn't drop packets, but whatever is
listening to the other side of the connection might be slow or
non-responsive.  I would expect SOCK_DGRAM to drop packets in this
case.

Perhaps this expectation is wrong, but I don't think it is idiotic.
And I am genuinely curious to know what other Unixes do.

 - Pat
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org

</body></email></emails>